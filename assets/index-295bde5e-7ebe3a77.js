import{E as e,f as t,C as a,y as n,m as s,a as r,b as o,V as i,o as p,H as u,c as l,G as m,j as d,d as c,T as h,Z as f,x as y,R as g,P as b,e as N,D as w,q as x,g as S,i as T,N as v,k as O,K as _,l as E,n as A,p as k,r as M,s as C,t as I,v as D,w as z,S as $,$ as V,A as P,z as L,I as F,B as R,J as B,_ as j,L as q,M as W,O as H,u as U,Q as G,W as K,X as J,Y as Q,a0 as X,a1 as Z,a2 as Y,a3 as ee,a4 as te,a5 as ae,a6 as ne,a7 as se,a8 as re,a9 as oe,aa as ie,ab as pe,ac as ue,ad as le,ae as me,af as de,ag as ce,ah as he,ai as fe,aj as ye,ak as ge,al as be,am as Ne,an as we,ao as xe,ap as Se,aq as Te,ar as ve,as as Oe,at as _e,au as Ee,av as Ae,aw as ke,ax as Me,ay as Ce,az as Ie,aA as De,aB as ze,aC as $e,aD as Ve,aE as Pe,aF as Le,aG as Fe,aH as Re,aI as Be,aJ as je,aK as qe,aL as We,aM as He,aN as Ue,aO as Ge,aP as Ke,aQ as Je,aR as Qe,aS as Xe,aT as Ze,aU as Ye,aV as et,aW as tt,aX as at,aY as nt,aZ as st,a_ as rt,a$ as ot,b0 as it,b1 as pt,b2 as ut,b3 as lt,b4 as mt,b5 as dt,b6 as ct,b7 as ht,b8 as ft,b9 as yt,ba as gt,bb as bt,bc as Nt,bd as wt,be as xt,bf as St,bg as Tt,bh as vt,bi as Ot,bj as _t,bk as Et,bl as At,bm as kt,bn as Mt,bo as Ct,bp as It,bq as Dt,br as zt,bs as $t,bt as Vt,bu as Pt,bv as Lt,bw as Ft,bx as Rt,by as Bt,bz as jt,bA as qt,bB as Wt,bC as Ht,bD as Ut,bE as Gt,bF as Kt,bG as Jt,bH as Qt,bI as Xt,bJ as Zt,bK as Yt,bL as ea,bM as ta,bN as aa,bO as na,bP as sa,bQ as ra,bR as oa,bS as ia,bT as pa,bU as ua,bV as la,bW as ma,bX as da,bY as ca,bZ as ha,b_ as fa,b$ as ya,c0 as ga,c1 as ba,c2 as Na,c3 as wa,c4 as xa,c5 as Sa,c6 as Ta,c7 as va,c8 as Oa,c9 as _a,ca as Ea,cb as Aa,cc as ka,cd as Ma,ce as Ca,cf as Ia,cg as Da,ch as za,ci as $a,h as Va,cj as Pa,ck as La,cl as Fa,cm as Ra,cn as Ba,co as ja,cp as qa,cq as Wa,cr as Ha,cs as Ua,ct as Ga,cu as Ka,cv as Ja,cw as Qa,cx as Xa,cy as Za,cz as Ya,cA as en,cB as tn,cC as an,cD as nn,cE as sn,cF as rn,cG as on,cH as pn,cI as un,cJ as ln,cK as mn,cL as dn,cM as cn,cN as hn,cO as fn,cP as yn,cQ as gn,cR as bn,cS as Nn,cT as wn,cU as xn,cV as Sn,cW as Tn,cX as vn,cY as On,cZ as _n,c_ as En,c$ as An,d0 as kn,d1 as Mn,d2 as Cn,d3 as In,d4 as Dn,d5 as zn,d6 as $n,d7 as Vn,d8 as Pn,d9 as Ln,da as Fn,db as Rn,dc as Bn,dd as jn,de as qn,df as Wn,dg as Hn,dh as Un,di as Gn,dj as Kn,dk as Jn,dl as Qn,dm as Xn,dn as Zn,dp as Yn,dq as es,dr as ts,ds as as,dt as ns,du as ss,dv as rs,dw as os,dx as is,dy as ps,dz as us,dA as ls,dB as ms,dC as ds,U as cs,dD as hs,dE as fs,dF as ys,dG as gs,dH as bs,dI as Ns,dJ as ws,dK as xs,dL as Ss,dM as Ts,dN as vs,dO as Os,dP as _s,dQ as Es,dR as As,dS as ks,dT as Ms,dU as Cs,dV as Is,dW as Ds,dX as zs,dY as $s,dZ as Vs,d_ as Ps,d$ as Ls,e0 as Fs,e1 as Rs,e2 as Bs,e3 as js,e4 as qs,e5 as Ws,e6 as Hs,e7 as Us,e8 as Gs,e9 as Ks,ea as Js,eb as Qs,ec as Xs,ed as Zs,ee as Ys,ef as er,eg as tr,eh as ar,ei as nr,ej as sr,ek as rr,el as or,em as ir,en as pr,eo as ur,ep as lr,F as mr,eq as dr,er as cr,es as hr,et as fr,eu as yr,ev as gr,ew as br,ex as Nr,ey as wr,ez as xr,eA as Sr,eB as Tr,eC as vr,eD as Or,eE as _r,eF as Er,eG as Ar,eH as kr,eI as Mr,eJ as Cr,eK as Ir,eL as Dr,eM as zr,eN as $r,eO as Vr,eP as Pr,eQ as Lr,eR as Fr,eS as Rr,eT as Br,eU as jr,eV as qr,eW as Wr,eX as Hr,eY as Ur,eZ as Gr,e_ as Kr,e$ as Jr,f0 as Qr,f1 as Xr,f2 as Zr,f3 as Yr,f4 as eo,f5 as to,f6 as ao,f7 as no,f8 as so,f9 as ro,fa as oo}from"./register_all_kernels-6e0b897e-6d5d824a.js";import{fb as io,fc as po,fd as uo,fe as lo,ff as mo,fg as co,fh as ho,fi as fo,fj as yo,fk as go,fl as bo,fm as No,fn as wo,fo as xo,fp as So,fq as To,fr as vo,fs as Oo,ft as _o,fu as Eo,fv as Ao,fw as ko,fx as Mo,fy as Co,fz as Io,fA as Do,fB as zo,fC as $o,fD as Vo,fE as Po,fF as Lo,fG as Fo,fH as Ro,fI as Bo,fJ as jo,fK as qo,fL as Wo,fM as Ho,fN as Uo,fO as Go,fP as Ko,fQ as Jo,fR as Qo,fS as Xo,fT as Zo,fU as Yo,fV as ei,fW as ti,fX as ai,fY as ni,fZ as si,f_ as ri,f$ as oi,g0 as ii,g1 as pi,g2 as ui,g3 as li,g4 as mi,g5 as di,g6 as ci,g7 as hi,g8 as fi,g9 as yi,ga as gi,gb as bi,gc as Ni,gd as wi,ge as xi,gf as Si,gg as Ti,gh as vi,gi as Oi,gj as _i,gk as Ei,gl as Ai,gm as ki,gn as Mi,go as Ci,gp as Ii,gq as Di,gr as zi,gs as $i,gt as Vi,gu as Pi,gv as Li,gw as Fi,gx as Ri,gy as Bi,gz as ji,gA as qi,gB as Wi,gC as Hi,gD as Ui,gE as Gi,gF as Ki,gG as Ji,gH as Qi,gI as Xi,gJ as Zi,gK as Yi,gL as ep,gM as tp,gN as ap,gO as np,gP as sp,gQ as rp,gR as op,gS as ip,gT as pp,gU as up,gV as lp,gW as mp,gX as dp,gY as cp,gZ as hp,g_ as fp,g$ as yp,h0 as gp,h1 as bp,h2 as Np,h3 as wp,h4 as xp,h5 as Sp,h6 as Tp,h7 as vp,h8 as Op,h9 as _p,ha as Ep,hb as Ap,hc as kp,hd as Mp,he as Cp,hf as Ip,hg as Dp,hh as zp,hi as $p,hj as Vp,hk as Pp,hl as Lp,hm as Fp,hn as Rp,ho as Bp,hp as jp,hq as qp,hr as Wp,hs as Hp,ht as Up,hu as Gp,hv as Kp,hw as Jp,hx as Qp,hy as Xp,hz as Zp,hA as Yp,hB as eu,hC as tu,hD as au,hE as nu,hF as su,hG as ru,hH as ou,hI as iu,hJ as pu,hK as uu,hL as lu,hM as mu,hN as du,hO as cu,hP as hu,hQ as fu,hR as yu,hS as gu,hT as bu,hU as Nu,hV as wu,hW as xu,hX as Su,hY as Tu,hZ as vu,h_ as Ou,h$ as _u,i0 as Eu,i1 as Au,i2 as ku,i3 as Mu,i4 as Cu,i5 as Iu,i6 as Du,i7 as zu,i8 as $u,i9 as Vu,ia as Pu,ib as Lu,ic as Fu,id as Ru,ie as Bu,ig as ju,ih as qu,ii as Wu,ij as Hu,ik as Uu,il as Gu,im as Ku,io as Ju,ip as Qu,iq as Xu,ir as Zu,is as Yu,it as el,iu as tl,iv as al,iw as nl,ix as sl,iy as rl,iz as ol,iA as il,iB as pl,iC as ul,iD as ll,iE as ml,iF as dl,iG as cl,iH as hl,iI as fl,iJ as yl,iK as gl,iL as bl,iM as Nl,iN as wl,iO as xl,iP as Sl,iQ as Tl,iR as vl,iS as Ol,iT as _l,iU as El,iV as Al}from"./register_all_kernels-6e0b897e-6d5d824a.js";import"./index-3111b9b5.js";var kl=(e,t,a)=>new Promise((n,s)=>{var r=e=>{try{i(a.next(e))}catch(t){s(t)}},o=e=>{try{i(a.throw(e))}catch(t){s(t)}},i=e=>e.done?n(e.value):Promise.resolve(e.value).then(r,o);i((a=a.apply(e,t)).next())});
/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/const Ml=e({addN_:function(e){t(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),t(e.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`);const o=e.map((e,t)=>a(e,`tensors${t}`,"addN")),i=o[0];o.forEach(e=>{if(e.dtype!==i.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),o.forEach(e=>{if(!n(e.shape,i.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const p=o;return s.runKernel(r,p)}}),Cl=e({basicLSTMCell_:function(e,t,n,s,r,c){const h=a(e,"forgetBias","basicLSTMCell"),f=a(t,"lstmKernel","basicLSTMCell"),y=a(n,"lstmBias","basicLSTMCell"),g=a(s,"data","basicLSTMCell"),b=a(r,"c","basicLSTMCell"),N=a(c,"h","basicLSTMCell"),w=o([g,N],1),x=i(w,f),S=p(x,y),T=S.shape[0],v=S.shape[1]/4,O=[T,v],_=u(S,[0,0],O),E=u(S,[0,v],O),A=u(S,[0,2*v],O),k=u(S,[0,3*v],O),M=p(l(m(_),d(E)),l(b,m(p(h,A))));return[M,l(d(M),m(k))]}}),Il=e({bitwiseAnd_:function(e,t){const r=a(e,"x","bitwiseAnd"),o=a(t,"y","bitwiseAnd");if(!n(r.shape,o.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${r.shape}, y: ${o.shape}`);if("int32"!==r.dtype||"int32"!==o.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${r.dtype} and type of y: ${o.dtype}`);const i={a:r,b:o};return s.runKernel(c,i)}}),Dl=e({broadcastArgs_:function(e,t){const n=a(e,"s0","broadcastArgs","int32"),r=a(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const o={s0:n,s1:r};return s.runKernel(h,o)}}),zl=e({diag_:function(e){const t={x:a(e,"x","diag")};return s.runKernel(f,t)}}),$l=e({ensureShape_:function(e,t){const n=a(e,"x","ensureShape","string_or_numeric");if(!y(n.shape,t))throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${t}`);return e}});
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Vl(e,t,a){if(a<=0)throw new Error("The number of values should be positive.");const n={start:e,stop:t,num:a};return s.runKernel(g,{},n)}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const Pl=2147483648,Ll=e({searchSorted_:function(e,t,n="left"){const r=a(e,"sortedSequence","searchSorted"),o=a(t,"values","searchSorted"),i=r.shape[r.shape.length-1],p=o.shape[o.shape.length-1],u=b(r,[-1,i]),l=b(o,[-1,p]);if(u.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(u.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(N(l.shape)>=Pl)throw new Error("values tensor size must less than 2147483648");if(u.shape[1]>=Pl)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${u.shape[1]}`);const m={sortedSequence:u,values:l},d={side:n};return s.runKernel(w,m,d)}});
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Fl(e,t){return Ll(e,t,"left")}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const Rl=e({maxPoolWithArgmax_:function(e,t,n,r,o=!1){const i={x:a(e,"x","maxPoolWithArgmax")},p={filterSize:t,strides:n,pad:r,includeBatchInIndex:o},u=s.runKernel(x,i,p);return{result:u[0],indexes:u[1]}}});
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function Bl(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let s=a(e,"x","meshgrid",e instanceof S?e.dtype:"float32");if(void 0===t)return[s];let r=a(t,"y","meshgrid",t instanceof S?t.dtype:"float32");const o=N(s.shape),p=N(r.shape);return"xy"===n?(s=b(s,[1,-1]),r=b(r,[-1,1]),[i(T([p,1],s.dtype),s),i(r,T([1,o],r.dtype))]):(s=b(s,[-1,1]),r=b(r,[1,-1]),[i(s,T([1,p],s.dtype)),i(T([o,1],r.dtype),r)])}const jl=e({multiRNNCell_:function(e,t,n,s){const r=a(t,"data","multiRNNCell"),o=v(n,"c","multiRNNCell"),i=v(s,"h","multiRNNCell");let p=r;const u=[];for(let a=0;a<e.length;a++){const t=e[a](p,o[a],i[a]);u.push(t[0]),u.push(t[1]),p=t[1]}const l=[],m=[];for(let a=0;a<u.length;a+=2)l.push(u[a]),m.push(u[a+1]);return[l,m]}}),ql=e({multinomial_:function(e,t,n,r=!1){const o=a(e,"logits","multinomial"),i=o.size,p=o.rank;if(i<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${i}.`);if(p>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${p}`);n=n||Math.random();const u={logits:1===p?b(o,[1,-1]):o},l={numSamples:t,seed:n,normalized:r},m=s.runKernel(O,u,l);return 1===p?b(m,[m.size]):m}}),Wl=e({outerProduct_:function(e,n){const s=a(e,"v1","outerProduct"),r=a(n,"v2","outerProduct");t(1===s.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${s.rank} and ${r.rank}.`);const o=b(s,[-1,1]),p=b(r,[1,-1]);return i(o,p)}}),Hl=e({pad1d_:function(e,a,n=0){return t(2===a.length,()=>"Invalid number of paddings. Must be length of 2."),_(e,[a],n)}}),Ul=e({pad2d_:function(e,a,n=0){return t(2===a.length&&2===a[0].length&&2===a[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),_(e,a,n)}}),Gl=e({pad3d_:function(e,a,n=0){return t(3===a.length&&2===a[0].length&&2===a[1].length&&2===a[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),_(e,a,n)}}),Kl=e({pad4d_:function(e,a,n=0){return t(4===a.length&&2===a[0].length&&2===a[1].length&&2===a[2].length&&2===a[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),_(e,a,n)}}),Jl=e({raggedGather_:function(e,t,n,r){const o={paramsNestedSplits:e.map((e,t)=>a(e,`tensors${t}`,"raggedGather","int32")),paramsDenseValues:a(t,"paramsDenseValues","raggedGather"),indices:a(n,"indices","raggedGather","int32")},i={outputRaggedRank:r},p=s.runKernel(E,o,i);return{outputNestedSplits:p.slice(0,p.length-1),outputDenseValues:p[p.length-1]}}}),Ql=e({raggedRange_:function(e,t,n){const r=a(e,"starts","raggedRange"),o={starts:r,limits:a(t,"limits","raggedRange",r.dtype),deltas:a(n,"deltas","raggedRange",r.dtype)},i=s.runKernel(A,o);return{rtNestedSplits:i[0],rtDenseValues:i[1]}}}),Xl=e({raggedTensorToTensor_:function(e,t,n,r,o){const i=a(e,"shape","raggedTensorToTensor","int32"),p=a(t,"values","raggedTensorToTensor"),u={shape:i,values:p,defaultValue:a(n,"defaultValue","raggedTensorToTensor",p.dtype),rowPartitionTensors:r.map((e,t)=>a(e,`tensors${t}`,"raggedTensorToTensor","int32"))},l={rowPartitionTypes:o};return s.runKernel(k,u,l)}}),Zl=e({rand_:function(e,t,a){M(e);const n=N(e);let r=null;if(null==a||"float32"===a)r=new Float32Array(n);else if("int32"===a)r=new Int32Array(n);else{if("bool"!==a)throw new Error(`Unknown data type ${a}`);r=new Uint8Array(n)}for(let s=0;s<n;s++)r[s]=t();return s.makeTensor(r,e,a)}});
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Yl(){return 32===s.backend.floatPrecision()?.001:.1}function em(e,t,a){let s=!0;if((Ir(e)||Ir(t))&&(s=!1),Ir(e)&&Ir(t)&&(s=!0),s){const a=e.constructor.name,n=t.constructor.name;if(a!==n)throw new Error(`Arrays are of different type. Actual: ${a}. Expected: ${n}`)}if(Array.isArray(e)&&Array.isArray(t)){const a=F(e),s=F(t);if(!n(a,s))throw new Error(`Arrays have different shapes. Actual: [${a}]. Expected: [${s}]`)}const r=Ir(e)?e:Dr(e),o=Ir(t)?t:Dr(t);if(r.length!==o.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${o.length}.\nActual:   ${r}.\nExpected: ${o}.`);for(let n=0;n<o.length;++n){const e=r[n],t=o[n];if(!a(e,t))throw new Error(`Arrays differ: actual[${n}] = ${e}, expected[${n}] = ${t}.\nActual:   ${r}.\nExpected: ${o}.`)}"undefined"!=typeof expect&&expect().nothing()}function tm(e,t,a){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>a)}const am=Object.freeze(Object.defineProperty({__proto__:null,TEST_EPSILON_FLOAT16:.1,createVideoElement:function(e){const t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(e),new Promise(e=>{t.addEventListener("loadeddata",a=>e(t)),t.load()})},encodeStrings:function e(t){for(let a=0;a<t.length;a++){const n=t[a];Array.isArray(n)?e(n):t[a]=C(n)}return t},expectArrayBuffersEqual:function(e,t){const a=new Float32Array(e),n=new Float32Array(t);if(a.length!==n.length)throw new Error(`Expected ArrayBuffer to be of length ${n.length}, but it was ${a.length}`);for(let s=0;s<n.length;s++)if(a[s]!==n[s])throw new Error(`Expected ArrayBuffer value at ${s} to be ${n[s]} but got ${a[s]} instead`)},expectArraysClose:function(e,t,a){return null==a&&(a=Yl()),em(e,t,(e,t)=>tm(e,t,a))},expectArraysEqual:function(e,t){const a="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return I(e)||I(e[0])||I(t)||I(t[0])?em(e,a,(e,t)=>e==t):em(e,t,(e,t)=>tm(e,t,0))},expectNumbersClose:function(e,t,a){if(null==a&&(a=Yl()),!tm(e,t,a))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`);"undefined"!=typeof expect&&expect().nothing()},expectPromiseToFail:function(e,t){e().then(()=>t.fail(),()=>t()),"undefined"!=typeof expect&&expect().nothing()},expectValuesInRange:function(e,t,a){for(let n=0;n<e.length;n++)if(e[n]<t||e[n]>a)throw new Error(`Value out of range:${e[n]} low: ${t}, high: ${a}`)},play:function(e){return kl(this,null,function*(){yield e.play(),"requestVideoFrameCallback"in e&&(yield new Promise(t=>{e.requestVideoFrameCallback(t)}))})},testEpsilon:Yl},Symbol.toStringTag,{value:"Module"})),nm=e({randomGamma_:function(e,t,a=1,n="float32",s){if(M(e),null==a&&(a=1),null==n&&(n="float32"),"float32"!==n&&"int32"!==n)throw new Error(`Unsupported data type ${n}`);const r=new D(t,a,n,s),o=z(e,n);for(let i=0;i<o.values.length;i++)o.values[i]=r.nextValue();return o.toTensor()}}),sm=e({randomStandardNormal_:function(e,t,a){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return $(e,0,1,t,a)}}),rm=e({randomUniformInt_:function(e,t,a,n){return V(e,t,a,"int32",n)}}),om=e({reverse1d_:function(e){const n=a(e,"x","reverse");return t(1===n.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${n.rank}.`),P(n,0)}}),im=e({reverse2d_:function(e,n){const s=a(e,"x","reverse");return t(2===s.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${s.rank}.`),P(s,n)}}),pm=e({reverse3d_:function(e,n){const s=a(e,"x","reverse");return t(3===s.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${s.rank}.`),P(s,n)}}),um=e({reverse4d_:function(e,n){const s=a(e,"x","reverse");return t(4===s.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${s.rank}.`),P(s,n)}}),lm=function(e,n){return kl(this,null,function*(){const s=a(e,"x","setdiff1d"),r=a(n,"y","setdiff1d");t(s.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${s.dtype}) and y (${r.dtype}).`),t(1===s.rank,()=>`x should be 1D tensor, but got x (${s.shape}).`),t(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const o=yield s.data(),i=yield r.data(),p=new Set(i);let u=0;for(let e=0;e<o.length;e++)p.has(o[e])||u++;const l=new zr([u],s.dtype),m=new zr([u],"int32");for(let e=0,t=0;e<o.length;e++)p.has(o[e])||(l.values[t]=o[e],m.values[t]=e,t++);return[l.toTensor(),m.toTensor()]})};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mm(e,t,a){if(L(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const n=F(e,a);if(3!==n.length&&1!==n.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===n.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return R(e,t,n,a)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function dm(e,t,a){if(L(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const n=F(e,a);if(4!==n.length&&1!==n.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===n.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return R(e,t,n,a)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cm(e,t,a){if(L(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const n=F(e,a);if(5!==n.length&&1!==n.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===n.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return R(e,t,n,a)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function hm(e,t,a){if(L(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const n=F(e,a);if(6!==n.length&&1!==n.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===n.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return R(e,t=t||n,n,a)}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const fm=e({tensorScatterUpdate_:function(e,t,n){const r=a(e,"tensor","tensorScatterupdate"),o=a(t,"indices","tensorScatterupdate","int32"),i=a(n,"updates","tensorScatterupdate");if(B(i,o,r.shape),r.dtype!==i.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${r.dtype} and ${i.dtype}.`);const p={tensor:r,indices:o,updates:i};return s.runKernel(j,p,{})}});
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ym(e,t){return Ll(e,t,"right")}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const gm=function(e){return kl(this,null,function*(){const t=a(e,"condition","whereAsync","bool"),n=yield t.data(),s=Re(t.shape,n);return e!==t&&t.dispose(),s})},bm=function(e,n,s){return kl(this,null,function*(){const r=a(e,"tensor","boolMask"),o=a(n,"mask","boolMask","bool"),i=null==s?0:s,p=o.rank,u=r.shape;t(p>0,()=>"mask cannot be scalar"),$r(u.slice(i,i+p),o.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=i;e<i+p;e++)l*=u[e];const m=u.slice(0,i).concat([l],u.slice(i+p)),d=b(r,m),c=b(o,[-1]),h=yield gm(c),f=sr(h,[1]),y=jn(d,f,i);return e!==r&&r.dispose(),n!==o&&o.dispose(),f.dispose(),d.dispose(),c.dispose(),h.dispose(),y})},Nm=e({movingAverage_:function(e,s,r,o,i=!0){const u=a(e,"v","movingAverage"),m=a(s,"x","movingAverage"),d=a(r,"decay","movingAverage");q(u,m),t(n(u.shape,m.shape),()=>"Shape mismatch in v and x");const c=W(1),h=H(c,d);let f=l(H(m,u),h);if(i){t(null!=o,()=>"When using zeroDebias: true, step is required.");const e=a(o,"step","movingAverage");f=U(f,H(c,G(d,e)))}return p(u,f)}}),wm=e({scatterND_:function(e,t,n){M(n);const r=a(e,"indices","scatterND","int32"),o=a(t,"updates","scatterND");B(o,r,n);const i={indices:r,updates:o},p={shape:n};return s.runKernel(K,i,p)}}),xm=e({sparseToDense_:
/**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */function(e,t,n,r=0){M(n);const o=a(e,"sparseIndices","sparseToDense","int32"),i=a(t,"sparseValues","sparseToDense","string_or_numeric"),p=a(r,"defaultValue","sparseToDense",i.dtype);!function(e,t,a,n){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,r=e.rank>1?e.shape[1]:1;if(a.length!==r)throw new Error(`outputShape has incorrect number of elements:, ${a.length}, should be: ${r}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==n.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(o,i,n,p);const u={sparseIndices:o,sparseValues:i,defaultValue:p},l={outputShape:n};return s.runKernel(J,u,l)}}),Sm=e({gatherND_:function(e,t){const n=a(t,"indices","gatherND","int32"),r={params:a(e,"x","gatherND","string_or_numeric"),indices:n};return s.runKernel(Q,r)}}),Tm=function(e,n,s=1){return kl(this,null,function*(){const r=a(e,"predictions","inTopK"),o=a(n,"targets","inTopK");t(r.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`),t(r.rank-1===o.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${o.rank}`),$r(r.shape.slice(0,r.shape.length-1),o.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const i=r.shape[r.shape.length-1];t(s>0&&s<=i,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${i}), but got ${s}`);const p=yield r.data(),u=yield o.data(),[l,m]=[p.length/i,i],d=Vr("bool",l);for(let e=0;e<l;e++){const t=e*m,a=p.subarray(t,t+m),n=[];for(let e=0;e<a.length;e++)n.push({value:a[e],index:e});n.sort((e,t)=>t.value-e.value),d[e]=0;for(let r=0;r<s;r++)if(n[r].index===u[e]){d[e]=1;break}}return e!==r&&r.dispose(),n!==o&&o.dispose(),mr(d,o.shape,"bool")})},vm=e({fusedDepthwiseConv2d_:function({x:e,filter:n,strides:r,pad:o,dataFormat:i="NHWC",dilations:u=[1,1],dimRoundingMode:l,bias:m,activation:d="linear",preluActivationWeights:c,leakyreluAlpha:h}){if(!1===X(s.state.gradientDepth,d)){let t=Z(e,n,r,o,i,u,l);return null!=m&&(t=p(t,m)),Y(t,d,c,h)}const f=a(e,"x","depthwiseConv2d","float32"),y=a(n,"filter","depthwiseConv2d","float32");let g=f,N=!1;3===f.rank&&(N=!0,g=b(f,[1,f.shape[0],f.shape[1],f.shape[2]])),t(4===g.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${g.rank}.`),t(4===y.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${y.rank}.`),t(g.shape[3]===y.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${g.shape[3]}) must match the inChannels dimension in filter ${y.shape[2]}.`),null==u&&(u=[1,1]),t(ee(r,u),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${r} and dilations '${u}'`),te("fused depthwiseConv2d",o,l);const w=ae(g.shape,y.shape,r,u,o,l,!0);let x,S;null!=m&&(x=a(m,"bias","fused conv2d"),[x]=ne(x,f),se(w.outShape,x.shape)),null!=c&&(S=a(c,"prelu weights","fused depthwiseConv2d"));const T=(e,a)=>{t(Pr(u),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${u}'`);const[n,s,i,p]=a,m=Lr(e,i,d),c=Fr(s.shape,m,n,r,o,u,l),h=Rr(s,m,n.shape,r,o,u,l);return null!=p?[c,h,Br(x,m)]:[c,h]},v={x:g,filter:y,bias:x,preluActivationWeights:S},O={strides:r,pad:o,dataFormat:i,dilations:u,dimRoundingMode:l,activation:d,leakyreluAlpha:h};return null==m?re((e,t,a)=>{let n=s.runKernel(oe,v,O);return a([t,e,n]),N&&(n=b(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:T}})(g,y):re((e,t,a,n)=>{let r=s.runKernel(oe,v,O);return n([t,e,r,a]),N&&(r=b(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:T}})(g,y,x)}}),Om=Object.freeze(Object.defineProperty({__proto__:null,conv2d:ie,depthwiseConv2d:vm,matMul:pe},Symbol.toStringTag,{value:"Module"}));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _m(e){return new Promise(e=>setTimeout(e)).then(e)}class Em{constructor(e){if(!le().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Em.URL_SCHEME)&&(e=e.slice(Em.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}save(e){return kl(this,null,function*(){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=me.join(e.weightData),a=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const t=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],n=jr(e,t),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),r=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(r.download=this.modelJsonFileName,r.href=s,yield _m(()=>r.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=a,yield _m(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:xe(e)}}})}}Em.URL_SCHEME="downloads://";class Am{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}load(){return kl(this,null,function*(){return new Promise((e,t)=>{const a=new FileReader;a.onload=a=>{const n=JSON.parse(a.target.result),s=n.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==n.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const r=Ne(n,e=>this.loadWeights(e));e(r)},a.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),a.readAsText(this.jsonFile)})})}loadWeights(e){const t=[],a=[];for(const r of e)t.push(...r.weights),a.push(...r.paths);const n=this.checkManifestAndWeightFiles(e),s=a.map(e=>this.loadWeightsFile(e,n[e]));return Promise.all(s).then(e=>[t,e])}loadWeightsFile(e,t){return new Promise((a,n)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;a(t)},s.onerror=t=>n(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){const t=[],a=this.weightsFiles.map(e=>qr(e.name)),n={};for(const s of e)s.paths.forEach(e=>{const s=qr(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===a.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);n[e]=this.weightsFiles[a.indexOf(s)]});if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return n}}ue.registerSaveRouter(e=>le().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Em.URL_SCHEME)?function(e="model"){return new Em(e)}(e.slice(Em.URL_SCHEME.length)):null);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class km{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Mm{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class Cm{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Im(e,t,a,n){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new km(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new km({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new km({modelTopology:e,weightSpecs:t,weightData:a,trainingConfig:n})
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */)}const Dm=Object.freeze(Object.defineProperty({__proto__:null,CompositeArrayBuffer:me,browserFiles:function(e){return new Am(e)},browserHTTPRequest:de,concatenateArrayBuffers:ce,copyModel:he,decodeWeights:fe,decodeWeightsStream:ye,encodeWeights:ge,fromMemory:function(e,t,a,n){return new Cm(Im(...arguments))},fromMemorySync:Im,getLoadHandlers:be,getModelArtifactsForJSON:Ne,getModelArtifactsForJSONSync:we,getModelArtifactsInfoForJSON:xe,getSaveHandlers:Se,getWeightSpecs:Te,http:ve,isHTTPScheme:Oe,listModels:_e,loadWeights:Ee,moveModel:Ae,registerLoadRouter:ke,registerSaveRouter:Me,removeModel:Ce,weightsLoaderFactory:Ie,withSaveHandler:function(e){return new Mm(e)},withSaveHandlerSync:function(e){return new Mm(e)}},Symbol.toStringTag,{value:"Module"})),zm=e({confusionMatrix_:function(e,n,s){const r=a(e,"labels","confusionMatrix"),o=a(n,"predictions","confusionMatrix");t(null==s||s>0&&Number.isInteger(s),()=>`If provided, numClasses must be a positive integer, but got ${s}`),t(1===r.rank,()=>`Expected the rank of labels to be 1, but got ${r.rank}`),t(1===o.rank,()=>`Expected the rank of predictions to be 1, but got ${o.rank}`),t(r.shape[0]===o.shape[0],()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${o.shape[0]}. Labels and predictions should have the same number of elements.`),t(s>0&&Number.isInteger(s),()=>`numClasses is required to be a positive integer, but got ${s}`);const p=De(ze(r,"int32"),s),u=De(ze(o,"int32"),s),l=$e(p),m=i(l,u);return ze(m,"int32")}}),$m=Object.freeze(Object.defineProperty({__proto__:null,confusionMatrix:zm},Symbol.toStringTag,{value:"Module"}));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Vm,Pm=!1;function Lm(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let a=!1,n=!1,r=!1,o=!1,i=!1,p=!1;if(e.data instanceof Uint8Array)a=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)n=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)o=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);p=!0}if(null!=Wr(Hr,s.backendName)){const a={pixels:e},n={numChannels:t};return s.runKernel(Hr,a,n)}const[u,l]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let m,d;if(i)m=e.getContext("2d").getImageData(0,0,u,l).data;else if(n||a)m=e.data;else if(o||r||p){if(null==Vm)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");Vm=new OffscreenCanvas(1,1).getContext("2d")}else Vm=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});Vm.canvas.width=u,Vm.canvas.height=l,Vm.drawImage(e,0,0,u,l),m=Vm.getImageData(0,0,u,l).data}if(4===t)d=new Int32Array(m);else{const e=u*l;d=new Int32Array(e*t);for(let a=0;a<e;a++)for(let e=0;e<t;++e)d[a*t+e]=m[4*a+e]}return mm(d,[l,u,t],"int32")}function Fm(e){if(2!==e.rank&&3!==e.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);const t=2===e.rank?1:e.shape[2];if(t>4||2===t)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`);if("float32"!==e.dtype&&"int32"!==e.dtype)throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`)}const Rm=e({fromPixels_:Lm}),Bm=Object.freeze(Object.defineProperty({__proto__:null,draw:function(e,t,n){let r=a(e,"img","draw");if(!(e instanceof S)){const e=r;r=ze(e,"int32"),e.dispose()}Fm(r),function(e){const t=(null==e?void 0:e.alpha)||1;if(t>1||t<0)throw new Error(`Alpha value ${t} is suppoed to be in range [0 - 1].`)}(null==n?void 0:n.imageOptions);const o={image:r},i={canvas:t,options:n};s.runKernel(Ve,o,i)},fromPixels:Rm,fromPixelsAsync:function(e,t=3){return kl(this,null,function*(){let a=null;if(le().getBool("WRAP_TO_IMAGEBITMAP")&&function(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&null!=(t=e)&&0!==t.width&&0!==t.height&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e);var t}(e)){let t;try{t=yield createImageBitmap(e,{premultiplyAlpha:"none"})}catch(n){t=null}a=null!=t&&t.width===e.width&&t.height===e.height?t:e}else a=e;return Lm(a,t)})},toPixels:function(e,t){return kl(this,null,function*(){let n=a(e,"img","toPixels");if(!(e instanceof S)){const e=n;n=ze(e,"int32"),e.dispose()}Fm(n);const[r,o]=n.shape.slice(0,2),i=2===n.rank?1:n.shape[2],p=yield n.data(),u="float32"===n.dtype?255:1,l=new Uint8ClampedArray(o*r*4);for(let e=0;e<r*o;++e){const t=[0,0,0,255];for(let s=0;s<i;s++){const a=p[e*i+s];if("float32"===n.dtype){if(a<0||a>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===n.dtype&&(a<0||a>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===i?(t[0]=a*u,t[1]=a*u,t[2]=a*u):t[s]=a*u}const a=4*e;l[a+0]=Math.round(t[0]),l[a+1]=Math.round(t[1]),l[a+2]=Math.round(t[2]),l[a+3]=Math.round(t[3])}if(null!=t){Pm||null!=Wr(Ve,s.backendName)&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),Pm=!0),t.width=o,t.height=r;const e=t.getContext("2d"),a=new ImageData(l,o,r);e.putImageData(a,0,0)}return n!==e&&n.dispose(),l})}},Symbol.toStringTag,{value:"Module"})),jm="4.22.0",qm=Object.freeze(Object.defineProperty({__proto__:null,nonMaxSuppressionV3Impl:Pe,nonMaxSuppressionV4Impl:Le,nonMaxSuppressionV5Impl:Fe,whereImpl:Re},Symbol.toStringTag,{value:"Module"})),Wm=Object.freeze(Object.defineProperty({__proto__:null,maxNorm:
/**
   * @license
   * Copyright 2018 Google LLC
   *
   * Use of this source code is governed by an MIT-style
   * license that can be found in the LICENSE file or at
   * https://opensource.org/licenses/MIT.
   * =============================================================================
   */function(e){return new Be(e)},minMaxNorm:function(e){return new je(e)},nonNeg:function(){return new qe},unitNorm:function(e){return new We(e)}},Symbol.toStringTag,{value:"Module"})),Hm=Object.freeze(Object.defineProperty({__proto__:null,constant:function(e){return new He(e)},glorotNormal:function(e){return new Ue(e)},glorotUniform:function(e){return new Ge(e)},heNormal:function(e){return new Ke(e)},heUniform:function(e){return new Je(e)},identity:function(e){return new Qe(e)},leCunNormal:function(e){return new Xe(e)},leCunUniform:function(e){return new Ze(e)},ones:function(){return new Ye},orthogonal:function(e){return new et(e)},randomNormal:function(e){return new tt(e)},randomUniform:function(e){return new at(e)},truncatedNormal:function(e){return new nt(e)},varianceScaling:function(e){return new st(e)},zeros:function(){return new rt}},Symbol.toStringTag,{value:"Module"}));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Um(e){return new ot(e)}function Gm(e){return new it(e)}function Km(e){return pt(e)}function Jm(e,t){ut.registerCallbackConstructor(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */function Qm(e){return new Ur(e)}function Xm(e){return new Gr(e)}function Zm(e){return new Kr(e)}function Ym(e){return new Jr(e)}function ed(e){return new Qr(e)}function td(e){return new Xr(e)}function ad(e){return new Zr(e)}const nd=Ym,sd=ed,rd=td,od=ad,id=Object.freeze(Object.defineProperty({__proto__:null,Layer:lt,RNN:mt,RNNCell:dt,activation:function(e){return new ct(e)},add:function(e){return new ht(e)},alphaDropout:function(e){return new ft(e)},average:function(e){return new yt(e)},averagePooling1d:Qm,averagePooling2d:Xm,averagePooling3d:Zm,avgPool1d:function(e){return Qm(e)},avgPool2d:function(e){return Xm(e)},avgPool3d:function(e){return Zm(e)},avgPooling1d:function(e){return Qm(e)},avgPooling2d:function(e){return Xm(e)},avgPooling3d:function(e){return Zm(e)},batchNormalization:function(e){return new gt(e)},bidirectional:function(e){return new bt(e)},categoryEncoding:function(e){return new Nt(e)},centerCrop:function(e){return new wt(e)},concatenate:function(e){return new xt(e)},conv1d:function(e){return new St(e)},conv2d:function(e){return new Tt(e)},conv2dTranspose:function(e){return new vt(e)},conv3d:function(e){return new Ot(e)},conv3dTranspose:function(e){return new _t(e)},convLstm2d:function(e){return new Et(e)},convLstm2dCell:function(e){return new At(e)},cropping2D:function(e){return new kt(e)},dense:function(e){return new Mt(e)},depthwiseConv2d:function(e){return new Ct(e)},dot:function(e){return new It(e)},dropout:function(e){return new Dt(e)},elu:function(e){return new zt(e)},embedding:function(e){return new $t(e)},flatten:function(e){return new Vt(e)},gaussianDropout:function(e){return new Pt(e)},gaussianNoise:function(e){return new Lt(e)},globalAveragePooling1d:function(e){return new Ft(e)},globalAveragePooling2d:function(e){return new Rt(e)},globalMaxPool1d:nd,globalMaxPool2d:sd,globalMaxPooling1d:Ym,globalMaxPooling2d:ed,gru:function(e){return new Bt(e)},gruCell:function(e){return new jt(e)},input:Km,inputLayer:function(e){return new qt(e)},layerNormalization:function(e){return new Wt(e)},leakyReLU:function(e){return new Ht(e)},lstm:function(e){return new Ut(e)},lstmCell:function(e){return new Gt(e)},masking:function(e){return new Kt(e)},maxPool1d:rd,maxPool2d:od,maxPooling1d:td,maxPooling2d:ad,maxPooling3d:function(e){return new Jt(e)},maximum:function(e){return new Qt(e)},minimum:function(e){return new Xt(e)},multiply:function(e){return new Zt(e)},permute:function(e){return new Yt(e)},prelu:function(e){return new ea(e)},randomWidth:function(e){return new ta(e)},reLU:function(e){return new aa(e)},repeatVector:function(e){return new na(e)},rescaling:function(e){return new sa(e)},reshape:function(e){return new ra(e)},resizing:function(e){return new oa(e)},rnn:function(e){return new mt(e)},separableConv2d:function(e){return new ia(e)},simpleRNN:function(e){return new pa(e)},simpleRNNCell:function(e){return new ua(e)},softmax:function(e){return new la(e)},spatialDropout1d:function(e){return new ma(e)},stackedRNNCells:function(e){return new da(e)},thresholdedReLU:function(e){return new ca(e)},timeDistributed:function(e){return new ha(e)},upSampling2d:function(e){return new fa(e)},zeroPadding2d:function(e){return new ya(e)}},Symbol.toStringTag,{value:"Module"})),pd=Object.freeze(Object.defineProperty({__proto__:null,MAPE:function(e,t){return ga(e,t)},MSE:function(e,t){return ba(e,t)},binaryAccuracy:function(e,t){return Na(e,t)},binaryCrossentropy:function(e,t){return wa(e,t)},categoricalAccuracy:function(e,t){return xa(e,t)},categoricalCrossentropy:function(e,t){return Sa(e,t)},cosineProximity:function(e,t){return Ta(e,t)},mape:function(e,t){return ga(e,t)},meanAbsoluteError:function(e,t){return va(e,t)},meanAbsolutePercentageError:function(e,t){return ga(e,t)},meanSquaredError:function(e,t){return ba(e,t)},mse:function(e,t){return ba(e,t)},precision:function(e,t){return Oa(e,t)},r2Score:function(e,t){return _a(e,t)},recall:function(e,t){return Ea(e,t)},sparseCategoricalAccuracy:function(e,t){return Aa(e,t)}},Symbol.toStringTag,{value:"Module"})),ud=Object.freeze(Object.defineProperty({__proto__:null,modelFromJSON:ka},Symbol.toStringTag,{value:"Module"})),ld=Object.freeze(Object.defineProperty({__proto__:null,l1:function(e){return Ma(e)},l1l2:
/**
   * @license
   * Copyright 2018 Google LLC
   *
   * Use of this source code is governed by an MIT-style
   * license that can be found in the LICENSE file or at
   * https://opensource.org/licenses/MIT.
   * =============================================================================
   */function(e){return new Ca(e)},l2:function(e){return Ia(e)}},Symbol.toStringTag,{value:"Module"}));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class md extends Da{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof ot))throw new Error("model must be a LayersModel, not some other Container");this.model=e}}function dd(e,t){return e<t}function cd(e,t){return e>t}class hd extends md{constructor(e){if(super(),null==e&&(e={}),e.restoreBestWeights)throw new za("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=dd:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=cd:this.monitorFunc=dd,this.monitorFunc===dd&&(this.minDelta*=-1)}onTrainBegin(e){return kl(this,null,function*(){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===dd?1/0:-1/0})}onEpochEnd(e,t){return kl(this,null,function*(){yield Yr(t);const a=this.getMonitorValue(t);null!=a&&(this.monitorFunc(a-this.minDelta,this.best)?(this.best=a,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))})}onTrainEnd(e){return kl(this,null,function*(){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)})}getMonitorValue(e){null==e&&(e={});const t=e[this.monitor];return null==t&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}const fd={earlyStopping:function(e){return new hd(e)}},yd={};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gd(e,t){const a={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};yd[e]=a}function bd(e){return yd[e]}function Nd(e){delete yd[e]}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function wd(e,t,a,n,s){const r=t.inputParams[e];if(r&&void 0!==r.inputIndexStart){const e=r.inputIndexStart,o=0===r.inputIndexEnd?void 0:void 0===r.inputIndexEnd?e+1:r.inputIndexEnd,i=e<0?t.inputNames.length+e:e;if("tensor"===r.type)return xd(t.inputNames[i],a,n,s);if("tensors"===r.type){const r=t.inputs.slice(e,o);return t.inputNames.slice(e,o).filter((e,t)=>{var a;return"NoOp"!==(null===(a=r[t])||void 0===a?void 0:a.op)}).map(e=>xd(e,a,n,s))}const p=xd(t.inputNames[i],a,n,s),u=p.dataSync();return"number"===r.type?u[0]:so(p.shape,u)}const o=t.attrParams[e];return o&&o.value}function xd(e,t,a,n){const[s,r]=Od(e,a);if(null!=n){const e=n.getHashTableHandleByName(s);if(null!=e)return e}const o=a.currentContextIds.find(e=>!!t[vd(s,e)]);return void 0!==o?t[vd(s,o)][r]:void 0}function Sd(e,t,a){return t[vd(e,a.currentContextId)]}function Td(e,t){const[a,n,s]=Od(e,t);return[vd(a,t&&t.currentContextId),n,s]}function vd(e,t){return t?`${e}-${t}`:e}function Od(e,t){if(""===e)return["",0,void 0];const a=null!=t&&null!=t.parseNodeNameCache;if(a){const a=t.parseNodeNameCache.get(e);if(null!=a)return a}const n=e.split(":");let s;if(1===n.length)s=[e,0,void 0];else{const e=n[0],t=3===n.length?n[1]:void 0;s=[e,Number(n[n.length-1]),t]}return a&&t.parseNodeNameCache.set(e,s),s}function _d(e,t,a){let n=wd("pad",e,t,a);if("explicit"===n){n=wd("explicitPaddings",e,t,a);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=n[2*e],s[e][1]=n[2*e+1];return s}return n}function Ed(e){return e.kept?e:rn(e)}
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const Ad=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},Symbol.toStringTag,{value:"Module"})),kd=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},Symbol.toStringTag,{value:"Module"})),Md=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}]},Symbol.toStringTag,{value:"Module"})),Cd=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]},Symbol.toStringTag,{value:"Module"})),Id=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]},Symbol.toStringTag,{value:"Module"})),Dd=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},Symbol.toStringTag,{value:"Module"})),zd=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]},Symbol.toStringTag,{value:"Module"})),$d=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]},Symbol.toStringTag,{value:"Module"})),Vd=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}]},Symbol.toStringTag,{value:"Module"})),Pd=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}]},Symbol.toStringTag,{value:"Module"})),Ld=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}]},Symbol.toStringTag,{value:"Module"})),Fd=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}]},Symbol.toStringTag,{value:"Module"})),Rd=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}]},Symbol.toStringTag,{value:"Module"})),Bd=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]},Symbol.toStringTag,{value:"Module"})),jd=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}]},Symbol.toStringTag,{value:"Module"})),qd=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}]},Symbol.toStringTag,{value:"Module"})),Wd=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]},Symbol.toStringTag,{value:"Module"})),Hd=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}]},Symbol.toStringTag,{value:"Module"})),Ud=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}]},Symbol.toStringTag,{value:"Module"}));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Gd{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[Ad,kd,Md,Cd,Id,Dd,zd,$d,Vd,Pd,Ld,Fd,Rd,Bd,jd,qd,Wd,Hd,Ud].map(e=>e.json));this.opMappers=e.reduce((e,t)=>(e[t.tfOpName]=t,e),{})}transformGraph(e,t={}){const a=e.node,n=[],s=[],r=[],o=a.reduce((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?n.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||r.push(e[t.name]),e),{});let i=[];const p=[];let u={},l={};null!=t&&(u=this.mapSignatureEntries(t.inputs),l=this.mapSignatureEntries(t.outputs));const m=Object.keys(o);m.forEach(e=>{const t=o[e];t.inputNames.forEach((e,a)=>{const[n,,s]=Td(e),r=o[n];if(null!=r.outputs){const e=r.outputs.indexOf(s);if(-1!==e){const s=`${n}:${e}`;t.inputNames[a]=s}}t.inputs.push(r),r.children.push(t)})}),0===Object.keys(l).length?m.forEach(e=>{const t=o[e];0===t.children.length&&p.push(t)}):Object.keys(l).forEach(e=>{const[t]=Td(e),a=o[t];null!=a&&(a.signatureKey=l[e],p.push(a))}),Object.keys(u).length>0?Object.keys(u).forEach(e=>{const[t]=Td(e),a=o[t];a&&(a.signatureKey=u[e],i.push(a))}):i=n;let d={};null!=e.library&&null!=e.library.function&&(d=e.library.function.reduce((e,t)=>(e[t.signature.name]=this.mapFunction(t),e),{}));const c={nodes:o,inputs:i,outputs:p,weights:s,placeholders:n,signature:t,functions:d};return r.length>0&&(c.initNodes=r),c}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,a)=>(t[e[a].name]=a,t),{})}mapNode(e){const t=bd(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const a={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(e=>e.startsWith("^")?e.slice(1):e),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(a.inputParams=t.inputs.reduce((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e),{})),null!=t.attrs&&(a.attrParams=t.attrs.reduce((t,a)=>{const n=a.type;let s;switch(a.type){case"string":s=Jd(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=Jd(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"string[]":s=rc(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=rc(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"number":s=Xd(e.attr,a.tfName,a.defaultValue||0),void 0===s&&a.tfDeprecatedName&&(s=Xd(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"number[]":s=sc(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=sc(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool":s=Qd(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=Qd(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool[]":s=ic(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=ic(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape":s=nc(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=nc(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape[]":s=oc(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=oc(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype":s=ec(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=ec(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype[]":s=tc(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=tc(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"func":s=Yd(e.attr,a.tfName,a.defaultValue),void 0===s&&a.tfDeprecatedName&&(s=Yd(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${a.type} for op: ${e.op}`)}return t[a.name]={value:s,type:n},t},{})),a}mapFunction(e){const t=e.nodeDef,a=[];let n={};null!=t&&(n=t.reduce((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&a.push(e[t.name]),e),{}));const s=[],r=[];e.signature.inputArg.forEach(e=>{const[t]=Td(e.name),a={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Zd(e.type),type:"dtype"}},children:[]};a.signatureKey=e.name,s.push(a),n[t]=a}),Object.keys(n).forEach(e=>{const t=n[e];t.inputNames.forEach((e,a)=>{const[s,,r]=Td(e),o=n[s];if(null!=o.outputs){const e=o.outputs.indexOf(r);if(-1!==e){const n=`${s}:${e}`;t.inputNames[a]=n}}t.inputs.push(o),o.children.push(t)})});const o=e.ret;e.signature.outputArg.forEach(e=>{const[t,a]=Td(o[e.name]),s=n[t];null!=s&&(s.defaultOutput=a,r.push(s))});const i=this.mapArgsToSignature(e);return{nodes:n,inputs:s,outputs:r,weights:a,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e),{}),outputs:e.signature.outputArg.reduce((t,a)=>(t[a.name]=this.mapArgToTensorInfo(a,e.ret),t),{})}}mapArgToTensorInfo(e,t){let a=e.name;return null!=t&&(a=t[a]),{name:a,dtype:e.type}}}function Kd(e,t){const a=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=le().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?a:a.toLowerCase()}function Jd(e,t,a,n=!1){const s=e[t];return null!=s?Kd(s.s,n):a}function Qd(e,t,a){const n=e[t];return n?n.b:a}function Xd(e,t,a){const n=e[t]||{},s=null!=n.i?n.i:null!=n.f?n.f:a;return"number"==typeof s?s:parseInt(s,10)}function Zd(e){switch("string"==typeof e&&(e=eo[e]),e){case eo.DT_FLOAT:case eo.DT_HALF:return"float32";case eo.DT_INT32:case eo.DT_INT64:case eo.DT_INT8:case eo.DT_UINT8:return"int32";case eo.DT_BOOL:return"bool";case eo.DT_DOUBLE:return"float32";case eo.DT_STRING:return"string";case eo.DT_COMPLEX64:case eo.DT_COMPLEX128:return"complex64";default:return null}}function Yd(e,t,a){const n=e[t];return n&&n.func?n.func.name:a}function ec(e,t,a){const n=e[t];return n&&n.type?Zd(n.type):a}function tc(e,t,a){const n=e[t];return n&&n.list&&n.list.type?n.list.type.map(e=>Zd(e)):a}function ac(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(e=>"number"==typeof e.size?e.size:parseInt(e.size,10)):[]}function nc(e,t,a){const n=e[t];return n&&n.shape?ac(n.shape):a}function sc(e,t,a){const n=e[t];return n?((n.list.f&&n.list.f.length?n.list.f:n.list.i)||[]).map(e=>"number"==typeof e?e:parseInt(e,10)):a}function rc(e,t,a,n=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map(e=>Kd(e,n)):a}function oc(e,t,a){const n=e[t];return n&&n.list&&n.list.shape?n.list.shape.map(e=>ac(e)):a}function ic(e,t,a){const n=e[t];return n&&n.list&&n.list.b?n.list.b:a}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class pc{constructor(e,t,a){this.node=e,this.tensorMap=t,this.context=a,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(e=>this.getInput(e)),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((e,t)=>(e[t]=this.getAttr(t),e),{}))}getInput(e){return xd(e,this.tensorMap,this.context)}getAttr(e,t){const a=this.node.rawAttrs[e];if(null!=a.tensor)return xd(e,this.tensorMap,this.context);if(null!=a.i||null!=a.f)return Xd(this.node.rawAttrs,e,t);if(null!=a.s)return Jd(this.node.rawAttrs,e,t);if(null!=a.b)return Qd(this.node.rawAttrs,e,t);if(null!=a.shape)return nc(this.node.rawAttrs,e,t);if(null!=a.type)return ec(this.node.rawAttrs,e,t);if(null!=a.list){if(null!=a.list.i||null!=a.list.f)return sc(this.node.rawAttrs,e,t);if(null!=a.list.s)return rc(this.node.rawAttrs,e,t);if(null!=a.list.shape)return oc(this.node.rawAttrs,e,t);if(null!=a.list.b)return ic(this.node.rawAttrs,e,t);if(null!=a.list.type)return tc(this.node.rawAttrs,e,t)}return t}}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const uc=Object.freeze(Object.defineProperty({__proto__:null,OP_SCOPE_SUFFIX:$a,abs:Va,acos:Pa,acosh:La,add:p,addN:Ml,all:Fa,any:Ra,argMax:Ba,argMin:ja,asin:qa,asinh:Wa,atan:Ha,atan2:Ua,atanh:Ga,avgPool:Ka,avgPool3d:Ja,basicLSTMCell:Cl,batchNorm:Qa,batchNorm2d:Xa,batchNorm3d:Za,batchNorm4d:Ya,batchToSpaceND:en,bincount:tn,bitwiseAnd:Il,booleanMaskAsync:bm,broadcastArgs:Dl,broadcastTo:an,buffer:z,cast:ze,ceil:nn,clipByValue:sn,clone:rn,complex:on,concat:o,concat1d:pn,concat2d:un,concat3d:ln,concat4d:mn,conv1d:dn,conv2d:cn,conv2dTranspose:hn,conv3d:fn,conv3dTranspose:yn,cos:gn,cosh:bn,cosineWindow:Nn,cumprod:wn,cumsum:xn,denseBincount:Sn,depthToSpace:Tn,depthwiseConv2d:Z,diag:zl,dilation2d:vn,div:U,divNoNan:On,dot:_n,dropout:En,einsum:An,elu:kn,enclosingPowerOfTwo:Mn,ensureShape:$l,equal:Cn,erf:In,euclideanNorm:Dn,exp:zn,expandDims:$n,expm1:Vn,eye:Pn,fft:Ln,fill:Fn,floor:Rn,floorDiv:Bn,fused:Om,gather:jn,gatherND:Sm,greater:qn,greaterEqual:Wn,ifft:Hn,imag:Un,image:Gn,inTopKAsync:Tm,irfft:Kn,isFinite:Jn,isInf:Qn,isNaN:Xn,leakyRelu:Zn,less:Yn,lessEqual:es,linalg:ts,linspace:Vl,localResponseNormalization:as,log:ns,log1p:ss,logSigmoid:rs,logSoftmax:os,logSumExp:is,logicalAnd:ps,logicalNot:us,logicalOr:ls,logicalXor:ms,losses:ds,lowerBound:Fl,matMul:i,max:cs,maxPool:hs,maxPool3d:fs,maxPoolWithArgmax:Rl,maximum:ys,mean:gs,meshgrid:Bl,min:bs,minimum:Ns,mirrorPad:ws,mod:xs,moments:Ss,movingAverage:Nm,mul:l,multiRNNCell:jl,multinomial:ql,neg:Ts,norm:vs,notEqual:Os,oneHot:De,ones:T,onesLike:_s,op:e,outerProduct:Wl,pad:_,pad1d:Hl,pad2d:Ul,pad3d:Gl,pad4d:Kl,pool:Es,pow:G,prelu:As,print:ks,prod:Ms,raggedGather:Jl,raggedRange:Ql,raggedTensorToTensor:Xl,rand:Zl,randomGamma:nm,randomNormal:$,randomStandardNormal:sm,randomUniform:V,randomUniformInt:rm,range:Cs,real:Is,reciprocal:Ds,relu:zs,relu6:$s,reshape:b,reverse:P,reverse1d:om,reverse2d:im,reverse3d:pm,reverse4d:um,rfft:Vs,round:Ps,rsqrt:Ls,scalar:W,scatterND:wm,searchSorted:Ll,selu:Fs,separableConv2d:Rs,setdiff1dAsync:lm,sigmoid:m,sign:Bs,signal:js,sin:qs,sinh:Ws,slice:u,slice1d:Hs,slice2d:Us,slice3d:Gs,slice4d:Ks,softmax:Js,softplus:Qs,spaceToBatchND:Xs,sparse:Zs,sparseToDense:xm,spectral:Ys,split:er,sqrt:tr,square:ar,squaredDifference:nr,squeeze:sr,stack:rr,step:or,stridedSlice:ir,string:pr,sub:H,sum:ur,tan:lr,tanh:d,tensor:mr,tensor1d:dr,tensor2d:cr,tensor3d:mm,tensor4d:dm,tensor5d:cm,tensor6d:hm,tensorScatterUpdate:fm,tile:hr,topk:fr,transpose:$e,truncatedNormal:yr,unique:gr,unsortedSegmentSum:br,unstack:Nr,upperBound:ym,variable:wr,where:xr,whereAsync:gm,zeros:Sr,zerosLike:Tr},Symbol.toStringTag,{value:"Module"}));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function lc(e,a,n=""){if("number"!=typeof e&&"number"!=typeof a){t(e.length===a.length,()=>n+` Shapes ${e} and ${a} must match`);for(let s=0;s<e.length;s++){const r=e[s],o=a[s];t(r<0||o<0||r===o,()=>n+` Shapes ${e} and ${a} must match`)}}}function mc(e){return"number"!=typeof e&&!e.some(e=>e<0)}function dc(e,t,a){let n=cc(e,a);const s=!mc(n);if(s&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${n}`);if(s&&t.forEach(e=>{n=cc(e.shape,n)}),!mc(n))throw new Error(`Non-fully-defined elementShape: ${n}`);return n}function cc(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const a=[];for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(s>=0&&r>=0&&s!==r)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);a[n]=s>=0?s:r}return a}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class hc{constructor(e,t,a,n,s,r,o){this.name=e,this.dtype=t,this.maxSize=a,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=r,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=W(0),to(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(e=>this.read(e))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const a=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),lc(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),a.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(a.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);a.tensor=t,to(t),a.written=!0,this.tensors[e]=a}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((e,a)=>this.write(e,t[a]))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return mr([],[0].concat(this.elementShape));const a=this.readMany(e);return lc(this.elementShape,a[0].shape,"TensorArray shape mismatch: "),rr(a,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return mr([],[0].concat(this.elementShape));const t=[];for(let n=0;n<this.size();n++)t.push(n);const a=this.readMany(t);return lc(this.elementShape,a[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${a[0].shape})`),o(a,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const a=Math.max(...e);if(!this.dynamicSize&&a>=this.maxSize)throw new Error(`Max index must be < array size (${a}  vs. ${this.maxSize})`);this.writeMany(e,Nr(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let a=0;const n=e.map(e=>(a+=e,a));if(a!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${a}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===a?0:t.size/a,r=[];ao(()=>{t=b(t,[1,a,s]);for(let a=0;a<e.length;++a){const o=[0,0===a?0:n[a-1],0],i=[1,e[a],s];r[a]=b(u(t,o,i),this.elementShape)}return r});const o=[];for(let i=0;i<e.length;i++)o[i]=i;this.writeMany(o,r)}}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class fc{get id(){return this.idTensor.id}constructor(e,t,a,n=-1){this.tensors=e,this.elementShape=t,this.elementDtype=a,null!=e&&e.forEach(e=>{if(a!==e.dtype)throw new Error(`Invalid data types; op elements ${a}, but list elements ${e.dtype}`);lc(t,e.shape,"TensorList shape mismatch: "),to(e)}),this.idTensor=W(0),this.maxNumElements=n,to(this.idTensor)}copy(){return new fc([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.id)||t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,a=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==a&&this.tensors.length!==a)throw new Error(`Operation expected a list with ${a} elements but got a list with ${this.tensors.length} elements.`);lc(e,this.elementShape,"TensorList shape mismatch: ");const n=dc(this.elementShape,this.tensors,e);return ao(()=>{const e=this.tensors.map(e=>b(e,n));return rr(e,0)})}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const a=dc(this.elementShape,this.tensors,e),n=this.tensors.pop();return n.kept=!1,lc(n.shape,e,"TensorList shape mismatch: "),b(n,a)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(lc(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");to(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new fc([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let a=0;a<Math.min(this.tensors.length,e);++a)t.tensors[a]=this.tensors[a];return t}getItem(e,t,a){if(a!==this.elementDtype)throw new Error(`Invalid data types; op elements ${a}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);lc(this.tensors[e].shape,t,"TensorList shape mismatch: ");const n=dc(this.elementShape,this.tensors,t);return b(this.tensors[e],n)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);lc(this.elementShape,t.shape,"TensorList shape mismatch: "),to(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,a){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);lc(this.elementShape,a,"TensorList shape mismatch: "),e=e.slice(0,this.size());const n=dc(this.elementShape,this.tensors,a);return 0===e.length?mr([],[0].concat(n)):ao(()=>{const t=e.map(e=>b(this.tensors[e],n));return rr(t,0)})}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);lc(this.elementShape,t,"TensorList shape mismatch: ");const a=dc(this.elementShape,this.tensors,t);return 0===this.size()?mr([],[0].concat(a)):ao(()=>{const e=this.tensors.map(e=>b(e,a));return o(e,0)})}}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yc(e,t,a){const[n,s]=wd("fusedOps",e,t,a),r="biasadd"===n,o=!r,i="prelu"===s,p="fusedbatchnorm"===n,u=wd("numArgs",e,t,a);if(r){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&r&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(p)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const l=wd("strides",e,t,a),m=_d(e,t,a),d=wd("dataFormat",e,t,a).toUpperCase(),c=wd("dilations",e,t,a);let[h,f]=wd("args",e,t,a);return o&&(f=h,h=void 0),{stride:l,pad:m,dataFormat:d,dilations:c,biasArg:h,preluArg:f,activationFunc:s,leakyreluAlpha:wd("leakyreluAlpha",e,t,a)}}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function gc(e,t,a){return{boxes:wd("boxes",e,t,a),scores:wd("scores",e,t,a),maxOutputSize:wd("maxOutputSize",e,t,a),iouThreshold:wd("iouThreshold",e,t,a),scoreThreshold:wd("scoreThreshold",e,t,a),softNmsSigma:wd("softNmsSigma",e,t,a)}}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class bc{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=W(0),this.tensorMap=new Map,to(this.handle)}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return W(this.size(),"int32")}import(e,a){return kl(this,null,function*(){this.checkKeyAndValueTensor(e,a);const n=yield e.data();return this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),ao(()=>{const e=Nr(a),s=n.length,r=e.length;t(s===r,()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`);for(let t=0;t<s;t++){const a=n[t],s=e[t];to(s),this.tensorMap.set(a,s)}return this.handle})})}find(e,t){return kl(this,null,function*(){this.checkKeyAndValueTensor(e,t);const a=yield e.data();return ao(()=>{const e=[];for(let n=0;n<a.length;n++){const s=a[n],r=this.findWithDefault(s,t);e.push(r)}return rr(e)})})}findWithDefault(e,t){const a=this.tensorMap.get(e);return null!=a?a:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function Nc(e,t,a,s,r=ao){const o=((e,t,a)=>{switch(e.category){case"arithmetic":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[n.add(wd("a",e,t,a),wd("b",e,t,a))];case"AddN":return[n.addN(wd("tensors",e,t,a))];case"FloorMod":case"Mod":return[n.mod(wd("a",e,t,a),wd("b",e,t,a))];case"Mul":return[n.mul(wd("a",e,t,a),wd("b",e,t,a))];case"RealDiv":case"Div":return[n.div(wd("a",e,t,a),wd("b",e,t,a))];case"DivNoNan":return[n.divNoNan(wd("a",e,t,a),wd("b",e,t,a))];case"FloorDiv":return[n.floorDiv(wd("a",e,t,a),wd("b",e,t,a))];case"Sub":return[n.sub(wd("a",e,t,a),wd("b",e,t,a))];case"Minimum":return[n.minimum(wd("a",e,t,a),wd("b",e,t,a))];case"Maximum":return[n.maximum(wd("a",e,t,a),wd("b",e,t,a))];case"Pow":return[n.pow(wd("a",e,t,a),wd("b",e,t,a))];case"SquaredDifference":return[n.squaredDifference(wd("a",e,t,a),wd("b",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"basic_math":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"Abs":case"ComplexAbs":return[n.abs(wd("x",e,t,a))];case"Acos":return[n.acos(wd("x",e,t,a))];case"Acosh":return[n.acosh(wd("x",e,t,a))];case"Asin":return[n.asin(wd("x",e,t,a))];case"Asinh":return[n.asinh(wd("x",e,t,a))];case"Atan":return[n.atan(wd("x",e,t,a))];case"Atan2":return[n.atan2(wd("x",e,t,a),wd("y",e,t,a))];case"Atanh":return[n.atanh(wd("x",e,t,a))];case"Ceil":return[n.ceil(wd("x",e,t,a))];case"Complex":return[n.complex(wd("real",e,t,a),wd("imag",e,t,a))];case"Cos":return[n.cos(wd("x",e,t,a))];case"Cosh":return[n.cosh(wd("x",e,t,a))];case"Elu":return[n.elu(wd("x",e,t,a))];case"Erf":return[n.erf(wd("x",e,t,a))];case"Exp":return[n.exp(wd("x",e,t,a))];case"Expm1":return[n.expm1(wd("x",e,t,a))];case"Floor":return[n.floor(wd("x",e,t,a))];case"Log":return[n.log(wd("x",e,t,a))];case"Log1p":return[n.log1p(wd("x",e,t,a))];case"Imag":return[n.imag(wd("x",e,t,a))];case"Neg":return[n.neg(wd("x",e,t,a))];case"Reciprocal":return[n.reciprocal(wd("x",e,t,a))];case"Real":return[n.real(wd("x",e,t,a))];case"Relu":return[n.relu(wd("x",e,t,a))];case"Round":return[n.round(wd("x",e,t,a))];case"Selu":return[n.selu(wd("x",e,t,a))];case"Sigmoid":return[n.sigmoid(wd("x",e,t,a))];case"Sin":return[n.sin(wd("x",e,t,a))];case"Sign":return[n.sign(wd("x",e,t,a))];case"Sinh":return[n.sinh(wd("x",e,t,a))];case"Softplus":return[n.softplus(wd("x",e,t,a))];case"Sqrt":return[n.sqrt(wd("x",e,t,a))];case"Square":return[n.square(wd("x",e,t,a))];case"Tanh":return[n.tanh(wd("x",e,t,a))];case"Tan":return[n.tan(wd("x",e,t,a))];case"ClipByValue":return[n.clipByValue(wd("x",e,t,a),wd("clipValueMin",e,t,a),wd("clipValueMax",e,t,a))];case"Relu6":return[n.relu6(wd("x",e,t,a))];case"Rsqrt":return[n.rsqrt(xd(e.inputNames[0],t,a))];case"LeakyRelu":return[n.leakyRelu(wd("x",e,t,a),wd("alpha",e,t,a))];case"Prelu":return[n.prelu(wd("x",e,t,a),wd("alpha",e,t,a))];case"IsNan":return[n.isNaN(xd(e.inputNames[0],t,a))];case"IsInf":return[n.isInf(xd(e.inputNames[0],t,a))];case"IsFinite":return[n.isFinite(xd(e.inputNames[0],t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"control":return((e,t,a)=>kl(void 0,null,function*(){switch(e.op){case"If":case"StatelessIf":{const n=wd("thenBranch",e,t,a),s=wd("elseBranch",e,t,a),r=wd("cond",e,t,a),o=wd("args",e,t,a);return(yield r.data())[0]?a.functionMap[n].executeFunctionAsync(o,a.tensorArrayMap,a.tensorListMap):a.functionMap[s].executeFunctionAsync(o,a.tensorArrayMap,a.tensorListMap)}case"While":case"StatelessWhile":{const n=wd("body",e,t,a),s=wd("cond",e,t,a),r=wd("args",e,t,a),o=yield a.functionMap[s].executeFunctionAsync(r,a.tensorArrayMap,a.tensorListMap),i=r.map(e=>e.id);let p=yield o[0].data();o.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()});let u=r;for(;p[0];){const e=u;u=yield a.functionMap[n].executeFunctionAsync(u,a.tensorArrayMap,a.tensorListMap);const t=u.map(e=>e.id);e.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()});const r=yield a.functionMap[s].executeFunctionAsync(u,a.tensorArrayMap,a.tensorListMap);p=yield r[0].data(),r.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()})}return u}case"LoopCond":return[Ed(wd("pred",e,t,a))];case"Switch":{const n=wd("pred",e,t,a);let s=wd("data",e,t,a);return s.kept||(s=Ed(s)),(yield n.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const n=e.inputNames.find(e=>void 0!==xd(e,t,a));return n?[Ed(xd(n,t,a))]:void 0}case"Enter":{const n=wd("frameName",e,t,a),s=wd("tensor",e,t,a);return a.enterFrame(n),[Ed(s)]}case"Exit":{const n=wd("tensor",e,t,a);return a.exitFrame(),[Ed(n)]}case"NextIteration":{const n=wd("tensor",e,t,a);return a.nextIteration(),[Ed(n)]}case"TensorArrayV3":{const n=wd("size",e,t,a),s=wd("dtype",e,t,a),r=wd("elementShape",e,t,a),o=wd("dynamicSize",e,t,a),i=wd("clearAfterRead",e,t,a),p=wd("identicalElementShapes",e,t,a),u=wd("name",e,t,a),l=new hc(u,s,n,r,p,o,i);return a.addTensorArray(l),[l.idTensor,W(1)]}case"TensorArrayWriteV3":{const n=wd("tensorArrayId",e,t,a),s=wd("index",e,t,a),r=wd("tensor",e,t,a),o=a.getTensorArray(n.id);return o.write(s,r),[o.idTensor]}case"TensorArrayReadV3":{const n=wd("tensorArrayId",e,t,a),s=wd("index",e,t,a);return[a.getTensorArray(n.id).read(s)]}case"TensorArrayGatherV3":{const n=wd("tensorArrayId",e,t,a),s=wd("indices",e,t,a),r=wd("dtype",e,t,a);return[a.getTensorArray(n.id).gather(s,r)]}case"TensorArrayScatterV3":{const n=wd("tensorArrayId",e,t,a),s=wd("indices",e,t,a),r=wd("tensor",e,t,a),o=a.getTensorArray(n.id);return o.scatter(s,r),[o.idTensor]}case"TensorArrayConcatV3":{const n=wd("tensorArrayId",e,t,a),s=a.getTensorArray(n.id),r=wd("dtype",e,t,a);return[s.concat(r)]}case"TensorArraySplitV3":{const n=wd("tensorArrayId",e,t,a),s=wd("tensor",e,t,a),r=wd("lengths",e,t,a),o=a.getTensorArray(n.id);return o.split(r,s),[o.idTensor]}case"TensorArraySizeV3":{const n=wd("tensorArrayId",e,t,a),s=a.getTensorArray(n.id);return[W(s.size(),"int32")]}case"TensorArrayCloseV3":{const n=wd("tensorArrayId",e,t,a),s=a.getTensorArray(n.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const n=wd("tensorListId",e,t,a),s=wd("index",e,t,a),r=wd("tensor",e,t,a),o=a.getTensorList(n.id);return o.setItem(s,r),[o.idTensor]}case"TensorListGetItem":{const n=wd("tensorListId",e,t,a),s=wd("index",e,t,a),r=wd("elementShape",e,t,a),o=wd("elementDType",e,t,a);return[a.getTensorList(n.id).getItem(s,r,o)]}case"TensorListScatterV2":case"TensorListScatter":{const n=wd("indices",e,t,a),s=function(e,t,a,n){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=n&&-1!==n&&s>=n)throw new Error(`Max index must be < array size (${s}  vs. ${n})`);const r=new fc([],a,e.dtype,n),o=Nr(e,0);return t.forEach((e,t)=>{r.setItem(e,o[t])}),r}(wd("tensor",e,t,a),n,wd("elementShape",e,t,a),wd("numElements",e,t,a));return a.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const o=wd("elementShape",e,t,a),i=wd("elementDType",e,t,a);let p;p="TensorListReserve"===e.op?"numElements":"maxNumElements";const u=wd(p,e,t,a),l=(n=o,s=i,r="TensorListReserve"===e.op?-1:u,new fc([],n,s,r));return a.addTensorList(l),[l.idTensor]}case"TensorListGather":{const n=wd("tensorListId",e,t,a),s=wd("indices",e,t,a),r=wd("elementShape",e,t,a),o=wd("elementDType",e,t,a);return[a.getTensorList(n.id).gather(s,o,r)]}case"TensorListStack":{const n=wd("tensorListId",e,t,a),s=wd("elementShape",e,t,a),r=wd("elementDType",e,t,a),o=wd("numElements",e,t,a);return[a.getTensorList(n.id).stack(s,r,o)]}case"TensorListFromTensor":{const n=function(e,t,a){const n=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==a)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${a}`);lc(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=Nr(e);return new fc(s,t,n)}(wd("tensor",e,t,a),wd("elementShape",e,t,a),wd("elementDType",e,t,a));return a.addTensorList(n),[n.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const n=wd("tensorListId",e,t,a),s=a.getTensorList(n.id),r=wd("dtype",e,t,a),o=wd("elementShape",e,t,a);return[s.concat(r,o)]}case"TensorListPushBack":{const n=wd("tensorListId",e,t,a),s=wd("tensor",e,t,a),r=a.getTensorList(n.id);return r.pushBack(s),[r.idTensor]}case"TensorListPopBack":{const n=wd("tensorListId",e,t,a),s=wd("elementShape",e,t,a),r=wd("elementDType",e,t,a);return[a.getTensorList(n.id).popBack(s,r)]}case"TensorListSplit":{const n=wd("tensor",e,t,a),s=wd("elementShape",e,t,a),r=function(e,t,a){let n=0;const s=t.map(e=>(n+=e,n));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);const r=cc(e.shape.slice(1),a),o=0===n?0:e.size/n,i=ao(()=>{const a=[];e=b(e,[1,n,o]);for(let n=0;n<t.length;++n){const i=[0,0===n?0:s[n-1],0],p=[1,t[n],o];a[n]=b(u(e,i,p),r)}return e.dispose(),a}),p=new fc([],a,e.dtype,t.length);for(let u=0;u<i.length;u++)p.setItem(u,i[u]);return p}(n,wd("lengths",e,t,a),s);return a.addTensorList(r),[r.idTensor]}case"TensorListLength":{const n=wd("tensorListId",e,t,a),s=a.getTensorList(n.id);return[W(s.size(),"int32")]}case"TensorListResize":{const n=wd("tensorListId",e,t,a),s=wd("size",e,t,a),r=a.getTensorList(n.id).resize(s);return a.addTensorList(r),[r.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}var n,s,r}))(e,t,a);case"convolution":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"Conv1D":{const s=wd("stride",e,t,a),r=wd("pad",e,t,a),o=wd("dataFormat",e,t,a).toUpperCase(),i=wd("dilation",e,t,a);return[n.conv1d(wd("x",e,t,a),wd("filter",e,t,a),s,r,o,i)]}case"Conv2D":{const s=wd("strides",e,t,a),r=_d(e,t,a),o=wd("dataFormat",e,t,a).toUpperCase(),i=wd("dilations",e,t,a);return[n.conv2d(wd("x",e,t,a),wd("filter",e,t,a),[s[1],s[2]],r,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:o,dilations:i,biasArg:p,preluArg:u,activationFunc:l,leakyreluAlpha:m}=yc(e,t,a);return[n.fused.conv2d({x:wd("x",e,t,a),filter:wd("filter",e,t,a),strides:[s[1],s[2]],pad:r,dataFormat:o,dilations:[i[1],i[2]],bias:p,activation:l,preluActivationWeights:u,leakyreluAlpha:m})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:o,dilations:i,biasArg:p,preluArg:u,activationFunc:l,leakyreluAlpha:m}=yc(e,t,a);return[n.fused.depthwiseConv2d({x:wd("x",e,t,a),filter:wd("filter",e,t,a),strides:[s[1],s[2]],pad:r,dataFormat:o,dilations:[i[1],i[2]],bias:p,activation:l,preluActivationWeights:u,leakyreluAlpha:m})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=wd("outputShape",e,t,a),r=wd("strides",e,t,a),o=_d(e,t,a);return[n.conv2dTranspose(wd("x",e,t,a),wd("filter",e,t,a),s,[r[1],r[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=wd("strides",e,t,a),r=_d(e,t,a),o=wd("dilations",e,t,a),i=wd("dataFormat",e,t,a).toUpperCase();return[n.depthwiseConv2d(wd("input",e,t,a),wd("filter",e,t,a),[s[1],s[2]],r,i,[o[1],o[2]])]}case"Conv3D":{const s=wd("strides",e,t,a),r=wd("pad",e,t,a),o=wd("dataFormat",e,t,a).toUpperCase(),i=wd("dilations",e,t,a);return[n.conv3d(wd("x",e,t,a),wd("filter",e,t,a),[s[1],s[2],s[3]],r,o,[i[1],i[2],i[3]])]}case"AvgPool":{const s=wd("strides",e,t,a),r=wd("pad",e,t,a),o=wd("kernelSize",e,t,a);return[n.avgPool(wd("x",e,t,a),[o[1],o[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=wd("strides",e,t,a),r=wd("pad",e,t,a),o=wd("kernelSize",e,t,a);return[n.maxPool(wd("x",e,t,a),[o[1],o[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=wd("strides",e,t,a),r=wd("pad",e,t,a),o=wd("kernelSize",e,t,a),i=wd("includeBatchInIndex",e,t,a),{result:p,indexes:u}=n.maxPoolWithArgmax(wd("x",e,t,a),[o[1],o[2]],[s[1],s[2]],r,i);return[p,u]}case"AvgPool3D":{const s=wd("strides",e,t,a),r=wd("pad",e,t,a),o=wd("kernelSize",e,t,a);return[n.avgPool3d(wd("x",e,t,a),[o[1],o[2],o[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=wd("strides",e,t,a),r=wd("pad",e,t,a),o=wd("kernelSize",e,t,a);return[n.maxPool3d(wd("x",e,t,a),[o[1],o[2],o[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=wd("strides",e,t,a),r=wd("pad",e,t,a),o=wd("dilations",e,t,a),i=s[1],p=s[2],u=o[1],l=o[2];return[n.dilation2d(wd("x",e,t,a),wd("filter",e,t,a),[i,p],r,[u,l],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"creation":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"Fill":{const s=wd("shape",e,t,a),r=wd("dtype",e,t,a),o=wd("value",e,t,a);return[n.fill(s,o,r)]}case"LinSpace":{const s=wd("start",e,t,a),r=wd("stop",e,t,a),o=wd("num",e,t,a);return[n.linspace(s,r,o)]}case"Multinomial":{const s=wd("logits",e,t,a),r=wd("numSamples",e,t,a),o=wd("seed",e,t,a);return[n.multinomial(s,r,o)]}case"OneHot":{const s=wd("indices",e,t,a),r=wd("depth",e,t,a),o=wd("onValue",e,t,a),i=wd("offValue",e,t,a),p=wd("dtype",e,t,a);return[n.oneHot(s,r,o,i,p)]}case"Ones":return[n.ones(wd("shape",e,t,a),wd("dtype",e,t,a))];case"OnesLike":return[n.onesLike(wd("x",e,t,a))];case"RandomStandardNormal":return[n.randomStandardNormal(wd("shape",e,t,a),wd("dtype",e,t,a),wd("seed",e,t,a))];case"RandomUniform":return[n.randomUniform(wd("shape",e,t,a),wd("minval",e,t,a),wd("maxval",e,t,a),wd("dtype",e,t,a))];case"RandomUniformInt":return[n.randomUniformInt(wd("shape",e,t,a),wd("minval",e,t,a),wd("maxval",e,t,a),wd("seed",e,t,a))];case"Range":{const s=wd("start",e,t,a),r=wd("stop",e,t,a),o=wd("step",e,t,a);return[n.range(s,r,o,wd("dtype",e,t,a))]}case"TruncatedNormal":{const s=wd("shape",e,t,a),r=wd("mean",e,t,a),o=wd("stdDev",e,t,a),i=wd("seed",e,t,a);return[n.truncatedNormal(s,r,o,wd("dtype",e,t,a),i)]}case"Zeros":return[n.zeros(wd("shape",e,t,a),wd("dtype",e,t,a))];case"ZerosLike":return[n.zerosLike(wd("x",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"dynamic":return kl(void 0,[e,t,a,void 0],function*(e,t,a,n,s=uc){switch(e.op){case"NonMaxSuppressionV5":{const{boxes:n,scores:r,maxOutputSize:o,iouThreshold:i,scoreThreshold:p,softNmsSigma:u}=gc(e,t,a),l=yield s.image.nonMaxSuppressionWithScoreAsync(n,r,o,i,p,u);return[l.selectedIndices,l.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:n,scores:r,maxOutputSize:o,iouThreshold:i,scoreThreshold:p}=gc(e,t,a),u=wd("padToMaxOutputSize",e,t,a),l=yield s.image.nonMaxSuppressionPaddedAsync(n,r,o,i,p,u);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:n,scores:r,maxOutputSize:o,iouThreshold:i,scoreThreshold:p}=gc(e,t,a);return[yield s.image.nonMaxSuppressionAsync(n,r,o,i,p)]}case"Where":{const n=s.cast(wd("condition",e,t,a),"bool"),r=[yield s.whereAsync(n)];return n.dispose(),r}case"ListDiff":return s.setdiff1dAsync(wd("x",e,t,a),wd("y",e,t,a));default:throw TypeError(`Node type ${e.op} is not implemented`)}});case"evaluation":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"LowerBound":{const s=wd("sortedSequence",e,t,a),r=wd("values",e,t,a);return[n.lowerBound(s,r)]}case"TopKV2":{const s=wd("x",e,t,a),r=wd("k",e,t,a),o=wd("sorted",e,t,a),i=n.topk(s,r,o);return[i.values,i.indices]}case"UpperBound":{const s=wd("sortedSequence",e,t,a),r=wd("values",e,t,a);return[n.upperBound(s,r)]}case"Unique":{const s=wd("x",e,t,a),r=n.unique(s);return[r.values,r.indices]}case"UniqueV2":{const s=wd("x",e,t,a),r=wd("axis",e,t,a),o=n.unique(s,r);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"image":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"ResizeBilinear":{const s=wd("images",e,t,a),r=wd("size",e,t,a),o=wd("alignCorners",e,t,a),i=wd("halfPixelCenters",e,t,a);return[n.image.resizeBilinear(s,[r[0],r[1]],o,i)]}case"ResizeNearestNeighbor":{const s=wd("images",e,t,a),r=wd("size",e,t,a),o=wd("alignCorners",e,t,a),i=wd("halfPixelCenters",e,t,a);return[n.image.resizeNearestNeighbor(s,[r[0],r[1]],o,i)]}case"CropAndResize":{const s=wd("image",e,t,a),r=wd("boxes",e,t,a),o=wd("boxInd",e,t,a),i=wd("cropSize",e,t,a),p=wd("method",e,t,a),u=wd("extrapolationValue",e,t,a);return[n.image.cropAndResize(s,r,o,i,p,u)]}case"ImageProjectiveTransformV3":{const s=wd("images",e,t,a),r=wd("transforms",e,t,a),o=wd("outputShape",e,t,a),i=wd("fillValue",e,t,a),p=wd("interpolation",e,t,a),u=wd("fillMode",e,t,a);return[n.image.transform(s,r,p.toLowerCase(),u.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"graph":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=wd("default",e,t,a);return[xd(e.name,t,a)||s];case"Placeholder":return[xd(e.name,t,a)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[Ed(wd("x",e,t,a))];case"IdentityN":return wd("x",e,t,a).map(e=>Ed(e));case"Shape":return[n.tensor1d(wd("x",e,t,a).shape,"int32")];case"ShapeN":return wd("x",e,t,a).map(e=>n.tensor1d(e.shape));case"Size":return[n.scalar(wd("x",e,t,a).size,"int32")];case"Rank":return[n.scalar(wd("x",e,t,a).rank,"int32")];case"NoOp":return[n.scalar(1)];case"Print":const r=wd("x",e,t,a),o=wd("data",e,t,a),i=wd("message",e,t,a),p=wd("summarize",e,t,a);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,p));return[r];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"logical":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"Equal":return[n.equal(wd("a",e,t,a),wd("b",e,t,a))];case"NotEqual":return[n.notEqual(wd("a",e,t,a),wd("b",e,t,a))];case"Greater":return[n.greater(wd("a",e,t,a),wd("b",e,t,a))];case"GreaterEqual":return[n.greaterEqual(wd("a",e,t,a),wd("b",e,t,a))];case"Less":return[n.less(wd("a",e,t,a),wd("b",e,t,a))];case"LessEqual":return[n.lessEqual(wd("a",e,t,a),wd("b",e,t,a))];case"LogicalAnd":return[n.logicalAnd(wd("a",e,t,a),wd("b",e,t,a))];case"LogicalNot":return[n.logicalNot(wd("a",e,t,a))];case"LogicalOr":return[n.logicalOr(wd("a",e,t,a),wd("b",e,t,a))];case"Select":case"SelectV2":return[n.where(wd("condition",e,t,a),wd("a",e,t,a),wd("b",e,t,a))];case"BitwiseAnd":return[n.bitwiseAnd(wd("a",e,t,a),wd("b",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"matrices":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[n.matMul(wd("a",e,t,a),wd("b",e,t,a),wd("transposeA",e,t,a),wd("transposeB",e,t,a))];case"Einsum":return[n.einsum(wd("equation",e,t,a),...wd("tensors",e,t,a))];case"Transpose":return[n.transpose(wd("x",e,t,a),wd("perm",e,t,a))];case"_FusedMatMul":const[s,r]=wd("fusedOps",e,t,a),o="biasadd"===s,i="prelu"===r,p=wd("numArgs",e,t,a),u=wd("leakyreluAlpha",e,t,a);if(o){if(i&&2!==p)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==p)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,m]=wd("args",e,t,a);return[n.fused.matMul({a:wd("a",e,t,a),b:wd("b",e,t,a),transposeA:wd("transposeA",e,t,a),transposeB:wd("transposeB",e,t,a),bias:l,activation:r,preluActivationWeights:m,leakyreluAlpha:u})];case"MatrixBandPart":return[n.linalg.bandPart(wd("a",e,t,a),wd("numLower",e,t,a),wd("numUpper",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"normalization":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"EuclideanNorm":return[n.euclideanNorm(wd("x",e,t,a),wd("axis",e,t,a),wd("keepDims",e,t,a))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[n.batchNorm(wd("x",e,t,a),wd("mean",e,t,a),wd("variance",e,t,a),wd("offset",e,t,a),wd("scale",e,t,a),wd("epsilon",e,t,a))];case"LRN":return[n.localResponseNormalization(wd("x",e,t,a),wd("radius",e,t,a),wd("bias",e,t,a),wd("alpha",e,t,a),wd("beta",e,t,a))];case"Softmax":return[n.softmax(wd("x",e,t,a))];case"LogSoftmax":return[n.logSoftmax(wd("x",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"ragged":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"RaggedGather":{const{outputNestedSplits:s,outputDenseValues:r}=n.raggedGather(wd("paramsNestedSplits",e,t,a),wd("paramsDenseValues",e,t,a),wd("indices",e,t,a),wd("outputRaggedRank",e,t,a));return s.concat(r)}case"RaggedRange":{const{rtNestedSplits:s,rtDenseValues:r}=n.raggedRange(wd("starts",e,t,a),wd("limits",e,t,a),wd("splits",e,t,a));return[s,r]}case"RaggedTensorToTensor":return[n.raggedTensorToTensor(wd("shape",e,t,a),wd("values",e,t,a),wd("defaultValue",e,t,a),wd("rowPartitionTensors",e,t,a),wd("rowPartitionTypes",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"reduction":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"Max":{const s=wd("axis",e,t,a),r=wd("keepDims",e,t,a);return[n.max(wd("x",e,t,a),s,r)]}case"Mean":{const s=wd("axis",e,t,a),r=wd("keepDims",e,t,a);return[n.mean(wd("x",e,t,a),s,r)]}case"Min":{const s=wd("axis",e,t,a),r=wd("keepDims",e,t,a);return[n.min(wd("x",e,t,a),s,r)]}case"Sum":{const s=wd("axis",e,t,a),r=wd("keepDims",e,t,a);return[n.sum(wd("x",e,t,a),s,r)]}case"All":{const s=wd("axis",e,t,a),r=wd("keepDims",e,t,a);return[n.all(wd("x",e,t,a),s,r)]}case"Any":{const s=wd("axis",e,t,a),r=wd("keepDims",e,t,a);return[n.any(wd("x",e,t,a),s,r)]}case"ArgMax":{const s=wd("axis",e,t,a);return[n.argMax(wd("x",e,t,a),s)]}case"ArgMin":{const s=wd("axis",e,t,a);return[n.argMin(wd("x",e,t,a),s)]}case"Prod":{const s=wd("axis",e,t,a),r=wd("keepDims",e,t,a);return[n.prod(wd("x",e,t,a),s,r)]}case"Cumprod":{const s=wd("axis",e,t,a),r=wd("exclusive",e,t,a),o=wd("reverse",e,t,a);return[n.cumprod(wd("x",e,t,a),s,r,o)]}case"Cumsum":{const s=wd("axis",e,t,a),r=wd("exclusive",e,t,a),o=wd("reverse",e,t,a);return[n.cumsum(wd("x",e,t,a),s,r,o)]}case"Bincount":const s=wd("x",e,t,a),r=wd("weights",e,t,a),o=wd("size",e,t,a);return[n.bincount(s,r,o)];case"DenseBincount":{const s=wd("x",e,t,a),r=wd("weights",e,t,a),o=wd("size",e,t,a),i=wd("binaryOutput",e,t,a);return[n.denseBincount(s,r,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"slice_join":return r(()=>((e,t,a,s=uc)=>{switch(e.op){case"ConcatV2":case"Concat":{const n=wd("n",e,t,a),r=wd("axis",e,t,a);let o=wd("tensors",e,t,a);return o=o.slice(0,n),[s.concat(o,r)]}case"Gather":{const n=wd("x",e,t,a),r=wd("indices",e,t,a);return[s.gather(n,s.cast(r,"int32"),0)]}case"GatherV2":{const n=wd("axis",e,t,a),r=wd("batchDims",e,t,a),o=wd("x",e,t,a),i=wd("indices",e,t,a);return[s.gather(o,s.cast(i,"int32"),n,r)]}case"Reverse":{const n=wd("dims",e,t,a),r=[];for(let e=0;e<n.length;e++)n[e]&&r.push(e);const o=wd("x",e,t,a);return[s.reverse(o,r)]}case"ReverseV2":{const n=wd("axis",e,t,a),r=wd("x",e,t,a);return[s.reverse(r,n)]}case"Slice":{const n=wd("begin",e,t,a),r=wd("size",e,t,a);return[s.slice(wd("x",e,t,a),n,r)]}case"StridedSlice":{const n=wd("begin",e,t,a),r=wd("end",e,t,a),o=wd("strides",e,t,a),i=wd("beginMask",e,t,a),p=wd("endMask",e,t,a),u=wd("ellipsisMask",e,t,a),l=wd("newAxisMask",e,t,a),m=wd("shrinkAxisMask",e,t,a),d=wd("x",e,t,a);return[s.stridedSlice(d,n,r,o,i,p,u,l,m)]}case"Pack":return ao(()=>{const r=wd("axis",e,t,a),o=wd("tensors",e,t,a),i=o[0].shape,p=s.squeeze(o[0]).shape,u=o.map(e=>{const t=n(e.shape,i);if(!t&&!n(s.squeeze(e).shape,p))throw new Error("the input tensors shape does not match");return t?e:s.reshape(e,i)});return[s.stack(u,r)]});case"Unpack":{const n=wd("axis",e,t,a),r=wd("tensor",e,t,a);return s.unstack(r,n)}case"Tile":{const n=wd("reps",e,t,a);return[s.tile(wd("x",e,t,a),n)]}case"Split":case"SplitV":{const n=wd("axis",e,t,a),r=wd("numOrSizeSplits",e,t,a),o=wd("x",e,t,a);return s.split(o,r,n)}case"ScatterNd":{const n=wd("indices",e,t,a),r=wd("values",e,t,a),o=wd("shape",e,t,a);return[s.scatterND(n,r,o)]}case"GatherNd":{const n=wd("x",e,t,a),r=wd("indices",e,t,a);return[s.gatherND(n,r)]}case"SparseToDense":{const n=wd("sparseIndices",e,t,a),r=wd("outputShape",e,t,a),o=wd("sparseValues",e,t,a),i=wd("defaultValue",e,t,a);return[s.sparseToDense(n,o,r,o.dtype===i.dtype?i:s.cast(i,o.dtype))]}case"TensorScatterUpdate":{const n=wd("indices",e,t,a),r=wd("values",e,t,a),o=wd("tensor",e,t,a);return[s.tensorScatterUpdate(o,n,r)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"sparse":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:r,emptyRowIndicator:o,reverseIndexMap:i}=n.sparse.sparseFillEmptyRows(wd("indices",e,t,a),wd("values",e,t,a),wd("denseShape",e,t,a),wd("defaultValue",e,t,a));return[s,r,o,i]}case"SparseReshape":{const{outputIndices:s,outputShape:r}=n.sparse.sparseReshape(wd("inputIndices",e,t,a),wd("inputShape",e,t,a),wd("newShape",e,t,a));return[s,r]}case"SparseSegmentMean":return[n.sparse.sparseSegmentMean(wd("data",e,t,a),wd("indices",e,t,a),wd("segmentIds",e,t,a))];case"SparseSegmentSum":return[n.sparse.sparseSegmentSum(wd("data",e,t,a),wd("indices",e,t,a),wd("segmentIds",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"spectral":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"FFT":return[n.fft(wd("x",e,t,a))];case"IFFT":return[n.ifft(wd("x",e,t,a))];case"RFFT":return[n.rfft(wd("x",e,t,a))];case"IRFFT":return[n.irfft(wd("x",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"string":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"StaticRegexReplace":return[n.string.staticRegexReplace(wd("input",e,t,a),wd("pattern",e,t,a),wd("rewrite",e,t,a),wd("replaceGlobal",e,t,a))];case"StringNGrams":{const{nGrams:s,nGramsSplits:r}=n.string.stringNGrams(wd("data",e,t,a),wd("dataSplits",e,t,a),wd("separator",e,t,a),wd("nGramWidths",e,t,a),wd("leftPad",e,t,a),wd("rightPad",e,t,a),wd("padWidth",e,t,a),wd("preserveShortSequences",e,t,a));return[s,r]}case"StringSplit":{const{indices:s,values:r,shape:o}=n.string.stringSplit(wd("input",e,t,a),wd("delimiter",e,t,a),wd("skipEmpty",e,t,a));return[s,r,o]}case"StringToHashBucketFast":return[n.string.stringToHashBucketFast(wd("input",e,t,a),wd("numBuckets",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"transformation":return r(()=>((e,t,a,n=uc)=>{switch(e.op){case"Cast":return[n.cast(wd("x",e,t,a),wd("dtype",e,t,a))];case"ExpandDims":{const s=wd("axis",e,t,a);return[n.expandDims(wd("x",e,t,a),s)]}case"Squeeze":{const s=wd("axis",e,t,a);return[n.squeeze(wd("x",e,t,a),s)]}case"Reshape":return[n.reshape(wd("x",e,t,a),wd("shape",e,t,a))];case"EnsureShape":return[n.ensureShape(wd("x",e,t,a),wd("shape",e,t,a))];case"MirrorPad":return[n.mirrorPad(wd("x",e,t,a),wd("padding",e,t,a),wd("mode",e,t,a))];case"PadV2":case"Pad":return[n.pad(wd("x",e,t,a),wd("padding",e,t,a),wd("constantValue",e,t,a))];case"SpaceToBatchND":{const s=wd("blockShape",e,t,a),r=wd("paddings",e,t,a);return[n.spaceToBatchND(wd("x",e,t,a),s,r)]}case"BatchToSpaceND":{const s=wd("blockShape",e,t,a),r=wd("crops",e,t,a);return[n.batchToSpaceND(wd("x",e,t,a),s,r)]}case"DepthToSpace":{const s=wd("blockSize",e,t,a),r=wd("dataFormat",e,t,a).toUpperCase();return[n.depthToSpace(wd("x",e,t,a),s,r)]}case"BroadcastTo":return[n.broadcastTo(wd("x",e,t,a),wd("shape",e,t,a))];case"BroadcastArgs":return[n.broadcastArgs(wd("s0",e,t,a),wd("s1",e,t,a))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,a));case"hash_table":return((e,t,a,n)=>kl(void 0,null,function*(){switch(e.op){case"HashTable":case"HashTableV2":{const s=n.getHashTableHandleByName(e.name);if(null!=s)return[s];{const s=wd("keyDType",e,t,a),r=wd("valueDType",e,t,a),o=new bc(s,r);return n.addHashTable(e.name,o),[o.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const s=wd("tableHandle",e,t,a,n),r=wd("keys",e,t,a),o=wd("values",e,t,a),i=n.getHashTableById(s.id);return[yield i.import(r,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=wd("tableHandle",e,t,a,n),r=wd("keys",e,t,a),o=wd("defaultValue",e,t,a),i=n.getHashTableById(s.id);return[yield i.find(r,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=wd("tableHandle",e,t,a,n);return[n.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}}))(e,t,a,s);case"custom":const o=bd(e.op);if(o&&o.customExecutor)return o.customExecutor(new pc(e,t,a));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,a);return vr(o)?o.then(e=>[].concat(e)):[].concat(o)}class wc{constructor(e={},t={},a={},n={},s){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=a,this.functionMap=n,this.parseNodeNameCache=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const a=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(a))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function xc(e,t,a,n){const s=new Set,r=[];let o=null,i=null;const p=new Set,u=new Set(Object.keys(e).map(e=>Od(e)[0]));n=n||[];const l=new Set(n.map(e=>Od(e.name)[0])),m=[...t];for(;m.length>0;){const e=m.pop();(_c(e)||Ec(e)||Ac(e))&&null==o&&(o=e,i=o.children.map(e=>e.name).filter(e=>s.has(e))),s.add(e.name),null==a[e.name]&&(u.has(e.name)||l.has(e.name)||(0!==e.inputs.length?e.inputs.forEach(e=>{p.has(e.name)||(p.add(e.name),m.push(e))}):r.push(e.name)))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:r,dynamicNode:o,syncInputs:i}}class Sc extends Error{constructor(e){super(`NodesExecutionOrderError: ${e}`)}}const Tc=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),vc=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),Oc=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function _c(e){return Tc.has(e.op)}function Ec(e){return vc.has(e.op)}function Ac(e){return Oc.has(e.op)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class kc{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map(t=>e[t].map(e=>e.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach(t=>{this._functionExecutorMap[t]=new kc(e.functions[t],this)})}getCompilationKey(e,t){const a=e.map(e=>e.name).sort(),n=t.map(e=>e.name).sort();return a.join(this.SEPARATOR)+"--"+n.join(this.SEPARATOR)}compile(e,t){const a=xc(e,t,this.weightMap,this._initNodes),{missingInputs:n,dynamicNode:s,syncInputs:r}=a;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${r}]`);if(n.length>0){const a=t.map(e=>e.name),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${a}] from the provided inputs [${s}]. Missing the following inputs: [${n}]`)}const o=function(e,t){const{usedNodes:a,inputs:n}=t,s=Object.keys(n).map(e=>Od(e)[0]).map(t=>e.nodes[t]),r=e.initNodes||[],o=e=>a.has("string"==typeof e?e:e.name);function i(e){return[...new Map(e.map(e=>[e.name,e])).values()]}const p=i([...s,...e.weights,...r]).filter(o),u=i([...p,...Object.values(e.nodes)]).filter(o),l=new Map(u.map(e=>[e.name,e])),m={};for(const f of u){m[f.name]=m[f.name]||0;for(const e of f.children)o(e)||(m[e.name]=Number.POSITIVE_INFINITY),m[e.name]=(m[e.name]||0)+1}const d=Object.entries(m).filter(([,e])=>0===e).map(([e])=>e),c=[...d];for(;d.length>0;){const e=d.pop(),t=l.get(e);for(const a of t.children.filter(o))0===--m[a.name]&&(c.push(a.name),d.push(a.name))}const h=function(e,t){const a=new Map(e.map(e=>[e.name,e])),n=t.map(e=>e.name),s=new Set(n);for(;n.length>0;){const e=n.pop(),t=a.get(e);for(const r of t.children)a.has(r.name)&&!s.has(r.name)&&(s.add(r.name),n.push(r.name))}return e.filter(e=>s.has(e.name))}(c.map(e=>l.get(e)),p);return function(e,t){const a=new Map(e.map((e,t)=>[e.name,t])),n=new Set(t.map(e=>e.name)),s=e=>n.has("string"==typeof e?e:e.name),r=new Set(e.map(e=>e.name)),o=e=>r.has("string"==typeof e?e:e.name);for(const i of e){for(const e of i.children.filter(o)){if(!a.has(e.name))throw new Sc(`Child ${e.name} of node ${i.name} is unreachable.`);if(a.get(i.name)>a.get(e.name))throw new Sc(`Node ${i.name} is scheduled to run after its child ${e.name}.`)}if(!s(i))for(const e of i.inputs){if(!a.has(e.name))throw new Sc(`Input ${e.name} of node ${i.name} is unreachable.`);if(a.get(e.name)>a.get(i.name))throw new Sc(`Node ${i.name} is scheduled to run before its input ${e.name}.`)}}}(h,p),h}(this.graph,a);return{orderedNodes:o,nodeLiveUntilMap:function(e){const t=new Map(e.map((e,t)=>[e.name,t])),a=Number.MAX_SAFE_INTEGER,n=e.map((e,t)=>_c(e)?a:t),s=e=>{const a=n[t.get(e.name)];return null==a?-1:a},r=e.map((e,t)=>e.children.map(s).reduce((e,t)=>Math.max(e,t),n[t])),o=new Map;for(let i=0;i<e.length;++i){const t=r[i];if(t===a)continue;const n=e[i],s=e[t];o.has(s.name)||o.set(s.name,[]),o.get(s.name).push(n)}return o}(o)}}cloneAndKeepTensor(e){if(null==e)return null;const t=e.clone();return to(t),t}cloneTensorList(e){return e?e.map(e=>this.cloneAndKeepTensor(e)):null}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map(([e,t])=>[e,this.cloneTensorList(t)]))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);const a=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const n=a.map(e=>this.graph.nodes[Od(e)[0]]),s=t.map(e=>Od(e)[0]),r=new Set(s);let o=s.map(e=>this.graph.nodes[e]);0===o.length&&(o=this._outputs);const i=this.getCompilationKey(n,o);let p=this.compiledMap.get(i);null==p&&(p=this.compile(e,o),this.compiledMap.set(i,p));try{this.keepIntermediateTensors=le().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(m){this.keepIntermediateTensors=!1,console.warn(m.message)}const u={},l={};return ao(()=>{const a=new wc(this.weightMap,u,l,this.functionExecutorMap,this.parseNodeNameCache),n=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach(t=>{const[s,r]=Od(t,a),o=[];o[r]=e[t],n[s]=o,this.keepIntermediateTensors&&(this.clonedTensorsMap[s]=this.cloneTensorList(o))});const s=this.getFrozenTensorIds(n),{orderedNodes:o,nodeLiveUntilMap:i}=p;for(const e of o){if(n[e.name])continue;const t=Nc(e,n,a,this._resourceManager);if(vr(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);n[e.name]=t,this.keepIntermediateTensors&&(this.clonedTensorsMap[e.name]=this.cloneTensorList(t)),this.checkTensorForDisposalWithNodeLiveUntilInfo(e,n,a,s,r,i.get(e.name))}return null==this.parent&&a.dispose(s),t.map(e=>xd(e,n,a))})}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map(t=>e[t]).map(e=>e.map(e=>e.id)));return new Set(t)}checkTensorForDisposal(e,t,a,n,s,r,o){if(!_c(t)&&!r.has(e)){for(const n of a[e])null!=n&&(o[n.id]=(o[n.id]||0)+t.children.length);for(const e of t.inputs){if(_c(e))continue;const t=Sd(e.name,a,n);if(null!=t)for(const e of t){if(!e||e.kept||s.has(e.id))continue;const t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,a,n,s,r){function o(e){return _c(e)||s.has(e.name)}if(!_c(e)&&null!=r)for(const i of r){if(o(i))continue;const e=Sd(i.name,t,a);for(const t of e)!t||t.kept||n.has(t.id)||t.dispose()}}executeAsync(e,t){return kl(this,null,function*(){return this._executeAsync(e,t)})}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(e=>{for(const t of e)t&&!t.isDisposed&&t.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}_executeAsync(e,t){return kl(this,arguments,function*(e,t,a=!1,n={},s={}){this.disposeIntermediateTensors(),a||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=le().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(m){this.keepIntermediateTensors=!1,console.warn(m.message)}const r=new wc(this.weightMap,n,s,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const o=yield this.executeWithControlFlow(e,r,t,a),i=t.map(e=>xd(e,o,r)),p=i.map(e=>e.id),u=Object.keys(e).map(t=>e[t].id),l=new Set([...p,...u,...this.weightIds]);return Object.values(o).forEach(e=>{e.forEach(e=>{!e||e.isDisposed||l.has(e.id)||e.dispose()})}),null==this.parent&&r.dispose(l),i})}executeFunctionAsync(e,t,a){return kl(this,null,function*(){const n=e.reduce((e,t,a)=>(e[this.inputs[a].name]=t,e),{});return this._executeAsync(n,this.outputNodes,!0,t,a)})}executeWithControlFlow(e,t,a,n){return kl(this,null,function*(){const s=Object.keys(e),r=s.map(e=>this.graph.nodes[Od(e)[0]]),o=a.map(e=>Od(e)[0]),i=new Set(o);let p=o.map(e=>this.graph.nodes[e]);0===p.length&&(p=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:m,syncInputs:d}=xc(e,p,this.weightMap,this._initNodes),c=[...r,...this.graph.weights,...this._initNodes||[]].map(e=>({node:e,contexts:t.currentContext})),h=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[a,n]=Od(t),s=[];s[n]=e[t],h[a]=s});const f={},y=this.getFrozenTensorIds(h),g={};for(;c.length>0;){const e=this.processStack(r,c,t,h,g,y,i,f,u);yield Promise.all(e)}null!=m||n||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const b=p.filter(e=>!_c(e)&&!xd(e.name,h,t)).map(e=>e.name);if(b.length>0){let e="";throw null!=m&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${e}`)}return h})}processStack(e,t,a,n,s,r,o,i,p){const u=[];for(;t.length>0;){const e=t.pop();a.currentContext=e.contexts;let l="";if("Enter"===e.node.op&&wd("isConstant",e.node,n,a)&&([l]=Td(e.node.name,a)),null==n[e.node.name]){const m=Nc(e.node,n,a,this._resourceManager);l||([l]=Td(e.node.name,a));const d=a.currentContext;vr(m)?u.push(m.then(u=>(n[l]=u,this.keepIntermediateTensors&&(this.clonedTensorsMap[l]=this.cloneTensorList(u)),a.currentContext=d,this.checkTensorForDisposal(l,e.node,n,a,r,o,i),this.processChildNodes(e.node,t,a,n,s,p),u))):(n[l]=m,this.keepIntermediateTensors&&(this.clonedTensorsMap[l]=this.cloneTensorList(m)),this.checkTensorForDisposal(l,e.node,n,a,r,o,i),this.processChildNodes(e.node,t,a,n,s,p))}else this.processChildNodes(e.node,t,a,n,s,p)}return u}processChildNodes(e,t,a,n,s,r){e.children.forEach(e=>{const[o]=Td(e.name,a);!s[o]&&r.has(e.name)&&("Merge"===e.op?e.inputNames.some(e=>!!xd(e,n,a))&&(s[o]=!0,t.push({contexts:a.currentContext,node:e})):e.inputNames.every(e=>!!xd(e,n,a))&&(s[o]=!0,t.push({contexts:a.currentContext,node:e})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(e=>e.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(a=>{const n=e[a],[s]=Od(a),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value,a=e.length===n.shape.length&&n.shape.every((t,a)=>-1===e[a]||e[a]===t);t(a,()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`)}r.attrParams.dtype&&r.attrParams.dtype.value&&t(n.dtype===r.attrParams.dtype.value,()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(e){var t,a;const n={};for(const s in e){const r=null===(a=null===(t=this._signature)||void 0===t?void 0:t.inputs)||void 0===a?void 0:a[s];null!=r?n[r.name]=e[s]:n[s]=e[s]}return n}checkInputs(e){const t=Object.keys(e).filter(e=>{const[t]=Od(e);return null==this.graph.nodes[t]});if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(e=>{var t,a;const n=null===(a=null===(t=this._signature)||void 0===t?void 0:t.outputs)||void 0===a?void 0:a[e];return null!=n?n.name:e},{})}checkOutputs(e){e.forEach(e=>{const[t]=Od(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)})}}class Mc{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class Cc{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e,t={},a=Dm){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=a,null==t&&(this.loadOptions={}),this.resourceManager=new Mc}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return vr(e)?e.then(e=>null==e.getWeightStream?this.loadSync(e):this.loadStreaming(e)):this.loadSync(e)}loadSync(e){const t=this.io.decodeWeights(e.weightData,e.weightSpecs);return this.loadWithWeightMap(e,t)}loadStreaming(e){return kl(this,null,function*(){if(null==e.getWeightStream)throw new Error("Model artifacts missing streamWeights function");const t=yield ye(e.getWeightStream(),e.weightSpecs);return this.loadWithWeightMap(e,t)})}loadWithWeightMap(e,t){this.artifacts=e;const a=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}if(this.signature=n,this.version=`${a.versions.producer}.${a.versions.minConsumer}`,this.executor=new kc(Gd.Instance.transformGraph(a,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(t),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Gd.Instance.transformGraph(e.modelInitializer);this.initializer=new kc(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}save(e,t){return kl(this,null,function*(){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)})}addStructuredOutputNames(e){if(this.structuredOutputKeys){const t={};return(e instanceof S?[e]:e).forEach((e,a)=>t[this.structuredOutputKeys[a]]=e),t}return e}predict(e,t){const a=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(a)}predictAsync(e,t){return kl(this,null,function*(){const t=yield this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(t)})}normalizeInputs(e){var t;if(!(e instanceof S||Array.isArray(e))){const a=null===(t=this.signature)||void 0===t?void 0:t.inputs;if(null!=a)for(const t in a){const n=a[t];null!=n.resourceId&&(e[t]=this.resourceIdToCapturedInput[n.resourceId])}return e}e=Array.isArray(e)?e:[e];const a=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+a!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-a} non-resource placeholders, while there are ${e.length} input tensors provided.`);let n=0;return this.inputNodes.reduce((t,a)=>{var s,r,o;const i=null===(o=null===(r=null===(s=this.signature)||void 0===s?void 0:s.inputs)||void 0===r?void 0:r[a])||void 0===o?void 0:o.resourceId;return t[a]=null!=i?this.resourceIdToCapturedInput[i]:e[n++],t},{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}executeInitializerGraphAsync(){return kl(this,null,function*(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))})}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){const t=this.initializerSignature.outputs,a=Object.keys(t);for(let n=0;n<a.length;n++){const s=t[a[n]];this.resourceIdToCapturedInput[s.resourceId]=e[n]}}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const a=this.executor.execute(e,t);return a.length>1?a:a[0]}executeAsync(e,t){return kl(this,null,function*(){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(yield this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const a=yield this.executor.executeAsync(e,t);return a.length>1?a:a[0]})}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,a)=>(t[a]=[e[a]],t),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&Or(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}function Ic(e){return kl(this,arguments,function*(e,t={},a=Dm){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");var n;null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&((n=e).endsWith("/")||(n+="/"),e=`${n}model.json?tfjs-format=file`);const s=new Cc(e,t,a);return yield s.load(),s})}function Dc(e){if(null==e)throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");let t;if(e instanceof Array){const[a,n]=e;if(!a)throw new Error("modelJSON must be the first element of the array");if(!(n&&n instanceof ArrayBuffer))throw new Error("An ArrayBuffer of weights must be the second element of the array");if(!("modelTopology"in a))throw new Error("Model JSON is missing 'modelTopology'");if(!("weightsManifest"in a))throw new Error("Model JSON is missing 'weightsManifest'");const s=Te(a.weightsManifest);t=Im(we(a,s,n))}else if("load"in e)t=e;else{if(!("modelTopology"in e&&"weightSpecs"in e&&"weightData"in e))throw new Error("Unknown model format");t=Im(e)}const a=new Cc(t);return a.load(),a}const zc="4.22.0";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */class $c extends _r{constructor(e){super(),this.input=e}iterator(){return kl(this,null,function*(){return(yield this.input.iterator()).decodeUTF8().split("\n").map(e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e))})}}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */const Vc='"',Pc=Symbol("out"),Lc=Symbol("field"),Fc=Symbol("quote"),Rc=Symbol("quoteafterquote"),Bc=Symbol("quoteinquote");class jc extends _r{columnNames(){return kl(this,null,function*(){return this.columnNamesValidated||(yield this.setColumnNames()),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames})}setColumnNames(){return kl(this,null,function*(){const e=yield this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&t(e.length===this.fullColumnNames.length,()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+")."),this.fullColumnNames||(this.fullColumnNames=e);const a=this.fullColumnNames.reduce((e,t)=>(e[t]=e[t]+1||1,e),{}),n=Object.keys(a).filter(e=>a[e]>1);if(t(0===n.length,()=>"Duplicate column names found: "+n.toString()),this.columnConfigs)for(const t of Object.keys(this.columnConfigs))if(-1===this.fullColumnNames.indexOf(t))throw new Error('The key "'+t+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").");this.columnNamesValidated=!0})}maybeReadHeaderLine(){return kl(this,null,function*(){if(this.hasHeader){const e=yield this.base.iterator(),t=yield e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const a=t.value;return this.parseRow(a,!1)}return null})}constructor(e,a){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new $c(e),a||(a={}),this.hasHeader=!1!==a.hasHeader,this.fullColumnNames=a.columnNames,this.columnConfigs=a.columnConfigs,this.configuredColumnsOnly=a.configuredColumnsOnly,a.delimWhitespace?(t(null==a.delimiter,()=>"Delimiter should not be provided when delimWhitespace is true."),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=a.delimiter?a.delimiter:","}iterator(){return kl(this,null,function*(){this.columnNamesValidated||(yield this.setColumnNames());let e=yield this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map(e=>this.makeDataElement(e))})}makeDataElement(e){const t=this.parseRow(e),a={},n={};for(let s=0;s<this.fullColumnNames.length;s++){const r=this.fullColumnNames[s],o=this.columnConfigs?this.columnConfigs[r]:null;if(!this.configuredColumnsOnly||o){const i=t[s];let p=null;if(""===i)if(o&&void 0!==o.default)p=o.default;else{if(o&&(o.required||o.isLabel))throw new Error(`Required column ${r} is empty in this line: ${e}`);p=void 0}else{const e=Number(i);if(isNaN(e))p=o&&"bool"===o.dtype?this.getBoolean(i):i;else if(o&&o.dtype)switch(o.dtype){case"float32":default:p=e;break;case"int32":p=Math.floor(e);break;case"bool":p=this.getBoolean(i)}else p=e}o&&o.isLabel?n[r]=p:a[r]=p}}return 0===Object.keys(n).length?a:{xs:a,ys:n}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const a=[];let n=0;const s=e.length;let r=Pc;for(let o=0;o<s;o++)switch(r){case Pc:switch(e.charAt(o)){case Vc:n=o+1,r=Fc;break;case this.delimiter:if(n=o+1," "===this.delimiter&&this.delimWhitespace)break;a.push(""),r=Pc;break;default:r=Lc,n=o}break;case Lc:e.charAt(o)===this.delimiter&&(a.push(e.substring(n,o)),r=Pc,n=o+1);break;case Fc:e.charAt(o)===Vc&&(r=Rc);break;case Rc:switch(e.charAt(o)){case this.delimiter:a.push(e.substring(n,o-1)),r=Pc,n=o+1;break;case Vc:r=Fc;break;default:r=Bc}break;case Bc:e.charAt(o)===Vc&&(r=Fc)}if(r===Rc?a.push(e.substring(n,s-1)):a.push(e.substring(n)),t&&a.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${a}`);return a}}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */class qc extends ro{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static create(){return kl(this,arguments,function*(e={}){if(!le().get("IS_BROWSER"))throw new Error("microphone API is only supported in browser environment.");const t=new qc(e);return yield t.start(),t})}start(){return kl(this,null,function*(){try{this.stream=yield navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(a){throw new Error(`Error thrown while initializing video stream: ${a.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)})}next(){return kl(this,null,function*(){if(this.isClosed)return{value:null,done:!0};let e,t;const a=yield this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(a.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(a.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}})}capture(){return kl(this,null,function*(){return(yield this.next()).value})}getAudioData(){return kl(this,null,function*(){const e=[],t=[];let a=0;return new Promise(n=>{const s=setInterval(()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&n({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++a===this.numFrames&&(clearInterval(s),n({freqDataQueue:e,timeDataQueue:t}))},this.fftSize/this.sampleRateHz*1e3)})})}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,a=new Float32Array(e.length*t);return e.forEach((e,n)=>a.set(e,n*t)),a}getTensorFromAudioDataArray(e,t){const a=new Float32Array(N(t));return a.set(e,a.length-e.length),mr(a,t)}}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */class Wc extends ro{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=dr([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,a=(1-e)/2,n=(1-t)/2,s=a+e,r=t+n;this.cropBox=cr([n,a,r,s],[1,4])}else this.cropBox=cr([0,0,1,1],[1,4])}summary(){return"webcam"}static create(e){return kl(this,arguments,function*(e,t={}){if(!le().get("IS_BROWSER"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const a=new Wc(e,t);return yield a.start(),a})}start(){return kl(this,null,function*(){this.webcamConfig.facingMode&&t("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);try{this.stream=yield navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(a){console.log(a),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise(e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}})})}next(){return kl(this,null,function*(){if(this.isClosed)return{value:null,done:!0};let e;try{e=Rm(this.webcamVideoElement)}catch(t){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(t)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(t){throw new Error(`Error thrown cropping the video: ${t.message}`)}finally{e.dispose()}})}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return ao(()=>{const t=$n(ze(e,"float32"),0);let a;a=Gn.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const n=a.shape;return b(a,n.slice(1))})}capture(){return kl(this,null,function*(){return(yield this.next()).value})}stop(){this.stream.getTracks().forEach(e=>e.stop());try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */class Hc{}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */class Uc extends ro{split(e){return new Gc(this,e)}}class Gc extends Uc{constructor(e,t){super(),this.upstream=e,this.impl=new Kc(e,t)}summary(){return this.impl.summary()}next(){return kl(this,null,function*(){return this.impl.next()})}}class Kc extends oo{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}pump(){return kl(this,null,function*(){const e=yield this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const a of t.slice(0,-1))this.outputQueue.push(a);return this.carryover=t[t.length-1],!0})}}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */class Jc extends ro{decodeUTF8(){return new Qc(this)}}class Qc extends Uc{constructor(e){super(),this.upstream=e,this.impl=new Xc(e)}summary(){return this.impl.summary()}next(){return kl(this,null,function*(){return this.impl.next()})}}class Xc extends oo{constructor(e){if(super(),this.upstream=e,le().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=require("string_decoder");this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}pump(){return kl(this,null,function*(){const e=yield this.upstream.next();let t,a;return!e.done&&(t=e.value,a=le().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(a),!0)})}}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */class Zc extends Jc{constructor(e,a={}){super(),this.file=e,this.options=a,t(e instanceof Uint8Array||!!le().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),()=>"FileChunkIterator only supports File, Blob and Uint8Array right now."),this.offset=a.offset||0,this.chunkSize=a.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}next(){return kl(this,null,function*(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise((e,t)=>{const a=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,a)));else{const n=new FileReader;n.onload=a=>{let s=n.result;if(s instanceof ArrayBuffer&&(s=new Uint8Array(s)),!(s instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(s)},n.onabort=e=>t(new Error("Aborted")),n.onerror=e=>t(new Error(e.type));const s=this.file.slice(this.offset,a);n.readAsArrayBuffer(s)}this.offset=a});return{value:yield e,done:!1}})}}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function Yc(e){return"string"==typeof e&&"file://"===e.slice(0,7)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */class eh extends Hc{constructor(e,t={}){super(),this.input=e,this.options=t}iterator(){return kl(this,null,function*(){if(Yc(this.input)&&le().get("IS_NODE")){const e=require("fs");this.input=e.readFileSync(this.input.slice(7))}return new Zc(this.input,this.options)})}}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */class th extends Hc{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}iterator(){return kl(this,null,function*(){return Yc(this.url)?new eh(this.url,this.fileOptions).iterator():function(e){return kl(this,arguments,function*(e,t={},a){let n,s;"string"==typeof e?n=e:(n=e.url,s=(e=>({method:e.method,headers:e.headers,body:e.body,mode:e.mode,credentials:e.credentials,cache:e.cache,redirect:e.redirect,referrer:e.referrer,integrity:e.integrity}))(e));const r=yield(a||no)(n,s);if(r.ok){const e=new Uint8Array(yield r.arrayBuffer());return new Zc(e,t)}throw new Error(r.statusText)})}(this.url,this.fileOptions)})}}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
/** @license See the LICENSE file. */const ah="4.22.0",nh=Object.freeze(Object.defineProperty({__proto__:null,CSVDataset:jc,Dataset:_r,FileDataSource:eh,TextLineDataset:$c,URLDataSource:th,array:Er,csv:function(e,t={}){return new jc(new th(e),t)},func:function(e){const t=Ar(e);return kr(()=>kl(this,null,function*(){return t}))},generator:function(e){return kr(()=>kl(this,null,function*(){const t=yield e();return Ar(()=>t.next())}))},microphone:function(e){return kl(this,null,function*(){return qc.create(e)})},version_data:ah,webcam:function(e,t){return kl(this,null,function*(){return Wc.create(e,t)})},zip:Mr},Symbol.toStringTag,{value:"Module"})),sh="4.22.0",rh="4.22.0",oh={"tfjs-core":jm,"tfjs-backend-cpu":sh,"tfjs-backend-webgl":rh,"tfjs-data":ah,"tfjs-layers":Cr,"tfjs-converter":zc,tfjs:"4.22.0"};export{io as Abs,po as Acos,uo as Acosh,lo as AdadeltaOptimizer,mo as AdagradOptimizer,co as AdamOptimizer,ho as AdamaxOptimizer,fo as Add,r as AddN,yo as All,go as Any,bo as ArgMax,No as ArgMin,wo as Asin,xo as Asinh,So as Atan,To as Atan2,vo as Atanh,Oo as AvgPool,_o as AvgPool3D,Eo as AvgPool3DGrad,Ao as AvgPoolGrad,ko as BatchMatMul,Mo as BatchToSpaceND,Co as Bincount,c as BitwiseAnd,h as BroadcastArgs,Io as BroadcastTo,md as Callback,Do as CallbackList,zo as Cast,$o as Ceil,Vo as ClipByValue,Po as Complex,Lo as ComplexAbs,Fo as Concat,Ro as Conv2D,Bo as Conv2DBackpropFilter,jo as Conv2DBackpropInput,qo as Conv3D,Wo as Conv3DBackpropFilterV2,Ho as Conv3DBackpropInputV2,Uo as Cos,Go as Cosh,Ko as CropAndResize,Jo as Cumprod,Qo as Cumsum,Xo as CustomCallback,Zo as DataStorage,Yo as DenseBincount,ei as DepthToSpace,ti as DepthwiseConv2dNative,ai as DepthwiseConv2dNativeBackpropFilter,ni as DepthwiseConv2dNativeBackpropInput,f as Diag,si as Dilation2D,ri as Dilation2DBackpropFilter,oi as Dilation2DBackpropInput,Ve as Draw,ii as ENV,hd as EarlyStopping,pi as Einsum,ui as Elu,li as EluGrad,mi as Environment,di as Equal,ci as Erf,hi as Exp,fi as ExpandDims,yi as Expm1,gi as FFT,bi as Fill,Ni as FlipLeftRight,wi as Floor,xi as FloorDiv,Hr as FromPixels,Si as FusedBatchNorm,Ti as FusedConv2D,oe as FusedDepthwiseConv2D,vi as GPGPUContext,Q as GatherNd,Oi as GatherV2,Cc as GraphModel,_i as Greater,Ei as GreaterEqual,Ai as History,ki as IFFT,Mi as Identity,Ci as Imag,Ii as InputSpec,Di as IsFinite,zi as IsInf,$i as IsNan,Vi as KernelBackend,Pi as LRN,Li as LRNGrad,Fi as LayerVariable,ot as LayersModel,Ri as LeakyRelu,Bi as Less,ji as LessEqual,g as LinSpace,qi as Log,Wi as Log1p,Hi as LogSoftmax,Ui as LogicalAnd,Gi as LogicalNot,Ki as LogicalOr,Ji as LogicalXor,Qi as LowerBound,Xi as MathBackendCPU,Zi as MathBackendWebGL,Yi as MatrixBandPart,ep as Max,tp as MaxPool,ap as MaxPool3D,np as MaxPool3DGrad,sp as MaxPoolGrad,x as MaxPoolWithArgmax,rp as Maximum,op as Mean,ip as Min,pp as Minimum,up as MirrorPad,lp as Mod,mp as MomentumOptimizer,O as Multinomial,dp as Multiply,cp as Neg,hp as NonMaxSuppressionV3,fp as NonMaxSuppressionV4,yp as NonMaxSuppressionV5,gp as NotEqual,$a as OP_SCOPE_SUFFIX,bp as OneHot,Np as OnesLike,wp as Optimizer,xp as OptimizerConstructors,Sp as Pack,Tp as PadV2,vp as Pool,Op as Pow,_p as Prelu,Ep as Prod,Ap as RMSPropOptimizer,mt as RNN,E as RaggedGather,A as RaggedRange,k as RaggedTensorToTensor,kp as Range,Mp as Rank,Cp as Real,Ip as RealDiv,Dp as Reciprocal,zp as Reduction,$p as Relu,Vp as Relu6,Pp as Reshape,Lp as ResizeBilinear,Fp as ResizeBilinearGrad,Rp as ResizeNearestNeighbor,Bp as ResizeNearestNeighborGrad,jp as Reverse,qp as RotateWithOffset,Wp as Round,Hp as Rsqrt,Up as SGDOptimizer,K as ScatterNd,w as SearchSorted,Gp as Select,Kp as Selu,it as Sequential,Jp as Sigmoid,Qp as Sign,Xp as Sin,Zp as Sinh,Yp as Slice,eu as Softmax,tu as Softplus,au as SpaceToBatchND,nu as SparseFillEmptyRows,su as SparseReshape,ru as SparseSegmentMean,ou as SparseSegmentSum,J as SparseToDense,iu as SplitV,pu as Sqrt,uu as Square,lu as SquaredDifference,mu as StaticRegexReplace,du as Step,cu as StridedSlice,hu as StringNGrams,fu as StringSplit,yu as StringToHashBucketFast,gu as Sub,bu as Sum,Nu as SymbolicTensor,wu as Tan,xu as Tanh,S as Tensor,zr as TensorBuffer,j as TensorScatterUpdate,Su as Tile,Tu as TopK,vu as Transform,Ou as Transpose,_u as Unique,Eu as Unpack,Au as UnsortedSegmentSum,ku as UpperBound,Mu as Variable,Cu as ZerosLike,Iu as _FusedMatMul,Va as abs,Pa as acos,La as acosh,p as add,Ml as addN,Fa as all,Ra as any,Ba as argMax,ja as argMin,qa as asin,Wa as asinh,Ha as atan,Ua as atan2,Ga as atanh,Ka as avgPool,Ja as avgPool3d,Du as backend,zu as backend_util,Cl as basicLSTMCell,Qa as batchNorm,Xa as batchNorm2d,Za as batchNorm3d,Ya as batchNorm4d,en as batchToSpaceND,tn as bincount,Il as bitwiseAnd,bm as booleanMaskAsync,Dl as broadcastArgs,an as broadcastTo,$u as broadcast_util,Bm as browser,z as buffer,fd as callbacks,ze as cast,nn as ceil,sn as clipByValue,rn as clone,on as complex,o as concat,pn as concat1d,un as concat2d,ln as concat3d,mn as concat4d,Wm as constraints,dn as conv1d,cn as conv2d,hn as conv2dTranspose,fn as conv3d,yn as conv3dTranspose,Vu as copyRegisteredKernels,gn as cos,bn as cosh,Nn as cosineWindow,wn as cumprod,xn as cumsum,re as customGrad,nh as data,Sn as denseBincount,Pu as deprecationWarn,Tn as depthToSpace,Z as depthwiseConv2d,Nd as deregisterOp,Lu as device_util,zl as diag,vn as dilation2d,Fu as disableDeprecationWarnings,Or as dispose,Ru as disposeVariables,U as div,On as divNoNan,_n as dot,En as dropout,An as einsum,kn as elu,Bu as enableDebugMode,ju as enableProdMode,Mn as enclosingPowerOfTwo,qu as engine,$l as ensureShape,le as env,Cn as equal,In as erf,Dn as euclideanNorm,zn as exp,$n as expandDims,Vn as expm1,Pn as eye,Ln as fft,Fn as fill,Wu as findBackend,Hu as findBackendFactory,Rn as floor,Bn as floorDiv,Uu as forceHalfFloat,Om as fused,jn as gather,Sm as gatherND,Gu as gather_util,Ku as getBackend,Ju as getGradient,Wr as getKernel,Qu as getKernelsForBackend,Xu as gpgpu_util,Zu as grad,Yu as grads,qn as greater,Wn as greaterEqual,Hn as ifft,Un as imag,Gn as image,Tm as inTopKAsync,Hm as initializers,Km as input,Dm as io,Kn as irfft,Jn as isFinite,Qn as isInf,Xn as isNaN,to as keep,qm as kernel_impls,id as layers,Zn as leakyRelu,Yn as less,es as lessEqual,ts as linalg,Vl as linspace,Ic as loadGraphModel,Dc as loadGraphModelSync,el as loadLayersModel,as as localResponseNormalization,ns as log,ss as log1p,rs as logSigmoid,os as logSoftmax,is as logSumExp,ps as logicalAnd,us as logicalNot,ls as logicalOr,ms as logicalXor,ds as losses,Fl as lowerBound,i as matMul,$m as math,cs as max,hs as maxPool,fs as maxPool3d,Rl as maxPoolWithArgmax,ys as maximum,gs as mean,tl as memory,Bl as meshgrid,pd as metrics,bs as min,Ns as minimum,ws as mirrorPad,xs as mod,Um as model,ud as models,Ss as moments,Nm as movingAverage,l as mul,jl as multiRNNCell,ql as multinomial,Ts as neg,al as nextFrame,vs as norm,Os as notEqual,De as oneHot,T as ones,_s as onesLike,e as op,Wl as outerProduct,_ as pad,Hl as pad1d,Ul as pad2d,Gl as pad3d,Kl as pad4d,Es as pool,G as pow,As as prelu,ks as print,Ms as prod,nl as profile,Jl as raggedGather,Ql as raggedRange,Xl as raggedTensorToTensor,Zl as rand,nm as randomGamma,$ as randomNormal,sm as randomStandardNormal,V as randomUniform,rm as randomUniformInt,Cs as range,sl as ready,Is as real,Ds as reciprocal,rl as registerBackend,Jm as registerCallbackConstructor,ol as registerGradient,il as registerKernel,gd as registerOp,ld as regularizers,zs as relu,$s as relu6,pl as removeBackend,b as reshape,P as reverse,om as reverse1d,im as reverse2d,pm as reverse3d,um as reverse4d,Vs as rfft,Ps as round,Ls as rsqrt,W as scalar,wm as scatterND,ul as scatter_util,Ll as searchSorted,Fs as selu,Rs as separableConv2d,Gm as sequential,ll as serialization,ml as setBackend,dl as setPlatform,cl as setWebGLContext,lm as setdiff1dAsync,hl as shared,m as sigmoid,Bs as sign,js as signal,qs as sin,Ws as sinh,u as slice,Hs as slice1d,Us as slice2d,Gs as slice3d,Ks as slice4d,fl as slice_util,Js as softmax,Qs as softplus,Xs as spaceToBatchND,Zs as sparse,xm as sparseToDense,Ys as spectral,er as split,tr as sqrt,ar as square,nr as squaredDifference,sr as squeeze,rr as stack,or as step,ir as stridedSlice,pr as string,H as sub,ur as sum,yl as sumOutType,lr as tan,d as tanh,mr as tensor,dr as tensor1d,cr as tensor2d,mm as tensor3d,dm as tensor4d,cm as tensor5d,hm as tensor6d,fm as tensorScatterUpdate,gl as tensor_util,am as test_util,ao as tidy,hr as tile,bl as time,fr as topk,Nl as train,$e as transpose,yr as truncatedNormal,gr as unique,wl as unregisterGradient,xl as unregisterKernel,br as unsortedSegmentSum,Nr as unstack,Sl as upcastType,ym as upperBound,Tl as util,vl as valueAndGrad,Ol as valueAndGrads,wr as variable,_l as variableGrads,oh as version,zc as version_converter,jm as version_core,sh as version_cpu,Cr as version_layers,rh as version_webgl,El as webgl,Al as webgl_util,xr as where,gm as whereAsync,Sr as zeros,Tr as zerosLike};
//# sourceMappingURL=index-295bde5e-7ebe3a77.js.map
