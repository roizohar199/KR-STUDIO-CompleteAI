{"version":3,"file":"index-295bde5e.js","sources":["../../node_modules/@tensorflow/tfjs-core/dist/ops/add_n.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/basic_lstm_cell.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/bitwise_and.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_args.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/diag.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/ensure_shape.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/linspace.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/search_sorted.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/lower_bound.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_with_argmax.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/meshgrid.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/multi_rnn_cell.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/multinomial.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/outer_product.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/pad1d.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/pad2d.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/pad3d.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/pad4d.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/ragged_gather.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/ragged_range.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/ragged_tensor_to_tensor.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/rand.js","../../node_modules/@tensorflow/tfjs-core/dist/test_util.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/random_gamma.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/random_standard_normal.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform_int.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/reverse_1d.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/reverse_2d.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/reverse_3d.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/reverse_4d.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/setdiff1d_async.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/tensor3d.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/tensor4d.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/tensor5d.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/tensor6d.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/tensor_scatter_update.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/upper_bound.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/where_async.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/boolean_mask.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/moving_average.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense_util.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/in_top_k.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/fused/depthwise_conv2d.js","../../node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js","../../node_modules/@tensorflow/tfjs-core/dist/io/passthrough.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/confusion_matrix.js","../../node_modules/@tensorflow/tfjs-core/dist/ops/browser.js","../../node_modules/@tensorflow/tfjs-core/dist/version.js","../../node_modules/@tensorflow/tfjs-layers/dist/exports_constraints.js","../../node_modules/@tensorflow/tfjs-layers/dist/exports_initializers.js","../../node_modules/@tensorflow/tfjs-layers/dist/exports.js","../../node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","../../node_modules/@tensorflow/tfjs-layers/dist/exports_metrics.js","../../node_modules/@tensorflow/tfjs-layers/dist/exports_regularizers.js","../../node_modules/@tensorflow/tfjs-layers/dist/callbacks.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/hash_table.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/sparse.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/string.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/hash_table.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/ragged_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/sparse_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/string_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/hash_table_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/resource_manager.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js","../../node_modules/@tensorflow/tfjs-converter/dist/version.js","../../node_modules/@tensorflow/tfjs-data/dist/datasets/text_line_dataset.js","../../node_modules/@tensorflow/tfjs-data/dist/datasets/csv_dataset.js","../../node_modules/@tensorflow/tfjs-data/dist/iterators/microphone_iterator.js","../../node_modules/@tensorflow/tfjs-data/dist/iterators/webcam_iterator.js","../../node_modules/@tensorflow/tfjs-data/dist/datasource.js","../../node_modules/@tensorflow/tfjs-data/dist/iterators/string_iterator.js","../../node_modules/@tensorflow/tfjs-data/dist/iterators/byte_chunk_iterator.js","../../node_modules/@tensorflow/tfjs-data/dist/iterators/file_chunk_iterator.js","../../node_modules/@tensorflow/tfjs-data/dist/iterators/url_chunk_iterator.js","../../node_modules/@tensorflow/tfjs-data/dist/util/source_util.js","../../node_modules/@tensorflow/tfjs-data/dist/sources/file_data_source.js","../../node_modules/@tensorflow/tfjs-data/dist/sources/url_data_source.js","../../node_modules/@tensorflow/tfjs-data/dist/version.js","../../node_modules/@tensorflow/tfjs-data/dist/readers.js","../../node_modules/@tensorflow/tfjs-backend-cpu/dist/version.js","../../node_modules/@tensorflow/tfjs-backend-webgl/dist/version.js","../../node_modules/@tensorflow/tfjs/dist/index.js","../../node_modules/@tensorflow/tfjs/dist/version.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AddN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction addN_(tensors) {\n    util.assert(Array.isArray(tensors), () => 'The argument passed to tf.addN() must be a list of tensors');\n    util.assert(tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ` +\n        `${tensors.length}`);\n    const $tensors = tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n    const firstTensor = $tensors[0];\n    $tensors.forEach(t => {\n        if (t.dtype !== firstTensor.dtype) {\n            throw new Error('All tensors passed to tf.addN() must have the same dtype');\n        }\n    });\n    $tensors.forEach(t => {\n        if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n            throw new Error('All tensors passed to tf.addN() must have the same shape');\n        }\n    });\n    const inputs = $tensors;\n    return ENGINE.runKernel(AddN, inputs);\n}\nexport const addN = /* @__PURE__ */ op({ addN_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkX24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9hZGRfbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBQyxJQUFJLEVBQWEsTUFBTSxpQkFBaUIsQ0FBQztBQUdqRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFbkQsT0FBTyxLQUFLLElBQUksTUFBTSxTQUFTLENBQUM7QUFFaEMsT0FBTyxFQUFDLEVBQUUsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUUvQjs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxTQUFTLEtBQUssQ0FBbUIsT0FBNEI7SUFDM0QsSUFBSSxDQUFDLE1BQU0sQ0FDUCxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUN0QixHQUFHLEVBQUUsQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO0lBQ3hFLElBQUksQ0FBQyxNQUFNLENBQ1AsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQ25CLEdBQUcsRUFBRSxDQUFDLHNEQUFzRDtRQUN4RCxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBRTdCLE1BQU0sUUFBUSxHQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUVyRSxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNuQixJQUFJLENBQUMsQ0FBQyxLQUFLLEtBQUssV0FBVyxDQUFDLEtBQUssRUFBRTtZQUNqQyxNQUFNLElBQUksS0FBSyxDQUNYLDBEQUEwRCxDQUFDLENBQUM7U0FDakU7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDakQsTUFBTSxJQUFJLEtBQUssQ0FDWCwwREFBMEQsQ0FBQyxDQUFDO1NBQ2pFO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLE1BQU0sR0FBZSxRQUFRLENBQUM7SUFFcEMsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFtQyxDQUFDLENBQUM7QUFDckUsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbmltcG9ydCB7RU5HSU5FfSBmcm9tICcuLi9lbmdpbmUnO1xuaW1wb3J0IHtBZGROLCBBZGROSW5wdXRzfSBmcm9tICcuLi9rZXJuZWxfbmFtZXMnO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge05hbWVkVGVuc29yTWFwfSBmcm9tICcuLi90ZW5zb3JfdHlwZXMnO1xuaW1wb3J0IHtjb252ZXJ0VG9UZW5zb3J9IGZyb20gJy4uL3RlbnNvcl91dGlsX2Vudic7XG5pbXBvcnQge1RlbnNvckxpa2V9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCB7b3B9IGZyb20gJy4vb3BlcmF0aW9uJztcblxuLyoqXG4gKiBBZGRzIGEgbGlzdCBvZiBgdGYuVGVuc29yYHMgZWxlbWVudC13aXNlLCBlYWNoIHdpdGggdGhlIHNhbWUgc2hhcGUgYW5kIGR0eXBlLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBhID0gdGYudGVuc29yMWQoWzEsIDJdKTtcbiAqIGNvbnN0IGIgPSB0Zi50ZW5zb3IxZChbMywgNF0pO1xuICogY29uc3QgYyA9IHRmLnRlbnNvcjFkKFs1LCA2XSk7XG4gKlxuICogdGYuYWRkTihbYSwgYiwgY10pLnByaW50KCk7XG4gKiBgYGBcbiAqIEBwYXJhbSB0ZW5zb3JzIEEgbGlzdCBvZiB0ZW5zb3JzIHdpdGggdGhlIHNhbWUgc2hhcGUgYW5kIGR0eXBlLlxuICogQGRvYyB7aGVhZGluZzogJ09wZXJhdGlvbnMnLCBzdWJoZWFkaW5nOiAnQXJpdGhtZXRpYyd9XG4gKi9cbmZ1bmN0aW9uIGFkZE5fPFQgZXh0ZW5kcyBUZW5zb3I+KHRlbnNvcnM6IEFycmF5PFR8VGVuc29yTGlrZT4pOiBUIHtcbiAgdXRpbC5hc3NlcnQoXG4gICAgICBBcnJheS5pc0FycmF5KHRlbnNvcnMpLFxuICAgICAgKCkgPT4gJ1RoZSBhcmd1bWVudCBwYXNzZWQgdG8gdGYuYWRkTigpIG11c3QgYmUgYSBsaXN0IG9mIHRlbnNvcnMnKTtcbiAgdXRpbC5hc3NlcnQoXG4gICAgICB0ZW5zb3JzLmxlbmd0aCA+PSAxLFxuICAgICAgKCkgPT4gYE11c3QgcGFzcyBhdCBsZWFzdCBvbmUgdGVuc29yIHRvIHRmLmFkZE4oKSwgYnV0IGdvdCBgICtcbiAgICAgICAgICBgJHt0ZW5zb3JzLmxlbmd0aH1gKTtcblxuICBjb25zdCAkdGVuc29ycyA9XG4gICAgICB0ZW5zb3JzLm1hcCgodCwgaSkgPT4gY29udmVydFRvVGVuc29yKHQsIGB0ZW5zb3JzJHtpfWAsICdhZGROJykpO1xuXG4gIGNvbnN0IGZpcnN0VGVuc29yID0gJHRlbnNvcnNbMF07XG4gICR0ZW5zb3JzLmZvckVhY2godCA9PiB7XG4gICAgaWYgKHQuZHR5cGUgIT09IGZpcnN0VGVuc29yLmR0eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0FsbCB0ZW5zb3JzIHBhc3NlZCB0byB0Zi5hZGROKCkgbXVzdCBoYXZlIHRoZSBzYW1lIGR0eXBlJyk7XG4gICAgfVxuICB9KTtcblxuICAkdGVuc29ycy5mb3JFYWNoKHQgPT4ge1xuICAgIGlmICghdXRpbC5hcnJheXNFcXVhbCh0LnNoYXBlLCBmaXJzdFRlbnNvci5zaGFwZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnQWxsIHRlbnNvcnMgcGFzc2VkIHRvIHRmLmFkZE4oKSBtdXN0IGhhdmUgdGhlIHNhbWUgc2hhcGUnKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IGlucHV0czogQWRkTklucHV0cyA9ICR0ZW5zb3JzO1xuXG4gIHJldHVybiBFTkdJTkUucnVuS2VybmVsKEFkZE4sIGlucHV0cyBhcyB1bmtub3duIGFzIE5hbWVkVGVuc29yTWFwKTtcbn1cblxuZXhwb3J0IGNvbnN0IGFkZE4gPSAvKiBAX19QVVJFX18gKi8gb3Aoe2FkZE5ffSk7XG4iXX0=","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { add } from './add';\nimport { concat } from './concat';\nimport { matMul } from './mat_mul';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { sigmoid } from './sigmoid';\nimport { slice } from './slice';\nimport { tanh } from './tanh';\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\nfunction basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {\n    const $forgetBias = convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n    const $lstmKernel = convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n    const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n    const $data = convertToTensor(data, 'data', 'basicLSTMCell');\n    const $c = convertToTensor(c, 'c', 'basicLSTMCell');\n    const $h = convertToTensor(h, 'h', 'basicLSTMCell');\n    const combined = concat([$data, $h], 1);\n    const weighted = matMul(combined, $lstmKernel);\n    const res = add(weighted, $lstmBias);\n    // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n    const batchSize = res.shape[0];\n    const sliceCols = res.shape[1] / 4;\n    const sliceSize = [batchSize, sliceCols];\n    const i = slice(res, [0, 0], sliceSize);\n    const j = slice(res, [0, sliceCols], sliceSize);\n    const f = slice(res, [0, sliceCols * 2], sliceSize);\n    const o = slice(res, [0, sliceCols * 3], sliceSize);\n    const newC = add(mul(sigmoid(i), tanh(j)), mul($c, sigmoid(add($forgetBias, f))));\n    const newH = mul(tanh(newC), sigmoid(o));\n    return [newC, newH];\n}\nexport const basicLSTMCell = /* @__PURE__ */ op({ basicLSTMCell_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWNfbHN0bV9jZWxsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb3JlL3NyYy9vcHMvYmFzaWNfbHN0bV9jZWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUduRCxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDaEMsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNqQyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNsQyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQzlCLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFFNUI7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gsU0FBUyxjQUFjLENBQ25CLFVBQTZCLEVBQUUsVUFBK0IsRUFDOUQsUUFBNkIsRUFBRSxJQUF5QixFQUN4RCxDQUFzQixFQUFFLENBQXNCO0lBQ2hELE1BQU0sV0FBVyxHQUNiLGVBQWUsQ0FBQyxVQUFVLEVBQUUsWUFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQy9ELE1BQU0sV0FBVyxHQUNiLGVBQWUsQ0FBQyxVQUFVLEVBQUUsWUFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQy9ELE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3pFLE1BQU0sS0FBSyxHQUFHLGVBQWUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzdELE1BQU0sRUFBRSxHQUFHLGVBQWUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sRUFBRSxHQUFHLGVBQWUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBRXBELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4QyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sR0FBRyxHQUFhLEdBQUcsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFL0Msa0VBQWtFO0lBQ2xFLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0IsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkMsTUFBTSxTQUFTLEdBQXFCLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzNELE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDeEMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNoRCxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNwRCxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUVwRCxNQUFNLElBQUksR0FDTixHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDeEIsR0FBRyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBYSxDQUFDLENBQUMsQ0FBQztJQUMzRCxNQUFNLElBQUksR0FBYSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdEIsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUMsY0FBYyxFQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtTY2FsYXIsIFRlbnNvcjFELCBUZW5zb3IyRH0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7Y29udmVydFRvVGVuc29yfSBmcm9tICcuLi90ZW5zb3JfdXRpbF9lbnYnO1xuaW1wb3J0IHtUZW5zb3JMaWtlfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7YWRkfSBmcm9tICcuL2FkZCc7XG5pbXBvcnQge2NvbmNhdH0gZnJvbSAnLi9jb25jYXQnO1xuaW1wb3J0IHttYXRNdWx9IGZyb20gJy4vbWF0X211bCc7XG5pbXBvcnQge211bH0gZnJvbSAnLi9tdWwnO1xuaW1wb3J0IHtvcH0gZnJvbSAnLi9vcGVyYXRpb24nO1xuaW1wb3J0IHtzaWdtb2lkfSBmcm9tICcuL3NpZ21vaWQnO1xuaW1wb3J0IHtzbGljZX0gZnJvbSAnLi9zbGljZSc7XG5pbXBvcnQge3Rhbmh9IGZyb20gJy4vdGFuaCc7XG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIG5leHQgc3RhdGUgYW5kIG91dHB1dCBvZiBhIEJhc2ljTFNUTUNlbGwuXG4gKlxuICogUmV0dXJucyBgW25ld0MsIG5ld0hdYC5cbiAqXG4gKiBEZXJpdmVkIGZyb20gdGYuY29udHJpYi5ybm4uQmFzaWNMU1RNQ2VsbC5cbiAqXG4gKiBAcGFyYW0gZm9yZ2V0QmlhcyBGb3JnZXQgYmlhcyBmb3IgdGhlIGNlbGwuXG4gKiBAcGFyYW0gbHN0bUtlcm5lbCBUaGUgd2VpZ2h0cyBmb3IgdGhlIGNlbGwuXG4gKiBAcGFyYW0gbHN0bUJpYXMgVGhlIGJpYXMgZm9yIHRoZSBjZWxsLlxuICogQHBhcmFtIGRhdGEgVGhlIGlucHV0IHRvIHRoZSBjZWxsLlxuICogQHBhcmFtIGMgUHJldmlvdXMgY2VsbCBzdGF0ZS5cbiAqIEBwYXJhbSBoIFByZXZpb3VzIGNlbGwgb3V0cHV0LlxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdPcGVyYXRpb25zJywgc3ViaGVhZGluZzogJ1JOTid9XG4gKi9cbmZ1bmN0aW9uIGJhc2ljTFNUTUNlbGxfKFxuICAgIGZvcmdldEJpYXM6IFNjYWxhcnxUZW5zb3JMaWtlLCBsc3RtS2VybmVsOiBUZW5zb3IyRHxUZW5zb3JMaWtlLFxuICAgIGxzdG1CaWFzOiBUZW5zb3IxRHxUZW5zb3JMaWtlLCBkYXRhOiBUZW5zb3IyRHxUZW5zb3JMaWtlLFxuICAgIGM6IFRlbnNvcjJEfFRlbnNvckxpa2UsIGg6IFRlbnNvcjJEfFRlbnNvckxpa2UpOiBbVGVuc29yMkQsIFRlbnNvcjJEXSB7XG4gIGNvbnN0ICRmb3JnZXRCaWFzID1cbiAgICAgIGNvbnZlcnRUb1RlbnNvcihmb3JnZXRCaWFzLCAnZm9yZ2V0QmlhcycsICdiYXNpY0xTVE1DZWxsJyk7XG4gIGNvbnN0ICRsc3RtS2VybmVsID1cbiAgICAgIGNvbnZlcnRUb1RlbnNvcihsc3RtS2VybmVsLCAnbHN0bUtlcm5lbCcsICdiYXNpY0xTVE1DZWxsJyk7XG4gIGNvbnN0ICRsc3RtQmlhcyA9IGNvbnZlcnRUb1RlbnNvcihsc3RtQmlhcywgJ2xzdG1CaWFzJywgJ2Jhc2ljTFNUTUNlbGwnKTtcbiAgY29uc3QgJGRhdGEgPSBjb252ZXJ0VG9UZW5zb3IoZGF0YSwgJ2RhdGEnLCAnYmFzaWNMU1RNQ2VsbCcpO1xuICBjb25zdCAkYyA9IGNvbnZlcnRUb1RlbnNvcihjLCAnYycsICdiYXNpY0xTVE1DZWxsJyk7XG4gIGNvbnN0ICRoID0gY29udmVydFRvVGVuc29yKGgsICdoJywgJ2Jhc2ljTFNUTUNlbGwnKTtcblxuICBjb25zdCBjb21iaW5lZCA9IGNvbmNhdChbJGRhdGEsICRoXSwgMSk7XG4gIGNvbnN0IHdlaWdodGVkID0gbWF0TXVsKGNvbWJpbmVkLCAkbHN0bUtlcm5lbCk7XG4gIGNvbnN0IHJlczogVGVuc29yMkQgPSBhZGQod2VpZ2h0ZWQsICRsc3RtQmlhcyk7XG5cbiAgLy8gaSA9IGlucHV0X2dhdGUsIGogPSBuZXdfaW5wdXQsIGYgPSBmb3JnZXRfZ2F0ZSwgbyA9IG91dHB1dF9nYXRlXG4gIGNvbnN0IGJhdGNoU2l6ZSA9IHJlcy5zaGFwZVswXTtcbiAgY29uc3Qgc2xpY2VDb2xzID0gcmVzLnNoYXBlWzFdIC8gNDtcbiAgY29uc3Qgc2xpY2VTaXplOiBbbnVtYmVyLCBudW1iZXJdID0gW2JhdGNoU2l6ZSwgc2xpY2VDb2xzXTtcbiAgY29uc3QgaSA9IHNsaWNlKHJlcywgWzAsIDBdLCBzbGljZVNpemUpO1xuICBjb25zdCBqID0gc2xpY2UocmVzLCBbMCwgc2xpY2VDb2xzXSwgc2xpY2VTaXplKTtcbiAgY29uc3QgZiA9IHNsaWNlKHJlcywgWzAsIHNsaWNlQ29scyAqIDJdLCBzbGljZVNpemUpO1xuICBjb25zdCBvID0gc2xpY2UocmVzLCBbMCwgc2xpY2VDb2xzICogM10sIHNsaWNlU2l6ZSk7XG5cbiAgY29uc3QgbmV3QzogVGVuc29yMkQgPVxuICAgICAgYWRkKG11bChzaWdtb2lkKGkpLCB0YW5oKGopKSxcbiAgICAgICAgICBtdWwoJGMsIHNpZ21vaWQoYWRkKCRmb3JnZXRCaWFzLCBmKSkgYXMgVGVuc29yMkQpKTtcbiAgY29uc3QgbmV3SDogVGVuc29yMkQgPSBtdWwodGFuaChuZXdDKSwgc2lnbW9pZChvKSk7XG4gIHJldHVybiBbbmV3QywgbmV3SF07XG59XG5cbmV4cG9ydCBjb25zdCBiYXNpY0xTVE1DZWxsID0gLyogQF9fUFVSRV9fICovIG9wKHtiYXNpY0xTVE1DZWxsX30pO1xuIl19","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { BitwiseAnd } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { arraysEqual } from '../util_base';\nimport { op } from './operation';\n/**\n * Bitwise `AND` operation for input tensors.\n *\n * Given two input tensors, returns a new tensor\n * with the `AND` calculated values.\n *\n * The method supports int32 values\n *\n *\n * ```js\n * const x = tf.tensor1d([0, 5, 3, 14], 'int32');\n * const y = tf.tensor1d([5, 0, 7, 11], 'int32');\n * tf.bitwiseAnd(x, y).print();\n * ```\n *\n * @param x The input tensor to be calculated.\n * @param y The input tensor to be calculated.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction bitwiseAnd_(x, y) {\n    const $x = convertToTensor(x, 'x', 'bitwiseAnd');\n    const $y = convertToTensor(y, 'y', 'bitwiseAnd');\n    if (!arraysEqual($x.shape, $y.shape)) {\n        throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${$x.shape}, y: ${$y.shape}`);\n    }\n    if ($x.dtype !== 'int32' || $y.dtype !== 'int32') {\n        throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${$x.dtype} and type of y: ${$y.dtype}`);\n    }\n    const inputs = { a: $x, b: $y };\n    return ENGINE.runKernel(BitwiseAnd, inputs);\n}\nexport const bitwiseAnd = /* @__PURE__ */ op({ bitwiseAnd_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml0d2lzZV9hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9iaXR3aXNlX2FuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBQyxVQUFVLEVBQW1CLE1BQU0saUJBQWlCLENBQUM7QUFHN0QsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRW5ELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFekMsT0FBTyxFQUFDLEVBQUUsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUUvQjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUNILFNBQVMsV0FBVyxDQUFpQixDQUFTLEVBQUUsQ0FBUztJQUN2RCxNQUFNLEVBQUUsR0FBRyxlQUFlLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNqRCxNQUFNLEVBQUUsR0FBRyxlQUFlLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUVqRCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0RBQ1osRUFBRSxDQUFDLEtBQUssUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNqQztJQUNELElBQUksRUFBRSxDQUFDLEtBQUssS0FBSyxPQUFPLElBQUksRUFBRSxDQUFDLEtBQUssS0FBSyxPQUFPLEVBQUU7UUFDaEQsTUFBTSxJQUFJLEtBQUssQ0FDWCx3RUFDSSxFQUFFLENBQUMsS0FBSyxtQkFBbUIsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDaEQ7SUFFRCxNQUFNLE1BQU0sR0FBcUIsRUFBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUMsQ0FBQztJQUNoRCxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLE1BQW1DLENBQUMsQ0FBQztBQUMzRSxDQUFDO0FBQ0QsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQy5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge0VOR0lORX0gZnJvbSAnLi4vZW5naW5lJztcbmltcG9ydCB7Qml0d2lzZUFuZCwgQml0d2lzZUFuZElucHV0c30gZnJvbSAnLi4va2VybmVsX25hbWVzJztcbmltcG9ydCB7VGVuc29yfSBmcm9tICcuLi90ZW5zb3InO1xuaW1wb3J0IHtOYW1lZFRlbnNvck1hcH0gZnJvbSAnLi4vdGVuc29yX3R5cGVzJztcbmltcG9ydCB7Y29udmVydFRvVGVuc29yfSBmcm9tICcuLi90ZW5zb3JfdXRpbF9lbnYnO1xuaW1wb3J0IHtSYW5rfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge2FycmF5c0VxdWFsfSBmcm9tICcuLi91dGlsX2Jhc2UnO1xuXG5pbXBvcnQge29wfSBmcm9tICcuL29wZXJhdGlvbic7XG5cbi8qKlxuICogQml0d2lzZSBgQU5EYCBvcGVyYXRpb24gZm9yIGlucHV0IHRlbnNvcnMuXG4gKlxuICogR2l2ZW4gdHdvIGlucHV0IHRlbnNvcnMsIHJldHVybnMgYSBuZXcgdGVuc29yXG4gKiB3aXRoIHRoZSBgQU5EYCBjYWxjdWxhdGVkIHZhbHVlcy5cbiAqXG4gKiBUaGUgbWV0aG9kIHN1cHBvcnRzIGludDMyIHZhbHVlc1xuICpcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgeCA9IHRmLnRlbnNvcjFkKFswLCA1LCAzLCAxNF0sICdpbnQzMicpO1xuICogY29uc3QgeSA9IHRmLnRlbnNvcjFkKFs1LCAwLCA3LCAxMV0sICdpbnQzMicpO1xuICogdGYuYml0d2lzZUFuZCh4LCB5KS5wcmludCgpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHggVGhlIGlucHV0IHRlbnNvciB0byBiZSBjYWxjdWxhdGVkLlxuICogQHBhcmFtIHkgVGhlIGlucHV0IHRlbnNvciB0byBiZSBjYWxjdWxhdGVkLlxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdPcGVyYXRpb25zJywgc3ViaGVhZGluZzogJ0xvZ2ljYWwnfVxuICovXG5mdW5jdGlvbiBiaXR3aXNlQW5kXzxSIGV4dGVuZHMgUmFuaz4oeDogVGVuc29yLCB5OiBUZW5zb3IpOiBUZW5zb3I8Uj4ge1xuICBjb25zdCAkeCA9IGNvbnZlcnRUb1RlbnNvcih4LCAneCcsICdiaXR3aXNlQW5kJyk7XG4gIGNvbnN0ICR5ID0gY29udmVydFRvVGVuc29yKHksICd5JywgJ2JpdHdpc2VBbmQnKTtcblxuICBpZiAoIWFycmF5c0VxdWFsKCR4LnNoYXBlLCAkeS5zaGFwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEJpdHdpc2VBbmQ6IFRlbnNvcnMgbXVzdCBoYXZlIHRoZSBzYW1lIHNoYXBlLiB4OiAke1xuICAgICAgICAkeC5zaGFwZX0sIHk6ICR7JHkuc2hhcGV9YCk7XG4gIH1cbiAgaWYgKCR4LmR0eXBlICE9PSAnaW50MzInIHx8ICR5LmR0eXBlICE9PSAnaW50MzInKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQml0d2lzZUFuZDogT25seSBzdXBwb3J0cyAnaW50MzInIHZhbHVlcyBpbiB0ZW5zb3IsIGZvdW5kIHR5cGUgb2YgeDogJHtcbiAgICAgICAgICAgICR4LmR0eXBlfSBhbmQgdHlwZSBvZiB5OiAkeyR5LmR0eXBlfWApO1xuICB9XG5cbiAgY29uc3QgaW5wdXRzOiBCaXR3aXNlQW5kSW5wdXRzID0ge2E6ICR4LCBiOiAkeX07XG4gIHJldHVybiBFTkdJTkUucnVuS2VybmVsKEJpdHdpc2VBbmQsIGlucHV0cyBhcyB1bmtub3duIGFzIE5hbWVkVGVuc29yTWFwKTtcbn1cbmV4cG9ydCBjb25zdCBiaXR3aXNlQW5kID0gLyogQF9fUFVSRV9fICovIG9wKHtiaXR3aXNlQW5kX30pO1xuIl19","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { BroadcastArgs } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Return the shape of s0 op s1 with broadcast.\n *\n * compute r0, the broadcasted shape as a tensor.\n * s0, s1 and r0 are all integer vectors.\n *\n * This function returns the shape of the result of an operation between\n * two tensors of size s0 and s1 performed with broadcast.\n *\n * @param s0 A tensor representing a shape\n * @param s1 A tensor representing a shape\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction broadcastArgs_(s0, s1) {\n    const shape1Input = convertToTensor(s0, 's0', 'broadcastArgs', 'int32');\n    const shape2Input = convertToTensor(s1, 's1', 'broadcastArgs', 'int32');\n    if (shape1Input.rank !== 1) {\n        throw new Error('broadcastArgs(): first input must be a vector (rank=1). ' +\n            `Has rank ${shape1Input.rank}`);\n    }\n    if (shape2Input.rank !== 1) {\n        throw new Error('broadcastArgs(): second input must be a vector (rank=1). ' +\n            `Has rank ${shape2Input.rank}`);\n    }\n    const inputs = { s0: shape1Input, s1: shape2Input };\n    return ENGINE.runKernel(BroadcastArgs, inputs);\n}\nexport const broadcastArgs = /* @__PURE__ */ op({ broadcastArgs_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvYWRjYXN0X2FyZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9icm9hZGNhc3RfYXJncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxhQUFhLEVBQXVCLE1BQU0saUJBQWlCLENBQUM7QUFFckUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBR3JELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFakM7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUNILFNBQVMsY0FBYyxDQUNyQixFQUF1QixFQUFFLEVBQXVCO0lBQ2hELE1BQU0sV0FBVyxHQUFHLGVBQWUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN4RSxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFeEUsSUFBSSxXQUFXLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRTtRQUMxQixNQUFNLElBQUksS0FBSyxDQUNiLDBEQUEwRDtZQUMxRCxZQUFZLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQ25DO0lBRUQsSUFBSSxXQUFXLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRTtRQUMxQixNQUFNLElBQUksS0FBSyxDQUNiLDJEQUEyRDtZQUMzRCxZQUFZLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQ25DO0lBRUQsTUFBTSxNQUFNLEdBQXdCLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLENBQUM7SUFDekUsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxNQUFtQyxDQUFDLENBQUM7QUFDOUUsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHsgTmFtZWRUZW5zb3JNYXAgfSBmcm9tICcuLi90ZW5zb3JfdHlwZXMnO1xuaW1wb3J0IHsgRU5HSU5FIH0gZnJvbSAnLi4vZW5naW5lJztcbmltcG9ydCB7IEJyb2FkY2FzdEFyZ3MsIEJyb2FkY2FzdEFyZ3NJbnB1dHMgfSBmcm9tICcuLi9rZXJuZWxfbmFtZXMnO1xuaW1wb3J0IHsgVGVuc29yIH0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7IGNvbnZlcnRUb1RlbnNvciB9IGZyb20gJy4uL3RlbnNvcl91dGlsX2Vudic7XG5pbXBvcnQgeyBSYW5rLCBUZW5zb3JMaWtlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQgeyBvcCB9IGZyb20gJy4vb3BlcmF0aW9uJztcblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNoYXBlIG9mIHMwIG9wIHMxIHdpdGggYnJvYWRjYXN0LlxuICpcbiAqIGNvbXB1dGUgcjAsIHRoZSBicm9hZGNhc3RlZCBzaGFwZSBhcyBhIHRlbnNvci5cbiAqIHMwLCBzMSBhbmQgcjAgYXJlIGFsbCBpbnRlZ2VyIHZlY3RvcnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBzaGFwZSBvZiB0aGUgcmVzdWx0IG9mIGFuIG9wZXJhdGlvbiBiZXR3ZWVuXG4gKiB0d28gdGVuc29ycyBvZiBzaXplIHMwIGFuZCBzMSBwZXJmb3JtZWQgd2l0aCBicm9hZGNhc3QuXG4gKlxuICogQHBhcmFtIHMwIEEgdGVuc29yIHJlcHJlc2VudGluZyBhIHNoYXBlXG4gKiBAcGFyYW0gczEgQSB0ZW5zb3IgcmVwcmVzZW50aW5nIGEgc2hhcGVcbiAqXG4gKiBAZG9jIHtoZWFkaW5nOiAnVGVuc29ycycsIHN1YmhlYWRpbmc6ICdUcmFuc2Zvcm1hdGlvbnMnfVxuICovXG5mdW5jdGlvbiBicm9hZGNhc3RBcmdzXzxSIGV4dGVuZHMgUmFuaz4oXG4gIHMwOiBUZW5zb3IgfCBUZW5zb3JMaWtlLCBzMTogVGVuc29yIHwgVGVuc29yTGlrZSk6IFRlbnNvcjxSPiB7XG4gIGNvbnN0IHNoYXBlMUlucHV0ID0gY29udmVydFRvVGVuc29yKHMwLCAnczAnLCAnYnJvYWRjYXN0QXJncycsICdpbnQzMicpO1xuICBjb25zdCBzaGFwZTJJbnB1dCA9IGNvbnZlcnRUb1RlbnNvcihzMSwgJ3MxJywgJ2Jyb2FkY2FzdEFyZ3MnLCAnaW50MzInKTtcblxuICBpZiAoc2hhcGUxSW5wdXQucmFuayAhPT0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdicm9hZGNhc3RBcmdzKCk6IGZpcnN0IGlucHV0IG11c3QgYmUgYSB2ZWN0b3IgKHJhbms9MSkuICcgK1xuICAgICAgYEhhcyByYW5rICR7c2hhcGUxSW5wdXQucmFua31gKTtcbiAgfVxuXG4gIGlmIChzaGFwZTJJbnB1dC5yYW5rICE9PSAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ2Jyb2FkY2FzdEFyZ3MoKTogc2Vjb25kIGlucHV0IG11c3QgYmUgYSB2ZWN0b3IgKHJhbms9MSkuICcgK1xuICAgICAgYEhhcyByYW5rICR7c2hhcGUySW5wdXQucmFua31gKTtcbiAgfVxuXG4gIGNvbnN0IGlucHV0czogQnJvYWRjYXN0QXJnc0lucHV0cyA9IHsgczA6IHNoYXBlMUlucHV0LCBzMTogc2hhcGUySW5wdXQgfTtcbiAgcmV0dXJuIEVOR0lORS5ydW5LZXJuZWwoQnJvYWRjYXN0QXJncywgaW5wdXRzIGFzIHVua25vd24gYXMgTmFtZWRUZW5zb3JNYXApO1xufVxuXG5leHBvcnQgY29uc3QgYnJvYWRjYXN0QXJncyA9IC8qIEBfX1BVUkVfXyAqLyBvcCh7IGJyb2FkY2FzdEFyZ3NfIH0pO1xuIl19","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Diag } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Returns a diagonal tensor with given diagonal values.\n *\n * Given a diagonal, this operation returns a tensor with the diagonal and\n * everything else padded with zeros.\n *\n * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor\n * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * tf.diag(x).print()\n * ```\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [4, 2])\n *\n * tf.diag(x).print()\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction diag_(x) {\n    const $x = convertToTensor(x, 'x', 'diag');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Diag, inputs);\n}\nexport const diag = /* @__PURE__ */ op({ diag_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvb3BzL2RpYWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNqQyxPQUFPLEVBQUMsSUFBSSxFQUFhLE1BQU0saUJBQWlCLENBQUM7QUFHakQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRW5ELE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFFL0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQkc7QUFDSCxTQUFTLEtBQUssQ0FBQyxDQUFTO0lBQ3RCLE1BQU0sRUFBRSxHQUFHLGVBQWUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRTNDLE1BQU0sTUFBTSxHQUFlLEVBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBQyxDQUFDO0lBRW5DLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBbUMsQ0FBQyxDQUFDO0FBQ3JFLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsZUFBZSxDQUFDLEVBQUUsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7RU5HSU5FfSBmcm9tICcuLi9lbmdpbmUnO1xuaW1wb3J0IHtEaWFnLCBEaWFnSW5wdXRzfSBmcm9tICcuLi9rZXJuZWxfbmFtZXMnO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge05hbWVkVGVuc29yTWFwfSBmcm9tICcuLi90ZW5zb3JfdHlwZXMnO1xuaW1wb3J0IHtjb252ZXJ0VG9UZW5zb3J9IGZyb20gJy4uL3RlbnNvcl91dGlsX2Vudic7XG5cbmltcG9ydCB7b3B9IGZyb20gJy4vb3BlcmF0aW9uJztcblxuLyoqXG4gKiBSZXR1cm5zIGEgZGlhZ29uYWwgdGVuc29yIHdpdGggZ2l2ZW4gZGlhZ29uYWwgdmFsdWVzLlxuICpcbiAqIEdpdmVuIGEgZGlhZ29uYWwsIHRoaXMgb3BlcmF0aW9uIHJldHVybnMgYSB0ZW5zb3Igd2l0aCB0aGUgZGlhZ29uYWwgYW5kXG4gKiBldmVyeXRoaW5nIGVsc2UgcGFkZGVkIHdpdGggemVyb3MuXG4gKlxuICogQXNzdW1lIHRoZSBpbnB1dCBoYXMgZGltZW5zaW9ucyBgW0QxLC4uLiwgRGtdYCwgdGhlbiB0aGUgb3V0cHV0IGlzIGEgdGVuc29yXG4gKiBvZiByYW5rIDJrIHdpdGggZGltZW5zaW9ucyBgW0QxLC4uLiwgRGssIEQxLC4uLiwgRGtdYFxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCB4ID0gdGYudGVuc29yMWQoWzEsIDIsIDMsIDRdKTtcbiAqXG4gKiB0Zi5kaWFnKHgpLnByaW50KClcbiAqIGBgYFxuICogYGBganNcbiAqIGNvbnN0IHggPSB0Zi50ZW5zb3IyZChbMSwgMiwgMywgNCwgNSwgNiwgNywgOF0sIFs0LCAyXSlcbiAqXG4gKiB0Zi5kaWFnKHgpLnByaW50KClcbiAqIGBgYFxuICogQHBhcmFtIHggVGhlIGlucHV0IHRlbnNvci5cbiAqXG4gKiBAZG9jIHtoZWFkaW5nOiAnVGVuc29ycycsIHN1YmhlYWRpbmc6ICdDcmVhdGlvbid9XG4gKi9cbmZ1bmN0aW9uIGRpYWdfKHg6IFRlbnNvcik6IFRlbnNvciB7XG4gIGNvbnN0ICR4ID0gY29udmVydFRvVGVuc29yKHgsICd4JywgJ2RpYWcnKTtcblxuICBjb25zdCBpbnB1dHM6IERpYWdJbnB1dHMgPSB7eDogJHh9O1xuXG4gIHJldHVybiBFTkdJTkUucnVuS2VybmVsKERpYWcsIGlucHV0cyBhcyB1bmtub3duIGFzIE5hbWVkVGVuc29yTWFwKTtcbn1cblxuZXhwb3J0IGNvbnN0IGRpYWcgPSAvKiBAX19QVVJFX18gKi8gb3Aoe2RpYWdffSk7XG4iXX0=","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { arraysEqualWithNull } from '../util_base';\nimport { op } from './operation';\n/**\n * Checks the input tensor mathes the given shape.\n *\n * Given an input tensor, returns a new tensor with the same values as the\n * input tensor with shape `shape`.\n *\n * The method supports the null value in tensor. It will still check the shapes,\n * and null is a placeholder.\n *\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const y = tf.tensor1d([1, null, 3, 4]);\n * const z = tf.tensor2d([1, 2, 3, 4], [2,2]);\n * tf.ensureShape(x, [4]).print();\n * tf.ensureShape(y, [4]).print();\n * tf.ensureShape(z, [null, 2]).print();\n * ```\n *\n * @param x The input tensor to be ensured.\n * @param shape A TensorShape representing the shape of this tensor, an array\n *     or null.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction ensureShape_(x, shape) {\n    const $x = convertToTensor(x, 'x', 'ensureShape', 'string_or_numeric');\n    if (!arraysEqualWithNull($x.shape, shape)) {\n        throw new Error(`EnsureShape: Shape of tensor ${$x.shape} is not compatible with expected shape ${shape}`);\n    }\n    return x;\n}\nexport const ensureShape = /* @__PURE__ */ op({ ensureShape_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5zdXJlX3NoYXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb3JlL3NyYy9vcHMvZW5zdXJlX3NoYXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVuRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFakQsT0FBTyxFQUFDLEVBQUUsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUUvQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JHO0FBQ0gsU0FBUyxZQUFZLENBQWlCLENBQVMsRUFBRSxLQUFrQjtJQUNqRSxNQUFNLEVBQUUsR0FBRyxlQUFlLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUN2RSxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRTtRQUN6QyxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUNaLEVBQUUsQ0FBQyxLQUFLLDBDQUEwQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQ2hFO0lBRUQsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBQ0QsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBQyxZQUFZLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQy5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7Y29udmVydFRvVGVuc29yfSBmcm9tICcuLi90ZW5zb3JfdXRpbF9lbnYnO1xuaW1wb3J0IHtSYW5rLCBTaGFwZU1hcH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHthcnJheXNFcXVhbFdpdGhOdWxsfSBmcm9tICcuLi91dGlsX2Jhc2UnO1xuXG5pbXBvcnQge29wfSBmcm9tICcuL29wZXJhdGlvbic7XG5cbi8qKlxuICogQ2hlY2tzIHRoZSBpbnB1dCB0ZW5zb3IgbWF0aGVzIHRoZSBnaXZlbiBzaGFwZS5cbiAqXG4gKiBHaXZlbiBhbiBpbnB1dCB0ZW5zb3IsIHJldHVybnMgYSBuZXcgdGVuc29yIHdpdGggdGhlIHNhbWUgdmFsdWVzIGFzIHRoZVxuICogaW5wdXQgdGVuc29yIHdpdGggc2hhcGUgYHNoYXBlYC5cbiAqXG4gKiBUaGUgbWV0aG9kIHN1cHBvcnRzIHRoZSBudWxsIHZhbHVlIGluIHRlbnNvci4gSXQgd2lsbCBzdGlsbCBjaGVjayB0aGUgc2hhcGVzLFxuICogYW5kIG51bGwgaXMgYSBwbGFjZWhvbGRlci5cbiAqXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHggPSB0Zi50ZW5zb3IxZChbMSwgMiwgMywgNF0pO1xuICogY29uc3QgeSA9IHRmLnRlbnNvcjFkKFsxLCBudWxsLCAzLCA0XSk7XG4gKiBjb25zdCB6ID0gdGYudGVuc29yMmQoWzEsIDIsIDMsIDRdLCBbMiwyXSk7XG4gKiB0Zi5lbnN1cmVTaGFwZSh4LCBbNF0pLnByaW50KCk7XG4gKiB0Zi5lbnN1cmVTaGFwZSh5LCBbNF0pLnByaW50KCk7XG4gKiB0Zi5lbnN1cmVTaGFwZSh6LCBbbnVsbCwgMl0pLnByaW50KCk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0geCBUaGUgaW5wdXQgdGVuc29yIHRvIGJlIGVuc3VyZWQuXG4gKiBAcGFyYW0gc2hhcGUgQSBUZW5zb3JTaGFwZSByZXByZXNlbnRpbmcgdGhlIHNoYXBlIG9mIHRoaXMgdGVuc29yLCBhbiBhcnJheVxuICogICAgIG9yIG51bGwuXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ1RlbnNvcnMnLCBzdWJoZWFkaW5nOiAnVHJhbnNmb3JtYXRpb25zJ31cbiAqL1xuZnVuY3Rpb24gZW5zdXJlU2hhcGVfPFIgZXh0ZW5kcyBSYW5rPih4OiBUZW5zb3IsIHNoYXBlOiBTaGFwZU1hcFtSXSk6IFRlbnNvciB7XG4gIGNvbnN0ICR4ID0gY29udmVydFRvVGVuc29yKHgsICd4JywgJ2Vuc3VyZVNoYXBlJywgJ3N0cmluZ19vcl9udW1lcmljJyk7XG4gIGlmICghYXJyYXlzRXF1YWxXaXRoTnVsbCgkeC5zaGFwZSwgc2hhcGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFbnN1cmVTaGFwZTogU2hhcGUgb2YgdGVuc29yICR7XG4gICAgICAgICR4LnNoYXBlfSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGV4cGVjdGVkIHNoYXBlICR7c2hhcGV9YCk7XG4gIH1cblxuICByZXR1cm4geDtcbn1cbmV4cG9ydCBjb25zdCBlbnN1cmVTaGFwZSA9IC8qIEBfX1BVUkVfXyAqLyBvcCh7ZW5zdXJlU2hhcGVffSk7XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LinSpace } from '../kernel_names';\n/**\n * Return an evenly spaced sequence of numbers over the given interval.\n *\n * ```js\n * tf.linspace(0, 9, 10).print();\n * ```\n * @param start The start value of the sequence.\n * @param stop The end value of the sequence.\n * @param num The number of values to generate.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function linspace(start, stop, num) {\n    if (num <= 0) {\n        throw new Error('The number of values should be positive.');\n    }\n    const attrs = { start, stop, num };\n    return ENGINE.runKernel(LinSpace, {}, attrs);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluc3BhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9saW5zcGFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBQyxRQUFRLEVBQWdCLE1BQU0saUJBQWlCLENBQUM7QUFJeEQ7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxNQUFNLFVBQVUsUUFBUSxDQUFDLEtBQWEsRUFBRSxJQUFZLEVBQUUsR0FBVztJQUMvRCxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUU7UUFDWixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7S0FDN0Q7SUFFRCxNQUFNLEtBQUssR0FBa0IsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBQyxDQUFDO0lBQ2hELE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLEtBQWdDLENBQUMsQ0FBQztBQUMxRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge0VOR0lORX0gZnJvbSAnLi4vZW5naW5lJztcbmltcG9ydCB7TGluU3BhY2UsIExpblNwYWNlQXR0cnN9IGZyb20gJy4uL2tlcm5lbF9uYW1lcyc7XG5pbXBvcnQge05hbWVkQXR0ck1hcH0gZnJvbSAnLi4va2VybmVsX3JlZ2lzdHJ5JztcbmltcG9ydCB7VGVuc29yMUR9IGZyb20gJy4uL3RlbnNvcic7XG5cbi8qKlxuICogUmV0dXJuIGFuIGV2ZW5seSBzcGFjZWQgc2VxdWVuY2Ugb2YgbnVtYmVycyBvdmVyIHRoZSBnaXZlbiBpbnRlcnZhbC5cbiAqXG4gKiBgYGBqc1xuICogdGYubGluc3BhY2UoMCwgOSwgMTApLnByaW50KCk7XG4gKiBgYGBcbiAqIEBwYXJhbSBzdGFydCBUaGUgc3RhcnQgdmFsdWUgb2YgdGhlIHNlcXVlbmNlLlxuICogQHBhcmFtIHN0b3AgVGhlIGVuZCB2YWx1ZSBvZiB0aGUgc2VxdWVuY2UuXG4gKiBAcGFyYW0gbnVtIFRoZSBudW1iZXIgb2YgdmFsdWVzIHRvIGdlbmVyYXRlLlxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdUZW5zb3JzJywgc3ViaGVhZGluZzogJ0NyZWF0aW9uJ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpbnNwYWNlKHN0YXJ0OiBudW1iZXIsIHN0b3A6IG51bWJlciwgbnVtOiBudW1iZXIpOiBUZW5zb3IxRCB7XG4gIGlmIChudW0gPD0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIG51bWJlciBvZiB2YWx1ZXMgc2hvdWxkIGJlIHBvc2l0aXZlLicpO1xuICB9XG5cbiAgY29uc3QgYXR0cnM6IExpblNwYWNlQXR0cnMgPSB7c3RhcnQsIHN0b3AsIG51bX07XG4gIHJldHVybiBFTkdJTkUucnVuS2VybmVsKExpblNwYWNlLCB7fSwgYXR0cnMgYXMgdW5rbm93biBhcyBOYW1lZEF0dHJNYXApO1xufVxuIl19","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SearchSorted } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { sizeFromShape } from '../util_base';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nconst INT32_MAX = 2147483648;\n/**\n * Searches for where a value would go in a sorted sequence.\n *\n * This is not a method for checking containment (like javascript in).\n *\n * The typical use case for this operation is \"binning\", \"bucketing\", or\n * \"discretizing\". The values are assigned to bucket-indices based on the edges\n * listed in 'sortedSequence'. This operation returns the bucket-index for each\n * value.\n *\n * The side argument controls which index is returned if a value lands exactly\n * on an edge.\n *\n * The axis is not settable for this operation. It always operates on the\n * innermost dimension (axis=-1). The operation will accept any number of outer\n * dimensions.\n *\n * Note: This operation assumes that 'sortedSequence' is sorted along the\n * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not\n * sorted no error is raised and the content of the returned tensor is not well\n * defined.\n *\n * ```js\n * const edges = tf.tensor1d([-1, 3.3, 9.1, 10.0]);\n * let values = tf.tensor1d([0.0, 4.1, 12.0]);\n * const result1 = tf.searchSorted(edges, values, 'left');\n * result1.print(); // [1, 2, 4]\n *\n * const seq = tf.tensor1d([0, 3, 9, 10, 10]);\n * values = tf.tensor1d([0, 4, 10]);\n * const result2 = tf.searchSorted(seq, values, 'left');\n * result2.print(); // [0, 2, 3]\n * const result3 = tf.searchSorted(seq, values, 'right');\n * result3.print(); // [1, 2, 5]\n *\n * const sortedSequence = tf.tensor2d([[0., 3., 8., 9., 10.],\n *                                     [1., 2., 3., 4., 5.]]);\n * values = tf.tensor2d([[9.8, 2.1, 4.3],\n *                       [0.1, 6.6, 4.5, ]]);\n * const result4 = tf.searchSorted(sortedSequence, values, 'left');\n * result4.print(); // [[4, 1, 2], [0, 5, 4]]\n * ```\n * @param sortedSequence: N-D. Sorted sequence.\n * @param values: N-D. Search values.\n * @param side: 'left'|'right'. Defaults to 'left'. 'left' corresponds to lower\n *     bound and 'right' to upper bound.\n * @return An N-D int32 tensor the size of values containing the result of\n *     applying either lower bound or upper bound (depending on side) to each\n *     value. The result is not a global index to the entire Tensor, but the\n *     index in the last dimension.\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nfunction searchSorted_(sortedSequence, values, side = 'left') {\n    const $sortedSequence = convertToTensor(sortedSequence, 'sortedSequence', 'searchSorted');\n    const $values = convertToTensor(values, 'values', 'searchSorted');\n    const sequenceSize = $sortedSequence.shape[$sortedSequence.shape.length - 1];\n    const valuesSize = $values.shape[$values.shape.length - 1];\n    const $sortedSequence2D = reshape($sortedSequence, [-1, sequenceSize]);\n    const $values2D = reshape($values, [-1, valuesSize]);\n    if ($sortedSequence2D.rank < 2) {\n        throw new Error(`Sorted input argument must be at least 2-dimensional`);\n    }\n    if ($sortedSequence2D.shape[0] !== $values2D.shape[0]) {\n        throw new Error(`Leading dimension of 'sortedSequence' and 'values' must match.`);\n    }\n    if (sizeFromShape($values2D.shape) >= INT32_MAX) {\n        throw new Error(`values tensor size must less than ${INT32_MAX}`);\n    }\n    if ($sortedSequence2D.shape[1] >= INT32_MAX) {\n        throw new Error(`trailing dim_size must less than ${INT32_MAX} for int32 output type, was ${$sortedSequence2D.shape[1]}`);\n    }\n    const inputs = {\n        sortedSequence: $sortedSequence2D,\n        values: $values2D,\n    };\n    const attrs = { side };\n    return ENGINE.runKernel(SearchSorted, inputs, attrs);\n}\nexport const searchSorted = /* @__PURE__ */ op({ searchSorted_ });\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { searchSorted } from './search_sorted';\n/**\n * Searches for where a value would go in a sorted sequence.\n *\n * This is not a method for checking containment (like javascript in).\n *\n * The typical use case for this operation is \"binning\", \"bucketing\", or\n * \"discretizing\". The values are assigned to bucket-indices based on the edges\n * listed in 'sortedSequence'. This operation returns the bucket-index for each\n * value.\n *\n * The index returned corresponds to the first edge greater than or equal to the\n * value.\n *\n * The axis is not settable for this operation. It always operates on the\n * innermost dimension (axis=-1). The operation will accept any number of outer\n * dimensions.\n *\n * Note: This operation assumes that 'lowerBound' is sorted along the\n * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not\n * sorted no error is raised and the content of the returned tensor is not well\n * defined.\n *\n * ```js\n * const edges = tf.tensor1d([-1, 3.3, 9.1, 10.0]);\n * let values = tf.tensor1d([0.0, 4.1, 12.0]);\n * const result1 = tf.lowerBound(edges, values);\n * result1.print(); // [1, 2, 4]\n *\n * const seq = tf.tensor1d([0, 3, 9, 10, 10]);\n * values = tf.tensor1d([0, 4, 10]);\n * const result2 = tf.lowerBound(seq, values);\n * result2.print(); // [0, 2, 3]\n *\n * const sortedSequence = tf.tensor2d([[0., 3., 8., 9., 10.],\n *                                     [1., 2., 3., 4., 5.]]);\n * values = tf.tensor2d([[9.8, 2.1, 4.3],\n *                       [0.1, 6.6, 4.5, ]]);\n * const result3 = tf.lowerBound(sortedSequence, values);\n * result3.print(); // [[4, 1, 2], [0, 5, 4]]\n * ```\n * @param sortedSequence: N-D. Sorted sequence.\n * @param values: N-D. Search values.\n * @return An N-D int32 tensor the size of values containing the result of\n *     applying lower bound to each value. The result is not a global index to\n *     the entire Tensor, but the index in the last dimension.\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nexport function lowerBound(sortedSequence, values) {\n    return searchSorted(sortedSequence, values, 'left');\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG93ZXJfYm91bmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9sb3dlcl9ib3VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFJSCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFFN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E4Q0c7QUFDSCxNQUFNLFVBQVUsVUFBVSxDQUN0QixjQUFpQyxFQUFFLE1BQXlCO0lBQzlELE9BQU8sWUFBWSxDQUFDLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge1RlbnNvckxpa2V9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7c2VhcmNoU29ydGVkfSBmcm9tICcuL3NlYXJjaF9zb3J0ZWQnO1xuXG4vKipcbiAqIFNlYXJjaGVzIGZvciB3aGVyZSBhIHZhbHVlIHdvdWxkIGdvIGluIGEgc29ydGVkIHNlcXVlbmNlLlxuICpcbiAqIFRoaXMgaXMgbm90IGEgbWV0aG9kIGZvciBjaGVja2luZyBjb250YWlubWVudCAobGlrZSBqYXZhc2NyaXB0IGluKS5cbiAqXG4gKiBUaGUgdHlwaWNhbCB1c2UgY2FzZSBmb3IgdGhpcyBvcGVyYXRpb24gaXMgXCJiaW5uaW5nXCIsIFwiYnVja2V0aW5nXCIsIG9yXG4gKiBcImRpc2NyZXRpemluZ1wiLiBUaGUgdmFsdWVzIGFyZSBhc3NpZ25lZCB0byBidWNrZXQtaW5kaWNlcyBiYXNlZCBvbiB0aGUgZWRnZXNcbiAqIGxpc3RlZCBpbiAnc29ydGVkU2VxdWVuY2UnLiBUaGlzIG9wZXJhdGlvbiByZXR1cm5zIHRoZSBidWNrZXQtaW5kZXggZm9yIGVhY2hcbiAqIHZhbHVlLlxuICpcbiAqIFRoZSBpbmRleCByZXR1cm5lZCBjb3JyZXNwb25kcyB0byB0aGUgZmlyc3QgZWRnZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlXG4gKiB2YWx1ZS5cbiAqXG4gKiBUaGUgYXhpcyBpcyBub3Qgc2V0dGFibGUgZm9yIHRoaXMgb3BlcmF0aW9uLiBJdCBhbHdheXMgb3BlcmF0ZXMgb24gdGhlXG4gKiBpbm5lcm1vc3QgZGltZW5zaW9uIChheGlzPS0xKS4gVGhlIG9wZXJhdGlvbiB3aWxsIGFjY2VwdCBhbnkgbnVtYmVyIG9mIG91dGVyXG4gKiBkaW1lbnNpb25zLlxuICpcbiAqIE5vdGU6IFRoaXMgb3BlcmF0aW9uIGFzc3VtZXMgdGhhdCAnbG93ZXJCb3VuZCcgaXMgc29ydGVkIGFsb25nIHRoZVxuICogaW5uZXJtb3N0IGF4aXMsIG1heWJlIHVzaW5nICdzb3J0KC4uLiwgYXhpcz0tMSknLiBJZiB0aGUgc2VxdWVuY2UgaXMgbm90XG4gKiBzb3J0ZWQgbm8gZXJyb3IgaXMgcmFpc2VkIGFuZCB0aGUgY29udGVudCBvZiB0aGUgcmV0dXJuZWQgdGVuc29yIGlzIG5vdCB3ZWxsXG4gKiBkZWZpbmVkLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBlZGdlcyA9IHRmLnRlbnNvcjFkKFstMSwgMy4zLCA5LjEsIDEwLjBdKTtcbiAqIGxldCB2YWx1ZXMgPSB0Zi50ZW5zb3IxZChbMC4wLCA0LjEsIDEyLjBdKTtcbiAqIGNvbnN0IHJlc3VsdDEgPSB0Zi5sb3dlckJvdW5kKGVkZ2VzLCB2YWx1ZXMpO1xuICogcmVzdWx0MS5wcmludCgpOyAvLyBbMSwgMiwgNF1cbiAqXG4gKiBjb25zdCBzZXEgPSB0Zi50ZW5zb3IxZChbMCwgMywgOSwgMTAsIDEwXSk7XG4gKiB2YWx1ZXMgPSB0Zi50ZW5zb3IxZChbMCwgNCwgMTBdKTtcbiAqIGNvbnN0IHJlc3VsdDIgPSB0Zi5sb3dlckJvdW5kKHNlcSwgdmFsdWVzKTtcbiAqIHJlc3VsdDIucHJpbnQoKTsgLy8gWzAsIDIsIDNdXG4gKlxuICogY29uc3Qgc29ydGVkU2VxdWVuY2UgPSB0Zi50ZW5zb3IyZChbWzAuLCAzLiwgOC4sIDkuLCAxMC5dLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWzEuLCAyLiwgMy4sIDQuLCA1Ll1dKTtcbiAqIHZhbHVlcyA9IHRmLnRlbnNvcjJkKFtbOS44LCAyLjEsIDQuM10sXG4gKiAgICAgICAgICAgICAgICAgICAgICAgWzAuMSwgNi42LCA0LjUsIF1dKTtcbiAqIGNvbnN0IHJlc3VsdDMgPSB0Zi5sb3dlckJvdW5kKHNvcnRlZFNlcXVlbmNlLCB2YWx1ZXMpO1xuICogcmVzdWx0My5wcmludCgpOyAvLyBbWzQsIDEsIDJdLCBbMCwgNSwgNF1dXG4gKiBgYGBcbiAqIEBwYXJhbSBzb3J0ZWRTZXF1ZW5jZTogTi1ELiBTb3J0ZWQgc2VxdWVuY2UuXG4gKiBAcGFyYW0gdmFsdWVzOiBOLUQuIFNlYXJjaCB2YWx1ZXMuXG4gKiBAcmV0dXJuIEFuIE4tRCBpbnQzMiB0ZW5zb3IgdGhlIHNpemUgb2YgdmFsdWVzIGNvbnRhaW5pbmcgdGhlIHJlc3VsdCBvZlxuICogICAgIGFwcGx5aW5nIGxvd2VyIGJvdW5kIHRvIGVhY2ggdmFsdWUuIFRoZSByZXN1bHQgaXMgbm90IGEgZ2xvYmFsIGluZGV4IHRvXG4gKiAgICAgdGhlIGVudGlyZSBUZW5zb3IsIGJ1dCB0aGUgaW5kZXggaW4gdGhlIGxhc3QgZGltZW5zaW9uLlxuICogQGRvYyB7aGVhZGluZzogJ09wZXJhdGlvbnMnLCBzdWJoZWFkaW5nOiAnRXZhbHVhdGlvbid9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb3dlckJvdW5kKFxuICAgIHNvcnRlZFNlcXVlbmNlOiBUZW5zb3J8VGVuc29yTGlrZSwgdmFsdWVzOiBUZW5zb3J8VGVuc29yTGlrZSk6IFRlbnNvciB7XG4gIHJldHVybiBzZWFyY2hTb3J0ZWQoc29ydGVkU2VxdWVuY2UsIHZhbHVlcywgJ2xlZnQnKTtcbn1cbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MaxPoolWithArgmax } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the 2D max pooling of an image with Argmax index.\n * The indices in argmax are flattened, so that a maximum value at position `[b,\n * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if\n * include_batch_in_index is False; `((b * height + y) * width + x) * channels\n * +c` if include_batch_in_index is True.\n *\n * The indices returned are always in `[0, height) x [0, width)` before\n * flattening.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param includeBatchIndex Defaults to False. Whether to include batch\n *    dimension in flattened index of argmax.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction maxPoolWithArgmax_(x, filterSize, strides, pad, includeBatchInIndex = false) {\n    const $x = convertToTensor(x, 'x', 'maxPoolWithArgmax');\n    const inputs = { x: $x };\n    const attrs = { filterSize, strides, pad, includeBatchInIndex };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const result = ENGINE.runKernel(MaxPoolWithArgmax, inputs, attrs);\n    return { result: result[0], indexes: result[1] };\n}\nexport const maxPoolWithArgmax = /* @__PURE__ */ op({ maxPoolWithArgmax_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4X3Bvb2xfd2l0aF9hcmdtYXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9tYXhfcG9vbF93aXRoX2FyZ21heC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBQyxpQkFBaUIsRUFBa0QsTUFBTSxpQkFBaUIsQ0FBQztBQUluRyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFHbkQsT0FBTyxFQUFDLEVBQUUsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUUvQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQ0c7QUFDSCxTQUFTLGtCQUFrQixDQUN2QixDQUFlLEVBQUUsVUFBbUMsRUFDcEQsT0FBZ0MsRUFBRSxHQUEwQixFQUM1RCxtQkFBbUIsR0FBRyxLQUFLO0lBQzdCLE1BQU0sRUFBRSxHQUFHLGVBQWUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFFeEQsTUFBTSxNQUFNLEdBQTRCLEVBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBQyxDQUFDO0lBQ2hELE1BQU0sS0FBSyxHQUNrQixFQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLG1CQUFtQixFQUFDLENBQUM7SUFFN0UsMERBQTBEO0lBQzFELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQ1osaUJBQWlCLEVBQUUsTUFBbUMsRUFDdEQsS0FBZ0MsQ0FBYSxDQUFDO0lBRWpFLE9BQU8sRUFBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQztBQUNqRCxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsZUFBZSxDQUFDLEVBQUUsQ0FBQyxFQUFDLGtCQUFrQixFQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtFTkdJTkV9IGZyb20gJy4uL2VuZ2luZSc7XG5pbXBvcnQge01heFBvb2xXaXRoQXJnbWF4LCBNYXhQb29sV2l0aEFyZ21heEF0dHJzLCBNYXhQb29sV2l0aEFyZ21heElucHV0c30gZnJvbSAnLi4va2VybmVsX25hbWVzJztcbmltcG9ydCB7TmFtZWRBdHRyTWFwfSBmcm9tICcuLi9rZXJuZWxfcmVnaXN0cnknO1xuaW1wb3J0IHtUZW5zb3IsIFRlbnNvcjREfSBmcm9tICcuLi90ZW5zb3InO1xuaW1wb3J0IHtOYW1lZFRlbnNvck1hcH0gZnJvbSAnLi4vdGVuc29yX3R5cGVzJztcbmltcG9ydCB7Y29udmVydFRvVGVuc29yfSBmcm9tICcuLi90ZW5zb3JfdXRpbF9lbnYnO1xuaW1wb3J0IHtUZW5zb3JMaWtlfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7b3B9IGZyb20gJy4vb3BlcmF0aW9uJztcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgMkQgbWF4IHBvb2xpbmcgb2YgYW4gaW1hZ2Ugd2l0aCBBcmdtYXggaW5kZXguXG4gKiBUaGUgaW5kaWNlcyBpbiBhcmdtYXggYXJlIGZsYXR0ZW5lZCwgc28gdGhhdCBhIG1heGltdW0gdmFsdWUgYXQgcG9zaXRpb24gYFtiLFxuICogeSwgeCwgY11gIGJlY29tZXMgZmxhdHRlbmVkIGluZGV4OiBgKHkgKiB3aWR0aCArIHgpICogY2hhbm5lbHMgKyBjYCBpZlxuICogaW5jbHVkZV9iYXRjaF9pbl9pbmRleCBpcyBGYWxzZTsgYCgoYiAqIGhlaWdodCArIHkpICogd2lkdGggKyB4KSAqIGNoYW5uZWxzXG4gKiArY2AgaWYgaW5jbHVkZV9iYXRjaF9pbl9pbmRleCBpcyBUcnVlLlxuICpcbiAqIFRoZSBpbmRpY2VzIHJldHVybmVkIGFyZSBhbHdheXMgaW4gYFswLCBoZWlnaHQpIHggWzAsIHdpZHRoKWAgYmVmb3JlXG4gKiBmbGF0dGVuaW5nLlxuICpcbiAqIEBwYXJhbSB4IFRoZSBpbnB1dCB0ZW5zb3IsIG9mIHJhbmsgNCBvciByYW5rIDMgb2Ygc2hhcGVcbiAqICAgICBgW2JhdGNoLCBoZWlnaHQsIHdpZHRoLCBpbkNoYW5uZWxzXWAuIElmIHJhbmsgMywgYmF0Y2ggb2YgMSBpcyBhc3N1bWVkLlxuICogQHBhcmFtIGZpbHRlclNpemUgVGhlIGZpbHRlciBzaXplOiBgW2ZpbHRlckhlaWdodCwgZmlsdGVyV2lkdGhdYC4gSWZcbiAqICAgICBgZmlsdGVyU2l6ZWAgaXMgYSBzaW5nbGUgbnVtYmVyLCB0aGVuIGBmaWx0ZXJIZWlnaHQgPT0gZmlsdGVyV2lkdGhgLlxuICogQHBhcmFtIHN0cmlkZXMgVGhlIHN0cmlkZXMgb2YgdGhlIHBvb2xpbmc6IGBbc3RyaWRlSGVpZ2h0LCBzdHJpZGVXaWR0aF1gLiBJZlxuICogICAgIGBzdHJpZGVzYCBpcyBhIHNpbmdsZSBudW1iZXIsIHRoZW4gYHN0cmlkZUhlaWdodCA9PSBzdHJpZGVXaWR0aGAuXG4gKiBAcGFyYW0gZGF0YUZvcm1hdCBBbiBvcHRpb25hbCBzdHJpbmcgZnJvbTogXCJOREhXQ1wiLCBcIk5DREhXXCIuIERlZmF1bHRzIHRvXG4gKiAgICAgXCJOREhXQ1wiLiBTcGVjaWZ5IHRoZSBkYXRhIGZvcm1hdCBvZiB0aGUgaW5wdXQgYW5kIG91dHB1dCBkYXRhLiBXaXRoIHRoZVxuICogICAgIGRlZmF1bHQgZm9ybWF0IFwiTkRIV0NcIiwgdGhlIGRhdGEgaXMgc3RvcmVkIGluIHRoZSBvcmRlciBvZjogW2JhdGNoLFxuICogICAgIGRlcHRoLCBoZWlnaHQsIHdpZHRoLCBjaGFubmVsc10uIE9ubHkgXCJOREhXQ1wiIGlzIGN1cnJlbnRseSBzdXBwb3J0ZWQuXG4gKiBAcGFyYW0gcGFkIFRoZSB0eXBlIG9mIHBhZGRpbmcgYWxnb3JpdGhtLlxuICogICAgLSBgc2FtZWAgYW5kIHN0cmlkZSAxOiBvdXRwdXQgd2lsbCBiZSBvZiBzYW1lIHNpemUgYXMgaW5wdXQsXG4gKiAgICAgICByZWdhcmRsZXNzIG9mIGZpbHRlciBzaXplLlxuICogICAgLSBgdmFsaWRgOiBvdXRwdXQgd2lsbCBiZSBzbWFsbGVyIHRoYW4gaW5wdXQgaWYgZmlsdGVyIGlzIGxhcmdlclxuICogICAgICAgdGhhbiAxeDEuXG4gKiAgICAtIEZvciBtb3JlIGluZm8sIHNlZSB0aGlzIGd1aWRlOlxuICogICAgIFtodHRwczovL3d3dy50ZW5zb3JmbG93Lm9yZy9hcGlfZG9jcy9weXRob24vdGYvbm4vY29udm9sdXRpb25dKFxuICogICAgICAgICAgaHR0cHM6Ly93d3cudGVuc29yZmxvdy5vcmcvYXBpX2RvY3MvcHl0aG9uL3RmL25uL2NvbnZvbHV0aW9uKVxuICogQHBhcmFtIGluY2x1ZGVCYXRjaEluZGV4IERlZmF1bHRzIHRvIEZhbHNlLiBXaGV0aGVyIHRvIGluY2x1ZGUgYmF0Y2hcbiAqICAgIGRpbWVuc2lvbiBpbiBmbGF0dGVuZWQgaW5kZXggb2YgYXJnbWF4LlxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdPcGVyYXRpb25zJywgc3ViaGVhZGluZzogJ0NvbnZvbHV0aW9uJ31cbiAqL1xuZnVuY3Rpb24gbWF4UG9vbFdpdGhBcmdtYXhfPFQgZXh0ZW5kcyBUZW5zb3I0RD4oXG4gICAgeDogVHxUZW5zb3JMaWtlLCBmaWx0ZXJTaXplOiBbbnVtYmVyLCBudW1iZXJdfG51bWJlcixcbiAgICBzdHJpZGVzOiBbbnVtYmVyLCBudW1iZXJdfG51bWJlciwgcGFkOiAndmFsaWQnfCdzYW1lJ3xudW1iZXIsXG4gICAgaW5jbHVkZUJhdGNoSW5JbmRleCA9IGZhbHNlKTogTmFtZWRUZW5zb3JNYXAge1xuICBjb25zdCAkeCA9IGNvbnZlcnRUb1RlbnNvcih4LCAneCcsICdtYXhQb29sV2l0aEFyZ21heCcpO1xuXG4gIGNvbnN0IGlucHV0czogTWF4UG9vbFdpdGhBcmdtYXhJbnB1dHMgPSB7eDogJHh9O1xuICBjb25zdCBhdHRyczpcbiAgICAgIE1heFBvb2xXaXRoQXJnbWF4QXR0cnMgPSB7ZmlsdGVyU2l6ZSwgc3RyaWRlcywgcGFkLCBpbmNsdWRlQmF0Y2hJbkluZGV4fTtcblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXVubmVjZXNzYXJ5LXR5cGUtYXNzZXJ0aW9uXG4gIGNvbnN0IHJlc3VsdCA9IEVOR0lORS5ydW5LZXJuZWwoXG4gICAgICAgICAgICAgICAgICAgICBNYXhQb29sV2l0aEFyZ21heCwgaW5wdXRzIGFzIHVua25vd24gYXMgTmFtZWRUZW5zb3JNYXAsXG4gICAgICAgICAgICAgICAgICAgICBhdHRycyBhcyB1bmtub3duIGFzIE5hbWVkQXR0ck1hcCkgYXMgVGVuc29yW107XG5cbiAgcmV0dXJuIHtyZXN1bHQ6IHJlc3VsdFswXSwgaW5kZXhlczogcmVzdWx0WzFdfTtcbn1cblxuZXhwb3J0IGNvbnN0IG1heFBvb2xXaXRoQXJnbWF4ID0gLyogQF9fUFVSRV9fICovIG9wKHttYXhQb29sV2l0aEFyZ21heF99KTtcbiJdfQ==","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { matMul } from './mat_mul';\nimport { ones } from './ones';\nimport { reshape } from './reshape';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { sizeFromShape } from '../util_base';\n/**\n * Broadcasts parameters for evaluation on an N-D grid.\n *\n * Given N one-dimensional coordinate arrays `*args`, returns a list `outputs`\n * of N-D coordinate arrays for evaluating expressions on an N-D grid.\n *\n * Notes:\n * `meshgrid` supports cartesian ('xy') and matrix ('ij') indexing conventions.\n * When the `indexing` argument is set to 'xy' (the default), the broadcasting\n * instructions for the first two dimensions are swapped.\n * Examples:\n * Calling `const [X, Y] = meshgrid(x, y)` with the tensors\n *\n * ```javascript\n * const x = [1, 2, 3];\n * const y = [4, 5, 6];\n * const [X, Y] = tf.meshgrid(x, y);\n * // X = [[1, 2, 3],\n * //      [1, 2, 3],\n * //      [1, 2, 3]]\n * // Y = [[4, 4, 4],\n * //      [5, 5, 5],\n * //      [6, 6, 6]]\n * ```\n *\n * @param x Tensor with rank geq 1.\n * @param y Tensor with rank geq 1.\n * @param indexing\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nexport function meshgrid(x, y, { indexing = 'xy' } = {}) {\n    if (indexing !== 'xy' && indexing !== 'ij') {\n        throw new TypeError(`${indexing} is not a valid third argument to meshgrid`);\n    }\n    if (x === undefined) {\n        return [];\n    }\n    let $x = convertToTensor(x, 'x', 'meshgrid', x instanceof Tensor ? x.dtype : 'float32');\n    if (y === undefined) {\n        return [$x];\n    }\n    let $y = convertToTensor(y, 'y', 'meshgrid', y instanceof Tensor ? y.dtype : 'float32');\n    const w = sizeFromShape($x.shape);\n    const h = sizeFromShape($y.shape);\n    if (indexing === 'xy') {\n        $x = reshape($x, [1, -1]);\n        $y = reshape($y, [-1, 1]);\n        return [\n            matMul(ones([h, 1], $x.dtype), $x),\n            matMul($y, ones([1, w], $y.dtype)),\n        ];\n    }\n    $x = reshape($x, [-1, 1]);\n    $y = reshape($y, [1, -1]);\n    return [\n        matMul($x, ones([1, h], $x.dtype)),\n        matMul(ones([w, 1], $y.dtype), $y),\n    ];\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzaGdyaWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9tZXNoZ3JpZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNsQyxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVuRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBRTNDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E4Qkc7QUFDSCxNQUFNLFVBQVUsUUFBUSxDQUNwQixDQUFnQixFQUFFLENBQWdCLEVBQUUsRUFBQyxRQUFRLEdBQUcsSUFBSSxFQUFDLEdBQUcsRUFBRTtJQUM1RCxJQUFJLFFBQVEsS0FBSyxJQUFJLElBQUksUUFBUSxLQUFLLElBQUksRUFBRTtRQUMxQyxNQUFNLElBQUksU0FBUyxDQUNmLEdBQUcsUUFBUSw0Q0FBNEMsQ0FBQyxDQUFDO0tBQzlEO0lBQ0QsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO1FBQ25CLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFDRCxJQUFJLEVBQUUsR0FBRyxlQUFlLENBQ3BCLENBQUMsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLENBQUMsWUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRW5FLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtRQUNuQixPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDYjtJQUNELElBQUksRUFBRSxHQUFHLGVBQWUsQ0FDcEIsQ0FBQyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsQ0FBQyxZQUFZLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFbkUsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxNQUFNLENBQUMsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRWxDLElBQUksUUFBUSxLQUFLLElBQUksRUFBRTtRQUNyQixFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFNLENBQUM7UUFDL0IsRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBTSxDQUFDO1FBQy9CLE9BQU87WUFDTCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDbEMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25DLENBQUM7S0FDSDtJQUVELEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQU0sQ0FBQztJQUMvQixFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFNLENBQUM7SUFDL0IsT0FBTztRQUNMLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7S0FDbkMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7bWF0TXVsfSBmcm9tICcuL21hdF9tdWwnO1xuaW1wb3J0IHtvbmVzfSBmcm9tICcuL29uZXMnO1xuaW1wb3J0IHtyZXNoYXBlfSBmcm9tICcuL3Jlc2hhcGUnO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge2NvbnZlcnRUb1RlbnNvcn0gZnJvbSAnLi4vdGVuc29yX3V0aWxfZW52JztcbmltcG9ydCB7VGVuc29yTGlrZX0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtzaXplRnJvbVNoYXBlfSBmcm9tICcuLi91dGlsX2Jhc2UnO1xuXG4vKipcbiAqIEJyb2FkY2FzdHMgcGFyYW1ldGVycyBmb3IgZXZhbHVhdGlvbiBvbiBhbiBOLUQgZ3JpZC5cbiAqXG4gKiBHaXZlbiBOIG9uZS1kaW1lbnNpb25hbCBjb29yZGluYXRlIGFycmF5cyBgKmFyZ3NgLCByZXR1cm5zIGEgbGlzdCBgb3V0cHV0c2BcbiAqIG9mIE4tRCBjb29yZGluYXRlIGFycmF5cyBmb3IgZXZhbHVhdGluZyBleHByZXNzaW9ucyBvbiBhbiBOLUQgZ3JpZC5cbiAqXG4gKiBOb3RlczpcbiAqIGBtZXNoZ3JpZGAgc3VwcG9ydHMgY2FydGVzaWFuICgneHknKSBhbmQgbWF0cml4ICgnaWonKSBpbmRleGluZyBjb252ZW50aW9ucy5cbiAqIFdoZW4gdGhlIGBpbmRleGluZ2AgYXJndW1lbnQgaXMgc2V0IHRvICd4eScgKHRoZSBkZWZhdWx0KSwgdGhlIGJyb2FkY2FzdGluZ1xuICogaW5zdHJ1Y3Rpb25zIGZvciB0aGUgZmlyc3QgdHdvIGRpbWVuc2lvbnMgYXJlIHN3YXBwZWQuXG4gKiBFeGFtcGxlczpcbiAqIENhbGxpbmcgYGNvbnN0IFtYLCBZXSA9IG1lc2hncmlkKHgsIHkpYCB3aXRoIHRoZSB0ZW5zb3JzXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgeCA9IFsxLCAyLCAzXTtcbiAqIGNvbnN0IHkgPSBbNCwgNSwgNl07XG4gKiBjb25zdCBbWCwgWV0gPSB0Zi5tZXNoZ3JpZCh4LCB5KTtcbiAqIC8vIFggPSBbWzEsIDIsIDNdLFxuICogLy8gICAgICBbMSwgMiwgM10sXG4gKiAvLyAgICAgIFsxLCAyLCAzXV1cbiAqIC8vIFkgPSBbWzQsIDQsIDRdLFxuICogLy8gICAgICBbNSwgNSwgNV0sXG4gKiAvLyAgICAgIFs2LCA2LCA2XV1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB4IFRlbnNvciB3aXRoIHJhbmsgZ2VxIDEuXG4gKiBAcGFyYW0geSBUZW5zb3Igd2l0aCByYW5rIGdlcSAxLlxuICogQHBhcmFtIGluZGV4aW5nXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ09wZXJhdGlvbnMnLCBzdWJoZWFkaW5nOiAnU2xpY2luZyBhbmQgSm9pbmluZyd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXNoZ3JpZDxUIGV4dGVuZHMgVGVuc29yPihcbiAgICB4PzogVHxUZW5zb3JMaWtlLCB5PzogVHxUZW5zb3JMaWtlLCB7aW5kZXhpbmcgPSAneHknfSA9IHt9KTogVFtdIHtcbiAgaWYgKGluZGV4aW5nICE9PSAneHknICYmIGluZGV4aW5nICE9PSAnaWonKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgYCR7aW5kZXhpbmd9IGlzIG5vdCBhIHZhbGlkIHRoaXJkIGFyZ3VtZW50IHRvIG1lc2hncmlkYCk7XG4gIH1cbiAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBsZXQgJHggPSBjb252ZXJ0VG9UZW5zb3IoXG4gICAgICB4LCAneCcsICdtZXNoZ3JpZCcsIHggaW5zdGFuY2VvZiBUZW5zb3IgPyB4LmR0eXBlIDogJ2Zsb2F0MzInKTtcblxuICBpZiAoeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFskeF07XG4gIH1cbiAgbGV0ICR5ID0gY29udmVydFRvVGVuc29yKFxuICAgICAgeSwgJ3knLCAnbWVzaGdyaWQnLCB5IGluc3RhbmNlb2YgVGVuc29yID8geS5kdHlwZSA6ICdmbG9hdDMyJyk7XG5cbiAgY29uc3QgdyA9IHNpemVGcm9tU2hhcGUoJHguc2hhcGUpO1xuICBjb25zdCBoID0gc2l6ZUZyb21TaGFwZSgkeS5zaGFwZSk7XG5cbiAgaWYgKGluZGV4aW5nID09PSAneHknKSB7XG4gICAgJHggPSByZXNoYXBlKCR4LCBbMSwgLTFdKSBhcyBUO1xuICAgICR5ID0gcmVzaGFwZSgkeSwgWy0xLCAxXSkgYXMgVDtcbiAgICByZXR1cm4gW1xuICAgICAgbWF0TXVsKG9uZXMoW2gsIDFdLCAkeC5kdHlwZSksICR4KSxcbiAgICAgIG1hdE11bCgkeSwgb25lcyhbMSwgd10sICR5LmR0eXBlKSksXG4gICAgXTtcbiAgfVxuXG4gICR4ID0gcmVzaGFwZSgkeCwgWy0xLCAxXSkgYXMgVDtcbiAgJHkgPSByZXNoYXBlKCR5LCBbMSwgLTFdKSBhcyBUO1xuICByZXR1cm4gW1xuICAgIG1hdE11bCgkeCwgb25lcyhbMSwgaF0sICR4LmR0eXBlKSksXG4gICAgbWF0TXVsKG9uZXMoW3csIDFdLCAkeS5kdHlwZSksICR5KSxcbiAgXTtcbn1cbiJdfQ==","import { convertToTensor, convertToTensorArray } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the next states and outputs of a stack of LSTMCells.\n *\n * Each cell output is used as input to the next cell.\n *\n * Returns `[cellState, cellOutput]`.\n *\n * Derived from tf.contrib.rn.MultiRNNCell.\n *\n * @param lstmCells Array of LSTMCell functions.\n * @param data The input to the cell.\n * @param c Array of previous cell states.\n * @param h Array of previous cell outputs.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\nfunction multiRNNCell_(lstmCells, data, c, h) {\n    const $data = convertToTensor(data, 'data', 'multiRNNCell');\n    const $c = convertToTensorArray(c, 'c', 'multiRNNCell');\n    const $h = convertToTensorArray(h, 'h', 'multiRNNCell');\n    let input = $data;\n    const newStates = [];\n    for (let i = 0; i < lstmCells.length; i++) {\n        const output = lstmCells[i](input, $c[i], $h[i]);\n        newStates.push(output[0]);\n        newStates.push(output[1]);\n        input = output[1];\n    }\n    const newC = [];\n    const newH = [];\n    for (let i = 0; i < newStates.length; i += 2) {\n        newC.push(newStates[i]);\n        newH.push(newStates[i + 1]);\n    }\n    return [newC, newH];\n}\nexport const multiRNNCell = /* @__PURE__ */ op({ multiRNNCell_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlfcm5uX2NlbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9tdWx0aV9ybm5fY2VsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsT0FBTyxFQUFDLGVBQWUsRUFBRSxvQkFBb0IsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRXpFLE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFTL0I7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gsU0FBUyxhQUFhLENBQ2xCLFNBQXlCLEVBQUUsSUFBeUIsRUFDcEQsQ0FBNkIsRUFDN0IsQ0FBNkI7SUFDL0IsTUFBTSxLQUFLLEdBQUcsZUFBZSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDNUQsTUFBTSxFQUFFLEdBQUcsb0JBQW9CLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUN4RCxNQUFNLEVBQUUsR0FBRyxvQkFBb0IsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBRXhELElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNsQixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDckIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDekMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakQsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbkI7SUFDRCxNQUFNLElBQUksR0FBZSxFQUFFLENBQUM7SUFDNUIsTUFBTSxJQUFJLEdBQWUsRUFBRSxDQUFDO0lBQzVCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM3QjtJQUNELE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdEIsQ0FBQztBQUNELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUMsYUFBYSxFQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbmltcG9ydCB7VGVuc29yMkR9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge2NvbnZlcnRUb1RlbnNvciwgY29udmVydFRvVGVuc29yQXJyYXl9IGZyb20gJy4uL3RlbnNvcl91dGlsX2Vudic7XG5pbXBvcnQge1RlbnNvckxpa2V9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7b3B9IGZyb20gJy4vb3BlcmF0aW9uJztcblxuLyoqXG4gKiBAZG9jYWxpYXMgKGRhdGE6IFRlbnNvcjJELCBjOiBUZW5zb3IyRCwgaDogVGVuc29yMkQpOiBbVGVuc29yMkQsIFRlbnNvcjJEXVxuICovXG5leHBvcnQgdHlwZSBMU1RNQ2VsbEZ1bmMgPSB7XG4gIChkYXRhOiBUZW5zb3IyRCwgYzogVGVuc29yMkQsIGg6IFRlbnNvcjJEKTogW1RlbnNvcjJELCBUZW5zb3IyRF07XG59O1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBuZXh0IHN0YXRlcyBhbmQgb3V0cHV0cyBvZiBhIHN0YWNrIG9mIExTVE1DZWxscy5cbiAqXG4gKiBFYWNoIGNlbGwgb3V0cHV0IGlzIHVzZWQgYXMgaW5wdXQgdG8gdGhlIG5leHQgY2VsbC5cbiAqXG4gKiBSZXR1cm5zIGBbY2VsbFN0YXRlLCBjZWxsT3V0cHV0XWAuXG4gKlxuICogRGVyaXZlZCBmcm9tIHRmLmNvbnRyaWIucm4uTXVsdGlSTk5DZWxsLlxuICpcbiAqIEBwYXJhbSBsc3RtQ2VsbHMgQXJyYXkgb2YgTFNUTUNlbGwgZnVuY3Rpb25zLlxuICogQHBhcmFtIGRhdGEgVGhlIGlucHV0IHRvIHRoZSBjZWxsLlxuICogQHBhcmFtIGMgQXJyYXkgb2YgcHJldmlvdXMgY2VsbCBzdGF0ZXMuXG4gKiBAcGFyYW0gaCBBcnJheSBvZiBwcmV2aW91cyBjZWxsIG91dHB1dHMuXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ09wZXJhdGlvbnMnLCBzdWJoZWFkaW5nOiAnUk5OJ31cbiAqL1xuZnVuY3Rpb24gbXVsdGlSTk5DZWxsXyhcbiAgICBsc3RtQ2VsbHM6IExTVE1DZWxsRnVuY1tdLCBkYXRhOiBUZW5zb3IyRHxUZW5zb3JMaWtlLFxuICAgIGM6IEFycmF5PFRlbnNvcjJEfFRlbnNvckxpa2U+LFxuICAgIGg6IEFycmF5PFRlbnNvcjJEfFRlbnNvckxpa2U+KTogW1RlbnNvcjJEW10sIFRlbnNvcjJEW11dIHtcbiAgY29uc3QgJGRhdGEgPSBjb252ZXJ0VG9UZW5zb3IoZGF0YSwgJ2RhdGEnLCAnbXVsdGlSTk5DZWxsJyk7XG4gIGNvbnN0ICRjID0gY29udmVydFRvVGVuc29yQXJyYXkoYywgJ2MnLCAnbXVsdGlSTk5DZWxsJyk7XG4gIGNvbnN0ICRoID0gY29udmVydFRvVGVuc29yQXJyYXkoaCwgJ2gnLCAnbXVsdGlSTk5DZWxsJyk7XG5cbiAgbGV0IGlucHV0ID0gJGRhdGE7XG4gIGNvbnN0IG5ld1N0YXRlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxzdG1DZWxscy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG91dHB1dCA9IGxzdG1DZWxsc1tpXShpbnB1dCwgJGNbaV0sICRoW2ldKTtcbiAgICBuZXdTdGF0ZXMucHVzaChvdXRwdXRbMF0pO1xuICAgIG5ld1N0YXRlcy5wdXNoKG91dHB1dFsxXSk7XG4gICAgaW5wdXQgPSBvdXRwdXRbMV07XG4gIH1cbiAgY29uc3QgbmV3QzogVGVuc29yMkRbXSA9IFtdO1xuICBjb25zdCBuZXdIOiBUZW5zb3IyRFtdID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3U3RhdGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgbmV3Qy5wdXNoKG5ld1N0YXRlc1tpXSk7XG4gICAgbmV3SC5wdXNoKG5ld1N0YXRlc1tpICsgMV0pO1xuICB9XG4gIHJldHVybiBbbmV3QywgbmV3SF07XG59XG5leHBvcnQgY29uc3QgbXVsdGlSTk5DZWxsID0gLyogQF9fUFVSRV9fICovIG9wKHttdWx0aVJOTkNlbGxffSk7XG4iXX0=","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Multinomial } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\n *\n * ```js\n * const probs = tf.tensor([.75, .25]);\n * tf.multinomial(probs, 3).print();\n * ```\n *\n * @param logits 1D array with unnormalized log-probabilities, or\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\n *     parameter.\n * @param numSamples Number of samples to draw for each row slice.\n * @param seed The seed number.\n * @param normalized Whether the provided `logits` are normalized true\n *     probabilities (sum to 1). Defaults to false.\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\n *     `[batchSize, numSamples]`, depending on the rank of the input.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction multinomial_(logits, numSamples, seed, normalized = false) {\n    const $logits = convertToTensor(logits, 'logits', 'multinomial');\n    const numOutcomes = $logits.size;\n    const origRank = $logits.rank;\n    if (numOutcomes < 2) {\n        throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ` +\n            `${numOutcomes}.`);\n    }\n    if (origRank > 2) {\n        throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);\n    }\n    // TODO(lina128): Investigate correct seed behavior. The code seems not allow\n    // setting see to 0.\n    seed = seed || Math.random();\n    // The kernel only accepts (and returns) rank 2 tensors.\n    const logits2D = origRank === 1 ? reshape($logits, [1, -1]) : $logits;\n    const inputs = { logits: logits2D };\n    const attrs = { numSamples, seed, normalized };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(Multinomial, inputs, attrs);\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n    return origRank === 1 ? reshape(res, [res.size]) : res;\n}\nexport const multinomial = /* @__PURE__ */ op({ multinomial_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlub21pYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9tdWx0aW5vbWlhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBQyxXQUFXLEVBQXNDLE1BQU0saUJBQWlCLENBQUM7QUFJakYsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBR25ELE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUVsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUNILFNBQVMsWUFBWSxDQUNqQixNQUFvQyxFQUFFLFVBQWtCLEVBQUUsSUFBYSxFQUN2RSxVQUFVLEdBQUcsS0FBSztJQUNwQixNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNqRSxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQ2pDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDOUIsSUFBSSxXQUFXLEdBQUcsQ0FBQyxFQUFFO1FBQ25CLE1BQU0sSUFBSSxLQUFLLENBQ1gsOERBQThEO1lBQzlELEdBQUcsV0FBVyxHQUFHLENBQUMsQ0FBQztLQUN4QjtJQUNELElBQUksUUFBUSxHQUFHLENBQUMsRUFBRTtRQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLGdEQUFnRCxRQUFRLEVBQUUsQ0FBQyxDQUFDO0tBQzdFO0lBQ0QsNkVBQTZFO0lBQzdFLG9CQUFvQjtJQUNwQixJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUU3Qix3REFBd0Q7SUFDeEQsTUFBTSxRQUFRLEdBQ1YsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQW1CLENBQUM7SUFFckUsTUFBTSxNQUFNLEdBQXNCLEVBQUMsTUFBTSxFQUFFLFFBQVEsRUFBQyxDQUFDO0lBQ3JELE1BQU0sS0FBSyxHQUFxQixFQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFDLENBQUM7SUFFL0QsMERBQTBEO0lBQzFELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQ1osV0FBVyxFQUFFLE1BQW1DLEVBQ2hELEtBQWdDLENBQWEsQ0FBQztJQUU5RCx5REFBeUQ7SUFDekQsT0FBTyxRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFhLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUNyRSxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBQyxZQUFZLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge0VOR0lORX0gZnJvbSAnLi4vZW5naW5lJztcbmltcG9ydCB7TXVsdGlub21pYWwsIE11bHRpbm9taWFsQXR0cnMsIE11bHRpbm9taWFsSW5wdXRzfSBmcm9tICcuLi9rZXJuZWxfbmFtZXMnO1xuaW1wb3J0IHtOYW1lZEF0dHJNYXB9IGZyb20gJy4uL2tlcm5lbF9yZWdpc3RyeSc7XG5pbXBvcnQge1RlbnNvcjFELCBUZW5zb3IyRH0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7TmFtZWRUZW5zb3JNYXB9IGZyb20gJy4uL3RlbnNvcl90eXBlcyc7XG5pbXBvcnQge2NvbnZlcnRUb1RlbnNvcn0gZnJvbSAnLi4vdGVuc29yX3V0aWxfZW52JztcbmltcG9ydCB7VGVuc29yTGlrZX0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQge29wfSBmcm9tICcuL29wZXJhdGlvbic7XG5pbXBvcnQge3Jlc2hhcGV9IGZyb20gJy4vcmVzaGFwZSc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGB0Zi5UZW5zb3JgIHdpdGggdmFsdWVzIGRyYXduIGZyb20gYSBtdWx0aW5vbWlhbCBkaXN0cmlidXRpb24uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHByb2JzID0gdGYudGVuc29yKFsuNzUsIC4yNV0pO1xuICogdGYubXVsdGlub21pYWwocHJvYnMsIDMpLnByaW50KCk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gbG9naXRzIDFEIGFycmF5IHdpdGggdW5ub3JtYWxpemVkIGxvZy1wcm9iYWJpbGl0aWVzLCBvclxuICogICAgIDJEIGFycmF5IG9mIHNoYXBlIGBbYmF0Y2hTaXplLCBudW1PdXRjb21lc11gLiBTZWUgdGhlIGBub3JtYWxpemVkYFxuICogICAgIHBhcmFtZXRlci5cbiAqIEBwYXJhbSBudW1TYW1wbGVzIE51bWJlciBvZiBzYW1wbGVzIHRvIGRyYXcgZm9yIGVhY2ggcm93IHNsaWNlLlxuICogQHBhcmFtIHNlZWQgVGhlIHNlZWQgbnVtYmVyLlxuICogQHBhcmFtIG5vcm1hbGl6ZWQgV2hldGhlciB0aGUgcHJvdmlkZWQgYGxvZ2l0c2AgYXJlIG5vcm1hbGl6ZWQgdHJ1ZVxuICogICAgIHByb2JhYmlsaXRpZXMgKHN1bSB0byAxKS4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gKiBAcmV0dXJuIDFEIGFycmF5IG9mIHNoYXBlIGBbbnVtU2FtcGxlc11gLCBvciAyRCBhcnJheSBvZiBzaGFwZVxuICogICAgIGBbYmF0Y2hTaXplLCBudW1TYW1wbGVzXWAsIGRlcGVuZGluZyBvbiB0aGUgcmFuayBvZiB0aGUgaW5wdXQuXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ1RlbnNvcnMnLCBzdWJoZWFkaW5nOiAnUmFuZG9tJ31cbiAqL1xuZnVuY3Rpb24gbXVsdGlub21pYWxfKFxuICAgIGxvZ2l0czogVGVuc29yMUR8VGVuc29yMkR8VGVuc29yTGlrZSwgbnVtU2FtcGxlczogbnVtYmVyLCBzZWVkPzogbnVtYmVyLFxuICAgIG5vcm1hbGl6ZWQgPSBmYWxzZSk6IFRlbnNvcjFEfFRlbnNvcjJEIHtcbiAgY29uc3QgJGxvZ2l0cyA9IGNvbnZlcnRUb1RlbnNvcihsb2dpdHMsICdsb2dpdHMnLCAnbXVsdGlub21pYWwnKTtcbiAgY29uc3QgbnVtT3V0Y29tZXMgPSAkbG9naXRzLnNpemU7XG4gIGNvbnN0IG9yaWdSYW5rID0gJGxvZ2l0cy5yYW5rO1xuICBpZiAobnVtT3V0Y29tZXMgPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRXJyb3IgaW4gbXVsdGlub21pYWw6IHlvdSBuZWVkIGF0IGxlYXN0IDIgb3V0Y29tZXMsIGJ1dCBnb3QgYCArXG4gICAgICAgIGAke251bU91dGNvbWVzfS5gKTtcbiAgfVxuICBpZiAob3JpZ1JhbmsgPiAyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBSYW5rIG9mIHByb2JhYmlsaXRpZXMgbXVzdCBiZSAxIG9yIDIsIGJ1dCBpcyAke29yaWdSYW5rfWApO1xuICB9XG4gIC8vIFRPRE8obGluYTEyOCk6IEludmVzdGlnYXRlIGNvcnJlY3Qgc2VlZCBiZWhhdmlvci4gVGhlIGNvZGUgc2VlbXMgbm90IGFsbG93XG4gIC8vIHNldHRpbmcgc2VlIHRvIDAuXG4gIHNlZWQgPSBzZWVkIHx8IE1hdGgucmFuZG9tKCk7XG5cbiAgLy8gVGhlIGtlcm5lbCBvbmx5IGFjY2VwdHMgKGFuZCByZXR1cm5zKSByYW5rIDIgdGVuc29ycy5cbiAgY29uc3QgbG9naXRzMkQ6IFRlbnNvcjJEID1cbiAgICAgIG9yaWdSYW5rID09PSAxID8gcmVzaGFwZSgkbG9naXRzLCBbMSwgLTFdKSA6ICRsb2dpdHMgYXMgVGVuc29yMkQ7XG5cbiAgY29uc3QgaW5wdXRzOiBNdWx0aW5vbWlhbElucHV0cyA9IHtsb2dpdHM6IGxvZ2l0czJEfTtcbiAgY29uc3QgYXR0cnM6IE11bHRpbm9taWFsQXR0cnMgPSB7bnVtU2FtcGxlcywgc2VlZCwgbm9ybWFsaXplZH07XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby11bm5lY2Vzc2FyeS10eXBlLWFzc2VydGlvblxuICBjb25zdCByZXMgPSBFTkdJTkUucnVuS2VybmVsKFxuICAgICAgICAgICAgICAgICAgTXVsdGlub21pYWwsIGlucHV0cyBhcyB1bmtub3duIGFzIE5hbWVkVGVuc29yTWFwLFxuICAgICAgICAgICAgICAgICAgYXR0cnMgYXMgdW5rbm93biBhcyBOYW1lZEF0dHJNYXApIGFzIFRlbnNvcjJEO1xuXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bm5lY2Vzc2FyeS10eXBlLWFzc2VydGlvblxuICByZXR1cm4gb3JpZ1JhbmsgPT09IDEgPyByZXNoYXBlKHJlcywgW3Jlcy5zaXplXSkgYXMgVGVuc29yMUQgOiByZXM7XG59XG5cbmV4cG9ydCBjb25zdCBtdWx0aW5vbWlhbCA9IC8qIEBfX1BVUkVfXyAqLyBvcCh7bXVsdGlub21pYWxffSk7XG4iXX0=","import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { matMul } from './mat_mul';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the outer product of two vectors, `v1` and `v2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([3, 4, 5]);\n *\n * tf.outerProduct(a, b).print();\n * ```\n * @param v1 The first vector in the outer product operation.\n * @param v2 The second vector in the outer product operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction outerProduct_(v1, v2) {\n    const $v1 = convertToTensor(v1, 'v1', 'outerProduct');\n    const $v2 = convertToTensor(v2, 'v2', 'outerProduct');\n    util.assert($v1.rank === 1 && $v2.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ` +\n        `${$v1.rank} and ${$v2.rank}.`);\n    const v12D = reshape($v1, [-1, 1]);\n    const v22D = reshape($v2, [1, -1]);\n    return matMul(v12D, v22D);\n}\nexport const outerProduct = /* @__PURE__ */ op({ outerProduct_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0ZXJfcHJvZHVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvb3BzL291dGVyX3Byb2R1Y3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVuRCxPQUFPLEtBQUssSUFBSSxNQUFNLFNBQVMsQ0FBQztBQUVoQyxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUVsQzs7Ozs7Ozs7Ozs7OztHQWFHO0FBQ0gsU0FBUyxhQUFhLENBQ2xCLEVBQXVCLEVBQUUsRUFBdUI7SUFDbEQsTUFBTSxHQUFHLEdBQUcsZUFBZSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDdEQsTUFBTSxHQUFHLEdBQUcsZUFBZSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFFdEQsSUFBSSxDQUFDLE1BQU0sQ0FDUCxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsRUFDaEMsR0FBRyxFQUFFLENBQUMsOERBQThEO1FBQ2hFLEdBQUcsR0FBRyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUV4QyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUMsYUFBYSxFQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbmltcG9ydCB7VGVuc29yMUQsIFRlbnNvcjJEfSBmcm9tICcuLi90ZW5zb3InO1xuaW1wb3J0IHtjb252ZXJ0VG9UZW5zb3J9IGZyb20gJy4uL3RlbnNvcl91dGlsX2Vudic7XG5pbXBvcnQge1RlbnNvckxpa2V9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCB7bWF0TXVsfSBmcm9tICcuL21hdF9tdWwnO1xuaW1wb3J0IHtvcH0gZnJvbSAnLi9vcGVyYXRpb24nO1xuaW1wb3J0IHtyZXNoYXBlfSBmcm9tICcuL3Jlc2hhcGUnO1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBvdXRlciBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzLCBgdjFgIGFuZCBgdjJgLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBhID0gdGYudGVuc29yMWQoWzEsIDIsIDNdKTtcbiAqIGNvbnN0IGIgPSB0Zi50ZW5zb3IxZChbMywgNCwgNV0pO1xuICpcbiAqIHRmLm91dGVyUHJvZHVjdChhLCBiKS5wcmludCgpO1xuICogYGBgXG4gKiBAcGFyYW0gdjEgVGhlIGZpcnN0IHZlY3RvciBpbiB0aGUgb3V0ZXIgcHJvZHVjdCBvcGVyYXRpb24uXG4gKiBAcGFyYW0gdjIgVGhlIHNlY29uZCB2ZWN0b3IgaW4gdGhlIG91dGVyIHByb2R1Y3Qgb3BlcmF0aW9uLlxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdPcGVyYXRpb25zJywgc3ViaGVhZGluZzogJ01hdHJpY2VzJ31cbiAqL1xuZnVuY3Rpb24gb3V0ZXJQcm9kdWN0XyhcbiAgICB2MTogVGVuc29yMUR8VGVuc29yTGlrZSwgdjI6IFRlbnNvcjFEfFRlbnNvckxpa2UpOiBUZW5zb3IyRCB7XG4gIGNvbnN0ICR2MSA9IGNvbnZlcnRUb1RlbnNvcih2MSwgJ3YxJywgJ291dGVyUHJvZHVjdCcpO1xuICBjb25zdCAkdjIgPSBjb252ZXJ0VG9UZW5zb3IodjIsICd2MicsICdvdXRlclByb2R1Y3QnKTtcblxuICB1dGlsLmFzc2VydChcbiAgICAgICR2MS5yYW5rID09PSAxICYmICR2Mi5yYW5rID09PSAxLFxuICAgICAgKCkgPT4gYEVycm9yIGluIG91dGVyUHJvZHVjdDogaW5wdXRzIG11c3QgYmUgcmFuayAxLCBidXQgZ290IHJhbmtzIGAgK1xuICAgICAgICAgIGAkeyR2MS5yYW5rfSBhbmQgJHskdjIucmFua30uYCk7XG5cbiAgY29uc3QgdjEyRCA9IHJlc2hhcGUoJHYxLCBbLTEsIDFdKTtcbiAgY29uc3QgdjIyRCA9IHJlc2hhcGUoJHYyLCBbMSwgLTFdKTtcbiAgcmV0dXJuIG1hdE11bCh2MTJELCB2MjJEKTtcbn1cblxuZXhwb3J0IGNvbnN0IG91dGVyUHJvZHVjdCA9IC8qIEBfX1BVUkVfXyAqLyBvcCh7b3V0ZXJQcm9kdWN0X30pO1xuIl19","import { assert } from '../util';\nimport { op } from './operation';\nimport { pad } from './pad';\n/**\n * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.\n */\nfunction pad1d_(x, paddings, constantValue = 0) {\n    assert(paddings.length === 2, () => 'Invalid number of paddings. Must be length of 2.');\n    return pad(x, [paddings], constantValue);\n}\nexport const pad1d = /* @__PURE__ */ op({ pad1d_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFkMWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9wYWQxZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQkEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUMvQixPQUFPLEVBQUMsRUFBRSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxPQUFPLENBQUM7QUFFMUI7O0dBRUc7QUFDSCxTQUFTLE1BQU0sQ0FDWCxDQUFzQixFQUFFLFFBQTBCLEVBQ2xELGFBQWEsR0FBRyxDQUFDO0lBQ25CLE1BQU0sQ0FDRixRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFDckIsR0FBRyxFQUFFLENBQUMsa0RBQWtELENBQUMsQ0FBQztJQUM5RCxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuaW1wb3J0IHtUZW5zb3IxRH0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7VGVuc29yTGlrZX0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHthc3NlcnR9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHtvcH0gZnJvbSAnLi9vcGVyYXRpb24nO1xuaW1wb3J0IHtwYWR9IGZyb20gJy4vcGFkJztcblxuLyoqXG4gKiBQYWRzIGEgYHRmLlRlbnNvcjFEYCB3aXRoIGEgZ2l2ZW4gdmFsdWUgYW5kIHBhZGRpbmdzLiBTZWUgYHBhZGAgZm9yIGRldGFpbHMuXG4gKi9cbmZ1bmN0aW9uIHBhZDFkXyhcbiAgICB4OiBUZW5zb3IxRHxUZW5zb3JMaWtlLCBwYWRkaW5nczogW251bWJlciwgbnVtYmVyXSxcbiAgICBjb25zdGFudFZhbHVlID0gMCk6IFRlbnNvcjFEIHtcbiAgYXNzZXJ0KFxuICAgICAgcGFkZGluZ3MubGVuZ3RoID09PSAyLFxuICAgICAgKCkgPT4gJ0ludmFsaWQgbnVtYmVyIG9mIHBhZGRpbmdzLiBNdXN0IGJlIGxlbmd0aCBvZiAyLicpO1xuICByZXR1cm4gcGFkKHgsIFtwYWRkaW5nc10sIGNvbnN0YW50VmFsdWUpO1xufVxuXG5leHBvcnQgY29uc3QgcGFkMWQgPSAvKiBAX19QVVJFX18gKi8gb3Aoe3BhZDFkX30pO1xuIl19","import { assert } from '../util';\nimport { op } from './operation';\nimport { pad } from './pad';\n/**\n * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.\n */\nfunction pad2d_(x, paddings, constantValue = 0) {\n    assert(paddings.length === 2 && paddings[0].length === 2 &&\n        paddings[1].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');\n    return pad(x, paddings, constantValue);\n}\nexport const pad2d = /* @__PURE__ */ op({ pad2d_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFkMmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9wYWQyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQkEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUMvQixPQUFPLEVBQUMsRUFBRSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxPQUFPLENBQUM7QUFFMUI7O0dBRUc7QUFDSCxTQUFTLE1BQU0sQ0FDWCxDQUFzQixFQUFFLFFBQThDLEVBQ3RFLGFBQWEsR0FBRyxDQUFDO0lBQ25CLE1BQU0sQ0FDRixRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUM7UUFDN0MsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQzVCLEdBQUcsRUFBRSxDQUFDLHVEQUF1RCxDQUFDLENBQUM7SUFDbkUsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuaW1wb3J0IHtUZW5zb3IyRH0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7VGVuc29yTGlrZX0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHthc3NlcnR9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHtvcH0gZnJvbSAnLi9vcGVyYXRpb24nO1xuaW1wb3J0IHtwYWR9IGZyb20gJy4vcGFkJztcblxuLyoqXG4gKiBQYWRzIGEgYHRmLlRlbnNvcjJEYCB3aXRoIGEgZ2l2ZW4gdmFsdWUgYW5kIHBhZGRpbmdzLiBTZWUgYHBhZGAgZm9yIGRldGFpbHMuXG4gKi9cbmZ1bmN0aW9uIHBhZDJkXyhcbiAgICB4OiBUZW5zb3IyRHxUZW5zb3JMaWtlLCBwYWRkaW5nczogW1tudW1iZXIsIG51bWJlcl0sIFtudW1iZXIsIG51bWJlcl1dLFxuICAgIGNvbnN0YW50VmFsdWUgPSAwKTogVGVuc29yMkQge1xuICBhc3NlcnQoXG4gICAgICBwYWRkaW5ncy5sZW5ndGggPT09IDIgJiYgcGFkZGluZ3NbMF0ubGVuZ3RoID09PSAyICYmXG4gICAgICAgICAgcGFkZGluZ3NbMV0ubGVuZ3RoID09PSAyLFxuICAgICAgKCkgPT4gJ0ludmFsaWQgbnVtYmVyIG9mIHBhZGRpbmdzLiBNdXN0IGJlIGxlbmd0aCBvZiAyIGVhY2guJyk7XG4gIHJldHVybiBwYWQoeCwgcGFkZGluZ3MsIGNvbnN0YW50VmFsdWUpO1xufVxuXG5leHBvcnQgY29uc3QgcGFkMmQgPSAvKiBAX19QVVJFX18gKi8gb3Aoe3BhZDJkX30pO1xuIl19","import { assert } from '../util';\nimport { op } from './operation';\nimport { pad } from './pad';\n/**\n * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.\n */\nfunction pad3d_(x, paddings, constantValue = 0) {\n    assert(paddings.length === 3 && paddings[0].length === 2 &&\n        paddings[1].length === 2 && paddings[2].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');\n    return pad(x, paddings, constantValue);\n}\nexport const pad3d = /* @__PURE__ */ op({ pad3d_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFkM2QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9wYWQzZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQkEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUMvQixPQUFPLEVBQUMsRUFBRSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxPQUFPLENBQUM7QUFFMUI7O0dBRUc7QUFDSCxTQUFTLE1BQU0sQ0FDWCxDQUFzQixFQUN0QixRQUFnRSxFQUNoRSxhQUFhLEdBQUcsQ0FBQztJQUNuQixNQUFNLENBQ0YsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQzdDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUN4RCxHQUFHLEVBQUUsQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0lBQ25FLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbmltcG9ydCB7VGVuc29yM0R9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge1RlbnNvckxpa2V9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7YXNzZXJ0fSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7b3B9IGZyb20gJy4vb3BlcmF0aW9uJztcbmltcG9ydCB7cGFkfSBmcm9tICcuL3BhZCc7XG5cbi8qKlxuICogUGFkcyBhIGB0Zi5UZW5zb3IzRGAgd2l0aCBhIGdpdmVuIHZhbHVlIGFuZCBwYWRkaW5ncy4gU2VlIGBwYWRgIGZvciBkZXRhaWxzLlxuICovXG5mdW5jdGlvbiBwYWQzZF8oXG4gICAgeDogVGVuc29yM0R8VGVuc29yTGlrZSxcbiAgICBwYWRkaW5nczogW1tudW1iZXIsIG51bWJlcl0sIFtudW1iZXIsIG51bWJlcl0sIFtudW1iZXIsIG51bWJlcl1dLFxuICAgIGNvbnN0YW50VmFsdWUgPSAwKTogVGVuc29yM0Qge1xuICBhc3NlcnQoXG4gICAgICBwYWRkaW5ncy5sZW5ndGggPT09IDMgJiYgcGFkZGluZ3NbMF0ubGVuZ3RoID09PSAyICYmXG4gICAgICAgICAgcGFkZGluZ3NbMV0ubGVuZ3RoID09PSAyICYmIHBhZGRpbmdzWzJdLmxlbmd0aCA9PT0gMixcbiAgICAgICgpID0+ICdJbnZhbGlkIG51bWJlciBvZiBwYWRkaW5ncy4gTXVzdCBiZSBsZW5ndGggb2YgMiBlYWNoLicpO1xuICByZXR1cm4gcGFkKHgsIHBhZGRpbmdzLCBjb25zdGFudFZhbHVlKTtcbn1cblxuZXhwb3J0IGNvbnN0IHBhZDNkID0gLyogQF9fUFVSRV9fICovIG9wKHtwYWQzZF99KTtcbiJdfQ==","import { assert } from '../util';\nimport { op } from './operation';\nimport { pad } from './pad';\n/**\n * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.\n */\nfunction pad4d_(x, paddings, constantValue = 0) {\n    assert(paddings.length === 4 && paddings[0].length === 2 &&\n        paddings[1].length === 2 && paddings[2].length === 2 &&\n        paddings[3].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');\n    return pad(x, paddings, constantValue);\n}\nexport const pad4d = /* @__PURE__ */ op({ pad4d_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFkNGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9wYWQ0ZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQkEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUMvQixPQUFPLEVBQUMsRUFBRSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxPQUFPLENBQUM7QUFFMUI7O0dBRUc7QUFDSCxTQUFTLE1BQU0sQ0FDWCxDQUFzQixFQUN0QixRQUdLLEVBQ0wsYUFBYSxHQUFHLENBQUM7SUFDbkIsTUFBTSxDQUNGLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUM3QyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUM7UUFDcEQsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQzVCLEdBQUcsRUFBRSxDQUFDLHVEQUF1RCxDQUFDLENBQUM7SUFDbkUsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuaW1wb3J0IHtUZW5zb3I0RH0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7VGVuc29yTGlrZX0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHthc3NlcnR9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHtvcH0gZnJvbSAnLi9vcGVyYXRpb24nO1xuaW1wb3J0IHtwYWR9IGZyb20gJy4vcGFkJztcblxuLyoqXG4gKiBQYWRzIGEgYHRmLlRlbnNvcjREYCB3aXRoIGEgZ2l2ZW4gdmFsdWUgYW5kIHBhZGRpbmdzLiBTZWUgYHBhZGAgZm9yIGRldGFpbHMuXG4gKi9cbmZ1bmN0aW9uIHBhZDRkXyhcbiAgICB4OiBUZW5zb3I0RHxUZW5zb3JMaWtlLFxuICAgIHBhZGRpbmdzOlxuICAgICAgICBbXG4gICAgICAgICAgW251bWJlciwgbnVtYmVyXSwgW251bWJlciwgbnVtYmVyXSwgW251bWJlciwgbnVtYmVyXSwgW251bWJlciwgbnVtYmVyXVxuICAgICAgICBdLFxuICAgIGNvbnN0YW50VmFsdWUgPSAwKTogVGVuc29yNEQge1xuICBhc3NlcnQoXG4gICAgICBwYWRkaW5ncy5sZW5ndGggPT09IDQgJiYgcGFkZGluZ3NbMF0ubGVuZ3RoID09PSAyICYmXG4gICAgICAgICAgcGFkZGluZ3NbMV0ubGVuZ3RoID09PSAyICYmIHBhZGRpbmdzWzJdLmxlbmd0aCA9PT0gMiAmJlxuICAgICAgICAgIHBhZGRpbmdzWzNdLmxlbmd0aCA9PT0gMixcbiAgICAgICgpID0+ICdJbnZhbGlkIG51bWJlciBvZiBwYWRkaW5ncy4gTXVzdCBiZSBsZW5ndGggb2YgMiBlYWNoLicpO1xuICByZXR1cm4gcGFkKHgsIHBhZGRpbmdzLCBjb25zdGFudFZhbHVlKTtcbn1cblxuZXhwb3J0IGNvbnN0IHBhZDRkID0gLyogQF9fUFVSRV9fICovIG9wKHtwYWQ0ZF99KTtcbiJdfQ==","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { RaggedGather } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nfunction raggedGather_(paramsNestedSplits, paramsDenseValues, indices, outputRaggedRank) {\n    const $paramsNestedSplits = paramsNestedSplits.map((t, i) => convertToTensor(t, `tensors${i}`, 'raggedGather', 'int32'));\n    const $paramsDenseValues = convertToTensor(paramsDenseValues, 'paramsDenseValues', 'raggedGather');\n    const $indices = convertToTensor(indices, 'indices', 'raggedGather', 'int32');\n    const inputs = {\n        paramsNestedSplits: $paramsNestedSplits,\n        paramsDenseValues: $paramsDenseValues,\n        indices: $indices,\n    };\n    const attrs = { outputRaggedRank };\n    const result = ENGINE.runKernel(RaggedGather, inputs, attrs);\n    return {\n        outputNestedSplits: result.slice(0, result.length - 1),\n        outputDenseValues: result[result.length - 1],\n    };\n}\nexport const raggedGather = /* @__PURE__ */ op({ raggedGather_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFnZ2VkX2dhdGhlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvb3BzL3JhZ2dlZF9nYXRoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNqQyxPQUFPLEVBQUMsWUFBWSxFQUF3QyxNQUFNLGlCQUFpQixDQUFDO0FBRXBGLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVuRCxPQUFPLEVBQUMsRUFBRSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBNEIvQixTQUFTLGFBQWEsQ0FDbEIsa0JBQTRCLEVBQUUsaUJBQW9DLEVBQ2xFLE9BQTBCLEVBQUUsZ0JBQXdCO0lBQ3RELE1BQU0sbUJBQW1CLEdBQUcsa0JBQWtCLENBQUMsR0FBRyxDQUM5QyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsRUFBRSxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMxRSxNQUFNLGtCQUFrQixHQUNwQixlQUFlLENBQUMsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDNUUsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTlFLE1BQU0sTUFBTSxHQUF1QjtRQUNqQyxrQkFBa0IsRUFBRSxtQkFBbUI7UUFDdkMsaUJBQWlCLEVBQUUsa0JBQWtCO1FBQ3JDLE9BQU8sRUFBRSxRQUFRO0tBQ2xCLENBQUM7SUFDRixNQUFNLEtBQUssR0FBc0IsRUFBQyxnQkFBZ0IsRUFBQyxDQUFDO0lBRXBELE1BQU0sTUFBTSxHQUNSLE1BQU0sQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLE1BQVksRUFBRSxLQUFXLENBQUMsQ0FBQztJQUM5RCxPQUFPO1FBQ0wsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDdEQsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0tBQzdDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBQyxhQUFhLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge0VOR0lORX0gZnJvbSAnLi4vZW5naW5lJztcbmltcG9ydCB7UmFnZ2VkR2F0aGVyLCBSYWdnZWRHYXRoZXJBdHRycywgUmFnZ2VkR2F0aGVySW5wdXRzfSBmcm9tICcuLi9rZXJuZWxfbmFtZXMnO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge2NvbnZlcnRUb1RlbnNvcn0gZnJvbSAnLi4vdGVuc29yX3V0aWxfZW52JztcbmltcG9ydCB7VGVuc29yTGlrZX0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtvcH0gZnJvbSAnLi9vcGVyYXRpb24nO1xuXG4vKipcbiAqIEdhdGhlciByYWdnZWQgc2xpY2VzIGZyb20gcGFyYW1zIGF4aXMgMCBhY2NvcmRpbmcgdG8gaW5kaWNlcy5cbiAqXG4gKiBAcGFyYW0gcGFyYW1zTmVzdGVkU3BsaXRzOiBBIGxpc3Qgb2YgYXQgbGVhc3QgMSBUZW5zb3Igd2l0aCB0eXBlICdpbnQzMicgVGhlXG4gKiAgICAgbmVzdGVkUm93U3BsaXRzIHRlbnNvcnMgdGhhdCBkZWZpbmUgdGhlIHJvdy1wYXJ0aXRpb25pbmcgZm9yIHRoZSBwYXJhbXNcbiAqICAgICBSYWdnZWRUZW5zb3IgaW5wdXQuXG4gKiBAcGFyYW0gcGFyYW1zRGVuc2VWYWx1ZXM6IEEgVGVuc29yLiBUaGUgZmxhdFZhbHVlcyBmb3IgdGhlIHBhcmFtc1xuICogICAgIFJhZ2dlZFRlbnNvci5cbiAqIEBwYXJhbSBpbmRpY2VzOiBBIFRlbnNvci4gTXVzdCBiZSBvbmUgb2YgdHlwZTogaW50MzIuIEluZGljZXMgaW4gdGhlXG4gKiAgICAgb3V0ZXJtb3N0IGRpbWVuc2lvbiBvZiBwYXJhbXMgb2YgdGhlIHZhbHVlcyB0aGF0IHNob3VsZCBiZSBnYXRoZXJlZC5cbiAqIEBwYXJhbSBvdXRwdXRSYWdnZWRSYW5rOiBBbiBpbnQgdGhhdCBpcyA+PSAwLiBUaGUgcmFnZ2VkIHJhbmsgb2YgdGhlIG91dHB1dFxuICogICAgIFJhZ2dlZFRlbnNvci4gb3V0cHV0TmVzdGVkU3BsaXRzIHdpbGwgY29udGFpbiB0aGlzIG51bWJlciBvZiByb3dTcGxpdHNcbiAqICAgICB0ZW5zb3JzLiBUaGlzIHZhbHVlIHNob3VsZCBlcXVhbCBpbmRpY2VzLnNoYXBlLm5kaW1zICsgcGFyYW1zLnJhZ2dlZFJhbmtcbiAqICAgICAtIDEuXG4gKiBAcmV0dXJuIEEgbWFwIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogICAgIC0gb3V0cHV0TmVzdGVkU3BsaXRzOiBBIGxpc3Qgb2Ygb3V0cHV0UmFnZ2VkUmFuayBUZW5zb3Igb2JqZWN0cyB3aXRoIHRoZVxuICogc2FtZSB0eXBlIGFzIHBhcmFtc05lc3RlZFNwbGl0cy5cbiAqICAgICAtIG91dHB1dERlbnNlVmFsdWVzOiBBIFRlbnNvci4gSGFzIHRoZSBzYW1lIHR5cGUgYXMgcGFyYW1zRGVuc2VWYWx1ZXMuXG4gKiBAZG9jIHtoZWFkaW5nOiAnT3BlcmF0aW9ucycsIHN1YmhlYWRpbmc6ICdSYWdnZWQnfVxuICovXG5cbmludGVyZmFjZSBSYWdnZWRHYXRoZXJNYXAge1xuICBvdXRwdXROZXN0ZWRTcGxpdHM6IFRlbnNvcltdO1xuICBvdXRwdXREZW5zZVZhbHVlczogVGVuc29yO1xufVxuXG5mdW5jdGlvbiByYWdnZWRHYXRoZXJfKFxuICAgIHBhcmFtc05lc3RlZFNwbGl0czogVGVuc29yW10sIHBhcmFtc0RlbnNlVmFsdWVzOiBUZW5zb3J8VGVuc29yTGlrZSxcbiAgICBpbmRpY2VzOiBUZW5zb3J8VGVuc29yTGlrZSwgb3V0cHV0UmFnZ2VkUmFuazogbnVtYmVyKTogUmFnZ2VkR2F0aGVyTWFwIHtcbiAgY29uc3QgJHBhcmFtc05lc3RlZFNwbGl0cyA9IHBhcmFtc05lc3RlZFNwbGl0cy5tYXAoXG4gICAgICAodCwgaSkgPT4gY29udmVydFRvVGVuc29yKHQsIGB0ZW5zb3JzJHtpfWAsICdyYWdnZWRHYXRoZXInLCAnaW50MzInKSk7XG4gIGNvbnN0ICRwYXJhbXNEZW5zZVZhbHVlcyA9XG4gICAgICBjb252ZXJ0VG9UZW5zb3IocGFyYW1zRGVuc2VWYWx1ZXMsICdwYXJhbXNEZW5zZVZhbHVlcycsICdyYWdnZWRHYXRoZXInKTtcbiAgY29uc3QgJGluZGljZXMgPSBjb252ZXJ0VG9UZW5zb3IoaW5kaWNlcywgJ2luZGljZXMnLCAncmFnZ2VkR2F0aGVyJywgJ2ludDMyJyk7XG5cbiAgY29uc3QgaW5wdXRzOiBSYWdnZWRHYXRoZXJJbnB1dHMgPSB7XG4gICAgcGFyYW1zTmVzdGVkU3BsaXRzOiAkcGFyYW1zTmVzdGVkU3BsaXRzLFxuICAgIHBhcmFtc0RlbnNlVmFsdWVzOiAkcGFyYW1zRGVuc2VWYWx1ZXMsXG4gICAgaW5kaWNlczogJGluZGljZXMsXG4gIH07XG4gIGNvbnN0IGF0dHJzOiBSYWdnZWRHYXRoZXJBdHRycyA9IHtvdXRwdXRSYWdnZWRSYW5rfTtcblxuICBjb25zdCByZXN1bHQ6IFRlbnNvcltdID1cbiAgICAgIEVOR0lORS5ydW5LZXJuZWwoUmFnZ2VkR2F0aGVyLCBpbnB1dHMgYXMge30sIGF0dHJzIGFzIHt9KTtcbiAgcmV0dXJuIHtcbiAgICBvdXRwdXROZXN0ZWRTcGxpdHM6IHJlc3VsdC5zbGljZSgwLCByZXN1bHQubGVuZ3RoIC0gMSksXG4gICAgb3V0cHV0RGVuc2VWYWx1ZXM6IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV0sXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCByYWdnZWRHYXRoZXIgPSAvKiBAX19QVVJFX18gKi8gb3Aoe3JhZ2dlZEdhdGhlcl99KTtcbiJdfQ==","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { RaggedRange } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Returns a RaggedTensor result composed from rtDenseValues and rtNestedSplits,\n * such that result[i] = [starts[i], starts[i] + deltas[i], ..., limits[i]]).\n *\n * @param starts: A Tensor. Must be one of the following types:\n *     'float32', 'int32'. The starts of each range.\n * @param limits: A Tensor. Must have the same type as starts. The limits of\n *     each range.\n * @param deltas: A Tensor. Must have the same type as starts. The deltas of\n *     each range.\n * @return A map with the following properties:\n *     - rtNestedSplits: A Tensor of type 'int32'.\n *     - rtDenseValues: A Tensor. Has the same type as starts.\n */\nfunction raggedRange_(starts, limits, deltas) {\n    const $starts = convertToTensor(starts, 'starts', 'raggedRange');\n    const $limits = convertToTensor(limits, 'limits', 'raggedRange', $starts.dtype);\n    const $deltas = convertToTensor(deltas, 'deltas', 'raggedRange', $starts.dtype);\n    const inputs = {\n        starts: $starts,\n        limits: $limits,\n        deltas: $deltas,\n    };\n    const result = ENGINE.runKernel(RaggedRange, inputs);\n    return {\n        rtNestedSplits: result[0],\n        rtDenseValues: result[1],\n    };\n}\nexport const raggedRange = /* @__PURE__ */ op({ raggedRange_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFnZ2VkX3JhbmdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb3JlL3NyYy9vcHMvcmFnZ2VkX3JhbmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFDLFdBQVcsRUFBb0IsTUFBTSxpQkFBaUIsQ0FBQztBQUcvRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFbkQsT0FBTyxFQUFDLEVBQUUsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUUvQjs7Ozs7Ozs7Ozs7OztHQWFHO0FBRUgsU0FBUyxZQUFZLENBQ2pCLE1BQXlCLEVBQUUsTUFBeUIsRUFDcEQsTUFBeUI7SUFDM0IsTUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDakUsTUFBTSxPQUFPLEdBQ1QsZUFBZSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwRSxNQUFNLE9BQU8sR0FDVCxlQUFlLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXBFLE1BQU0sTUFBTSxHQUFzQjtRQUNoQyxNQUFNLEVBQUUsT0FBTztRQUNmLE1BQU0sRUFBRSxPQUFPO1FBQ2YsTUFBTSxFQUFFLE9BQU87S0FDaEIsQ0FBQztJQUVGLE1BQU0sTUFBTSxHQUFhLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLE1BQVksQ0FBQyxDQUFDO0lBQ3JFLE9BQU87UUFDTCxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN6QixhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUN6QixDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTEMuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtFTkdJTkV9IGZyb20gJy4uL2VuZ2luZSc7XG5pbXBvcnQge1JhZ2dlZFJhbmdlLCBSYWdnZWRSYW5nZUlucHV0c30gZnJvbSAnLi4va2VybmVsX25hbWVzJztcbmltcG9ydCB7VGVuc29yfSBmcm9tICcuLi90ZW5zb3InO1xuaW1wb3J0IHtOYW1lZFRlbnNvck1hcH0gZnJvbSAnLi4vdGVuc29yX3R5cGVzJztcbmltcG9ydCB7Y29udmVydFRvVGVuc29yfSBmcm9tICcuLi90ZW5zb3JfdXRpbF9lbnYnO1xuaW1wb3J0IHtUZW5zb3JMaWtlfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge29wfSBmcm9tICcuL29wZXJhdGlvbic7XG5cbi8qKlxuICogUmV0dXJucyBhIFJhZ2dlZFRlbnNvciByZXN1bHQgY29tcG9zZWQgZnJvbSBydERlbnNlVmFsdWVzIGFuZCBydE5lc3RlZFNwbGl0cyxcbiAqIHN1Y2ggdGhhdCByZXN1bHRbaV0gPSBbc3RhcnRzW2ldLCBzdGFydHNbaV0gKyBkZWx0YXNbaV0sIC4uLiwgbGltaXRzW2ldXSkuXG4gKlxuICogQHBhcmFtIHN0YXJ0czogQSBUZW5zb3IuIE11c3QgYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgdHlwZXM6XG4gKiAgICAgJ2Zsb2F0MzInLCAnaW50MzInLiBUaGUgc3RhcnRzIG9mIGVhY2ggcmFuZ2UuXG4gKiBAcGFyYW0gbGltaXRzOiBBIFRlbnNvci4gTXVzdCBoYXZlIHRoZSBzYW1lIHR5cGUgYXMgc3RhcnRzLiBUaGUgbGltaXRzIG9mXG4gKiAgICAgZWFjaCByYW5nZS5cbiAqIEBwYXJhbSBkZWx0YXM6IEEgVGVuc29yLiBNdXN0IGhhdmUgdGhlIHNhbWUgdHlwZSBhcyBzdGFydHMuIFRoZSBkZWx0YXMgb2ZcbiAqICAgICBlYWNoIHJhbmdlLlxuICogQHJldHVybiBBIG1hcCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqICAgICAtIHJ0TmVzdGVkU3BsaXRzOiBBIFRlbnNvciBvZiB0eXBlICdpbnQzMicuXG4gKiAgICAgLSBydERlbnNlVmFsdWVzOiBBIFRlbnNvci4gSGFzIHRoZSBzYW1lIHR5cGUgYXMgc3RhcnRzLlxuICovXG5cbmZ1bmN0aW9uIHJhZ2dlZFJhbmdlXyhcbiAgICBzdGFydHM6IFRlbnNvcnxUZW5zb3JMaWtlLCBsaW1pdHM6IFRlbnNvcnxUZW5zb3JMaWtlLFxuICAgIGRlbHRhczogVGVuc29yfFRlbnNvckxpa2UpOiBOYW1lZFRlbnNvck1hcCB7XG4gIGNvbnN0ICRzdGFydHMgPSBjb252ZXJ0VG9UZW5zb3Ioc3RhcnRzLCAnc3RhcnRzJywgJ3JhZ2dlZFJhbmdlJyk7XG4gIGNvbnN0ICRsaW1pdHMgPVxuICAgICAgY29udmVydFRvVGVuc29yKGxpbWl0cywgJ2xpbWl0cycsICdyYWdnZWRSYW5nZScsICRzdGFydHMuZHR5cGUpO1xuICBjb25zdCAkZGVsdGFzID1cbiAgICAgIGNvbnZlcnRUb1RlbnNvcihkZWx0YXMsICdkZWx0YXMnLCAncmFnZ2VkUmFuZ2UnLCAkc3RhcnRzLmR0eXBlKTtcblxuICBjb25zdCBpbnB1dHM6IFJhZ2dlZFJhbmdlSW5wdXRzID0ge1xuICAgIHN0YXJ0czogJHN0YXJ0cyxcbiAgICBsaW1pdHM6ICRsaW1pdHMsXG4gICAgZGVsdGFzOiAkZGVsdGFzLFxuICB9O1xuXG4gIGNvbnN0IHJlc3VsdDogVGVuc29yW10gPSBFTkdJTkUucnVuS2VybmVsKFJhZ2dlZFJhbmdlLCBpbnB1dHMgYXMge30pO1xuICByZXR1cm4ge1xuICAgIHJ0TmVzdGVkU3BsaXRzOiByZXN1bHRbMF0sXG4gICAgcnREZW5zZVZhbHVlczogcmVzdWx0WzFdLFxuICB9O1xufVxuXG5leHBvcnQgY29uc3QgcmFnZ2VkUmFuZ2UgPSAvKiBAX19QVVJFX18gKi8gb3Aoe3JhZ2dlZFJhbmdlX30pO1xuIl19","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { RaggedTensorToTensor } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Create a dense tensor from a ragged tensor, possibly altering its shape.\n *\n * The raggedTensorToTensor op creates a dense tensor from am array of row\n * partition tensors, a value vector, and default values. If the shape is\n * unspecified, the minimal shape required to contain all the elements in the\n * ragged tensor (the natural shape) will be used. If some dimensions are left\n * unspecified, then the size of the natural shape is used in that dimension.\n *\n * The defaultValue will be broadcast to the output shape. After that, the\n * values from the ragged tensor overwrite the default values. Note that the\n * defaultValue must have less dimensions than the value.\n *\n * The row partition tensors are in the order of the dimensions. At present, the\n * types can be: \"ROW_SPLITS\": the row_splits tensor from the ragged tensor.\n *   \"VALUE_ROWIDS\": the value_rowids tensor from the ragged tensor.\n *   \"FIRST_DIM_SIZE\": if value_rowids is used for the first dimension, then it\n * is preceded by \"FIRST_DIM_SIZE\".\n * ```\n * @param shape: A Tensor. Must be one of the following types: 'int32'. The\n *     desired shape of the output tensor. If left unspecified (empty), the\n *     minimal shape required to contain all the elements in the ragged tensor\n *     (the natural shape) will be used. If some dimensions are left\n *     unspecified, then the size of the natural shape is used in that\n *     dimension.\n *\n *     Note that dense dimensions cannot be modified by the shape argument.\n *     Trying to change the size of a dense dimension will cause the op to fail.\n *     Examples: natural shape: [4, 5, 6] shape: -1 output shape: [4, 5, 6]\n *\n *     natural shape: [4, 5, 6] shape: [3, -1, 2] output shape: [3, 5, 2]\n *\n *     natural shape: [4, 5, 6] shape: [3, 7, 2] output shape: [3, 7, 2]\n * @param values: A Tensor. A 1D tensor representing the values of the ragged\n *     tensor.\n * @param defaultValue: A Tensor. Must have the same type as values. The\n *     defaultValue when the shape is larger than the ragged tensor. The\n *     defaultValue is broadcast until it is the shape of the output tensor,\n *     and then overwritten by values in the ragged tensor. The default value\n *     must be compatible with this broadcast operation, and must have fewer\n *     dimensions than the value tensor.\n * @param rowPartitionTensors: A list of at least 1 Tensor objects with the same\n *     type in: 'int32'.\n * @param rowPartitionTypes: A list of strings. The types of the row partition\n *     tensors. At present, these can be:\n *     \"ROW_SPLITS\": the row_splits tensor from the ragged tensor.\n *     \"VALUE_ROWIDS\": the value_rowids tensor from the ragged tensor.\n *     \"FIRST_DIM_SIZE\": if value_rowids is used for the first dimension, then\n *         it is preceded by \"FIRST_DIM_SIZE\". The tensors are in the order of\n *         the dimensions.\n * @return A Tensor. Has the same type as values.\n * @doc {heading: 'Operations', subheading: 'Ragged'}\n */\nfunction raggedTensorToTensor_(shape, values, defaultValue, rowPartitionTensors, rowPartitionTypes) {\n    const $shape = convertToTensor(shape, 'shape', 'raggedTensorToTensor', 'int32');\n    const $values = convertToTensor(values, 'values', 'raggedTensorToTensor');\n    const $defaultValue = convertToTensor(defaultValue, 'defaultValue', 'raggedTensorToTensor', $values.dtype);\n    const $rowPartitionTensors = rowPartitionTensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'raggedTensorToTensor', 'int32'));\n    const inputs = {\n        shape: $shape,\n        values: $values,\n        defaultValue: $defaultValue,\n        rowPartitionTensors: $rowPartitionTensors\n    };\n    const attrs = { rowPartitionTypes };\n    return ENGINE.runKernel(RaggedTensorToTensor, inputs, attrs);\n}\nexport const raggedTensorToTensor = /* @__PURE__ */ op({ raggedTensorToTensor_ });\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { sizeFromShape } from '../util';\nimport { assertNonNegativeIntegerDimensions } from '../util_base';\nimport { op } from './operation';\n/**\n * Creates a `tf.Tensor` with values sampled from a random number generator\n * function defined by the user.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param randFunction A random number generator function which is called\n * for each element in the output tensor.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction rand_(shape, randFunction, dtype) {\n    assertNonNegativeIntegerDimensions(shape);\n    const size = sizeFromShape(shape);\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    for (let i = 0; i < size; i++) {\n        values[i] = randFunction();\n    }\n    return ENGINE.makeTensor(values, shape, dtype);\n}\nexport const rand = /* @__PURE__ */ op({ rand_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvb3BzL3JhbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUdqQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxrQ0FBa0MsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUVoRSxPQUFPLEVBQUMsRUFBRSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBRS9COzs7Ozs7Ozs7O0dBVUc7QUFDSCxTQUFTLEtBQUssQ0FDVixLQUFrQixFQUFFLFlBQTBCLEVBQzlDLEtBQWdCO0lBQ2xCLGtDQUFrQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDbEIsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7UUFDeEMsTUFBTSxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2pDO1NBQU0sSUFBSSxLQUFLLEtBQUssT0FBTyxFQUFFO1FBQzVCLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMvQjtTQUFNLElBQUksS0FBSyxLQUFLLE1BQU0sRUFBRTtRQUMzQixNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDL0I7U0FBTTtRQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDL0M7SUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZLEVBQUUsQ0FBQztLQUM1QjtJQUNELE9BQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBYyxDQUFDO0FBQzlELENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsZUFBZSxDQUFDLEVBQUUsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7RU5HSU5FfSBmcm9tICcuLi9lbmdpbmUnO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge0RhdGFUeXBlLCBSYW5rLCBTaGFwZU1hcH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtzaXplRnJvbVNoYXBlfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7YXNzZXJ0Tm9uTmVnYXRpdmVJbnRlZ2VyRGltZW5zaW9uc30gZnJvbSAnLi4vdXRpbF9iYXNlJztcblxuaW1wb3J0IHtvcH0gZnJvbSAnLi9vcGVyYXRpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgdGYuVGVuc29yYCB3aXRoIHZhbHVlcyBzYW1wbGVkIGZyb20gYSByYW5kb20gbnVtYmVyIGdlbmVyYXRvclxuICogZnVuY3Rpb24gZGVmaW5lZCBieSB0aGUgdXNlci5cbiAqXG4gKiBAcGFyYW0gc2hhcGUgQW4gYXJyYXkgb2YgaW50ZWdlcnMgZGVmaW5pbmcgdGhlIG91dHB1dCB0ZW5zb3Igc2hhcGUuXG4gKiBAcGFyYW0gcmFuZEZ1bmN0aW9uIEEgcmFuZG9tIG51bWJlciBnZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkXG4gKiBmb3IgZWFjaCBlbGVtZW50IGluIHRoZSBvdXRwdXQgdGVuc29yLlxuICogQHBhcmFtIGR0eXBlIFRoZSBkYXRhIHR5cGUgb2YgdGhlIG91dHB1dCB0ZW5zb3IuIERlZmF1bHRzIHRvICdmbG9hdDMyJy5cbiAqXG4gKiBAZG9jIHtoZWFkaW5nOiAnVGVuc29ycycsIHN1YmhlYWRpbmc6ICdSYW5kb20nfVxuICovXG5mdW5jdGlvbiByYW5kXzxSIGV4dGVuZHMgUmFuaz4oXG4gICAgc2hhcGU6IFNoYXBlTWFwW1JdLCByYW5kRnVuY3Rpb246ICgpID0+IG51bWJlcixcbiAgICBkdHlwZT86IERhdGFUeXBlKTogVGVuc29yPFI+IHtcbiAgYXNzZXJ0Tm9uTmVnYXRpdmVJbnRlZ2VyRGltZW5zaW9ucyhzaGFwZSk7XG4gIGNvbnN0IHNpemUgPSBzaXplRnJvbVNoYXBlKHNoYXBlKTtcbiAgbGV0IHZhbHVlcyA9IG51bGw7XG4gIGlmIChkdHlwZSA9PSBudWxsIHx8IGR0eXBlID09PSAnZmxvYXQzMicpIHtcbiAgICB2YWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KHNpemUpO1xuICB9IGVsc2UgaWYgKGR0eXBlID09PSAnaW50MzInKSB7XG4gICAgdmFsdWVzID0gbmV3IEludDMyQXJyYXkoc2l6ZSk7XG4gIH0gZWxzZSBpZiAoZHR5cGUgPT09ICdib29sJykge1xuICAgIHZhbHVlcyA9IG5ldyBVaW50OEFycmF5KHNpemUpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBkYXRhIHR5cGUgJHtkdHlwZX1gKTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgIHZhbHVlc1tpXSA9IHJhbmRGdW5jdGlvbigpO1xuICB9XG4gIHJldHVybiBFTkdJTkUubWFrZVRlbnNvcih2YWx1ZXMsIHNoYXBlLCBkdHlwZSkgYXMgVGVuc29yPFI+O1xufVxuXG5leHBvcnQgY29uc3QgcmFuZCA9IC8qIEBfX1BVUkVfXyAqLyBvcCh7cmFuZF99KTtcbiJdfQ==","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { inferShape } from './tensor_util_env';\nimport { arraysEqual, encodeString, flatten, isString, isTypedArray } from './util';\nconst TEST_EPSILON_FLOAT32 = 1e-3;\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\nexport function expectArraysClose(actual, expected, epsilon) {\n    if (epsilon == null) {\n        epsilon = testEpsilon();\n    }\n    return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, epsilon));\n}\nexport function testEpsilon() {\n    return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 :\n        TEST_EPSILON_FLOAT16;\n}\nfunction expectArraysPredicate(actual, expected, predicate) {\n    let checkClassType = true;\n    if (isTypedArray(actual) || isTypedArray(expected)) {\n        checkClassType = false;\n    }\n    if (isTypedArray(actual) && isTypedArray(expected)) {\n        checkClassType = true;\n    }\n    if (checkClassType) {\n        const aType = actual.constructor.name;\n        const bType = expected.constructor.name;\n        if (aType !== bType) {\n            throw new Error(`Arrays are of different type. Actual: ${aType}. ` +\n                `Expected: ${bType}`);\n        }\n    }\n    if (Array.isArray(actual) && Array.isArray(expected)) {\n        const actualShape = inferShape(actual);\n        const expectedShape = inferShape(expected);\n        if (!arraysEqual(actualShape, expectedShape)) {\n            throw new Error(`Arrays have different shapes. ` +\n                `Actual: [${actualShape}]. Expected: [${expectedShape}]`);\n        }\n    }\n    const actualFlat = isTypedArray(actual) ? actual : flatten(actual);\n    const expectedFlat = isTypedArray(expected) ?\n        expected :\n        flatten(expected);\n    if (actualFlat.length !== expectedFlat.length) {\n        throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs ` +\n            `expected: ${expectedFlat.length}.\\n` +\n            `Actual:   ${actualFlat}.\\n` +\n            `Expected: ${expectedFlat}.`);\n    }\n    for (let i = 0; i < expectedFlat.length; ++i) {\n        const a = actualFlat[i];\n        const e = expectedFlat[i];\n        if (!predicate(a, e)) {\n            throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\\n` +\n                `Actual:   ${actualFlat}.\\n` +\n                `Expected: ${expectedFlat}.`);\n        }\n    }\n    if (typeof expect !== 'undefined') {\n        expect().nothing();\n    }\n}\nexport function expectPromiseToFail(fn, done) {\n    fn().then(() => done.fail(), () => done());\n    if (typeof expect !== 'undefined') {\n        expect().nothing();\n    }\n}\nexport function expectArraysEqual(actual, expected) {\n    const exp = typeof expected === 'string' || typeof expected === 'number' ||\n        typeof expected === 'boolean' ?\n        [expected] :\n        expected;\n    if (isString(actual) || isString(actual[0]) ||\n        isString(expected) || isString(expected[0])) {\n        // tslint:disable-next-line: triple-equals\n        return expectArraysPredicate(actual, exp, (a, b) => a == b);\n    }\n    return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, 0));\n}\nexport function expectNumbersClose(a, e, epsilon) {\n    if (epsilon == null) {\n        epsilon = testEpsilon();\n    }\n    if (!areClose(a, e, epsilon)) {\n        throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\n    }\n    if (typeof expect !== 'undefined') {\n        expect().nothing();\n    }\n}\nfunction areClose(a, e, epsilon) {\n    if (!isFinite(a) && !isFinite(e)) {\n        return true;\n    }\n    if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n        return false;\n    }\n    return true;\n}\nexport function expectValuesInRange(actual, low, high) {\n    for (let i = 0; i < actual.length; i++) {\n        if (actual[i] < low || actual[i] > high) {\n            throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);\n        }\n    }\n}\nexport function expectArrayBuffersEqual(actual, expected) {\n    // Safari does not like comparing ArrayBuffers directly. Wrapping in\n    // a Float32Array solves this issue.\n    const actualArray = new Float32Array(actual);\n    const expectedArray = new Float32Array(expected);\n    if (actualArray.length !== expectedArray.length) {\n        throw new Error('Expected ArrayBuffer to be of length ' +\n            `${expectedArray.length}, but it was ${actualArray.length}`);\n    }\n    for (let i = 0; i < expectedArray.length; i++) {\n        if (actualArray[i] !== expectedArray[i]) {\n            throw new Error(`Expected ArrayBuffer value at ${i} to be ` +\n                `${expectedArray[i]} but got ${actualArray[i]} instead`);\n        }\n    }\n}\n/** Encodes strings into utf-8 bytes. */\nexport function encodeStrings(a) {\n    for (let i = 0; i < a.length; i++) {\n        const val = a[i];\n        if (Array.isArray(val)) {\n            encodeStrings(val);\n        }\n        else {\n            a[i] = encodeString(val);\n        }\n    }\n    return a;\n}\n/** Creates an HTMLVideoElement with autoplay-friendly default settings. */\nexport function createVideoElement(source) {\n    const video = document.createElement('video');\n    if ('playsInline' in video) {\n        // tslint:disable-next-line:no-any\n        video.playsInline = true;\n    }\n    video.muted = true;\n    video.loop = true;\n    video.style.position = 'fixed';\n    video.style.left = '0px';\n    video.style.top = '0px';\n    video.preload = 'auto';\n    video.appendChild(source);\n    return new Promise(resolve => {\n        video.addEventListener('loadeddata', _ => resolve(video));\n        video.load();\n    });\n}\nexport async function play(video) {\n    await video.play();\n    if ('requestVideoFrameCallback' in video) {\n        await new Promise(resolve => {\n            // tslint:disable-next-line:no-any\n            video.requestVideoFrameCallback(resolve);\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assertNonNegativeIntegerDimensions } from '../util_base';\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { RandGamma } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a gamma distribution.\n *\n * ```js\n * tf.randomGamma([2, 2], 1).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param alpha The shape parameter of the gamma distribution.\n * @param beta The inverse scale parameter of the gamma distribution. Defaults\n *     to 1.\n * @param dtype The data type of the output. Defaults to float32.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomGamma_(shape, alpha, beta = 1, dtype = 'float32', seed) {\n    assertNonNegativeIntegerDimensions(shape);\n    if (beta == null) {\n        beta = 1;\n    }\n    if (dtype == null) {\n        dtype = 'float32';\n    }\n    if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new Error(`Unsupported data type ${dtype}`);\n    }\n    const rgamma = new RandGamma(alpha, beta, dtype, seed);\n    const res = buffer(shape, dtype);\n    for (let i = 0; i < res.values.length; i++) {\n        res.values[i] = rgamma.nextValue();\n    }\n    return res.toTensor();\n}\nexport const randomGamma = /* @__PURE__ */ op({ randomGamma_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tX2dhbW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb3JlL3NyYy9vcHMvcmFuZG9tX2dhbW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUlILE9BQU8sRUFBQyxrQ0FBa0MsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUVoRSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUV0Qzs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxTQUFTLFlBQVksQ0FDakIsS0FBa0IsRUFBRSxLQUFhLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFDM0MsUUFBMkIsU0FBUyxFQUFFLElBQWE7SUFDckQsa0NBQWtDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO1FBQ2hCLElBQUksR0FBRyxDQUFDLENBQUM7S0FDVjtJQUNELElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtRQUNqQixLQUFLLEdBQUcsU0FBUyxDQUFDO0tBQ25CO0lBQ0QsSUFBSSxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxPQUFPLEVBQUU7UUFDNUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNuRDtJQUNELE1BQU0sTUFBTSxHQUFHLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0tBQ3BDO0lBQ0QsT0FBTyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDeEIsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge1JhbmssIFNoYXBlTWFwfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge2Fzc2VydE5vbk5lZ2F0aXZlSW50ZWdlckRpbWVuc2lvbnN9IGZyb20gJy4uL3V0aWxfYmFzZSc7XG5cbmltcG9ydCB7YnVmZmVyfSBmcm9tICcuL2J1ZmZlcic7XG5pbXBvcnQge29wfSBmcm9tICcuL29wZXJhdGlvbic7XG5pbXBvcnQge1JhbmRHYW1tYX0gZnJvbSAnLi9yYW5kX3V0aWwnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgdGYuVGVuc29yYCB3aXRoIHZhbHVlcyBzYW1wbGVkIGZyb20gYSBnYW1tYSBkaXN0cmlidXRpb24uXG4gKlxuICogYGBganNcbiAqIHRmLnJhbmRvbUdhbW1hKFsyLCAyXSwgMSkucHJpbnQoKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzaGFwZSBBbiBhcnJheSBvZiBpbnRlZ2VycyBkZWZpbmluZyB0aGUgb3V0cHV0IHRlbnNvciBzaGFwZS5cbiAqIEBwYXJhbSBhbHBoYSBUaGUgc2hhcGUgcGFyYW1ldGVyIG9mIHRoZSBnYW1tYSBkaXN0cmlidXRpb24uXG4gKiBAcGFyYW0gYmV0YSBUaGUgaW52ZXJzZSBzY2FsZSBwYXJhbWV0ZXIgb2YgdGhlIGdhbW1hIGRpc3RyaWJ1dGlvbi4gRGVmYXVsdHNcbiAqICAgICB0byAxLlxuICogQHBhcmFtIGR0eXBlIFRoZSBkYXRhIHR5cGUgb2YgdGhlIG91dHB1dC4gRGVmYXVsdHMgdG8gZmxvYXQzMi5cbiAqIEBwYXJhbSBzZWVkIFRoZSBzZWVkIGZvciB0aGUgcmFuZG9tIG51bWJlciBnZW5lcmF0b3IuXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ1RlbnNvcnMnLCBzdWJoZWFkaW5nOiAnUmFuZG9tJ31cbiAqL1xuZnVuY3Rpb24gcmFuZG9tR2FtbWFfPFIgZXh0ZW5kcyBSYW5rPihcbiAgICBzaGFwZTogU2hhcGVNYXBbUl0sIGFscGhhOiBudW1iZXIsIGJldGEgPSAxLFxuICAgIGR0eXBlOiAnZmxvYXQzMid8J2ludDMyJyA9ICdmbG9hdDMyJywgc2VlZD86IG51bWJlcik6IFRlbnNvcjxSPiB7XG4gIGFzc2VydE5vbk5lZ2F0aXZlSW50ZWdlckRpbWVuc2lvbnMoc2hhcGUpO1xuICBpZiAoYmV0YSA9PSBudWxsKSB7XG4gICAgYmV0YSA9IDE7XG4gIH1cbiAgaWYgKGR0eXBlID09IG51bGwpIHtcbiAgICBkdHlwZSA9ICdmbG9hdDMyJztcbiAgfVxuICBpZiAoZHR5cGUgIT09ICdmbG9hdDMyJyAmJiBkdHlwZSAhPT0gJ2ludDMyJykge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZGF0YSB0eXBlICR7ZHR5cGV9YCk7XG4gIH1cbiAgY29uc3QgcmdhbW1hID0gbmV3IFJhbmRHYW1tYShhbHBoYSwgYmV0YSwgZHR5cGUsIHNlZWQpO1xuICBjb25zdCByZXMgPSBidWZmZXIoc2hhcGUsIGR0eXBlKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXMudmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzLnZhbHVlc1tpXSA9IHJnYW1tYS5uZXh0VmFsdWUoKTtcbiAgfVxuICByZXR1cm4gcmVzLnRvVGVuc29yKCk7XG59XG5cbmV4cG9ydCBjb25zdCByYW5kb21HYW1tYSA9IC8qIEBfX1BVUkVfXyAqLyBvcCh7cmFuZG9tR2FtbWFffSk7XG4iXX0=","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { op } from './operation';\nimport { randomNormal } from './random_normal';\n/**\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\n *\n * The generated values will have mean 0 and standard deviation 1.\n *\n * ```js\n * tf.randomStandardNormal([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The data type of the output.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomStandardNormal_(shape, dtype, seed) {\n    if (dtype != null && dtype === 'bool') {\n        throw new Error(`Unsupported data type ${dtype}`);\n    }\n    return randomNormal(shape, 0, 1, dtype, seed);\n}\nexport const randomStandardNormal = /* @__PURE__ */ op({ randomStandardNormal_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tX3N0YW5kYXJkX25vcm1hbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvb3BzL3JhbmRvbV9zdGFuZGFyZF9ub3JtYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBS0gsT0FBTyxFQUFDLEVBQUUsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUMvQixPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFFN0M7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFDSCxTQUFTLHFCQUFxQixDQUMxQixLQUFrQixFQUFFLEtBQXlCLEVBQUUsSUFBYTtJQUM5RCxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUssS0FBa0IsS0FBSyxNQUFNLEVBQUU7UUFDbkQsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNuRDtJQUNELE9BQU8sWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsZUFBZSxDQUFDLEVBQUUsQ0FBQyxFQUFDLHFCQUFxQixFQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge0RhdGFUeXBlLCBSYW5rLCBTaGFwZU1hcH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQge29wfSBmcm9tICcuL29wZXJhdGlvbic7XG5pbXBvcnQge3JhbmRvbU5vcm1hbH0gZnJvbSAnLi9yYW5kb21fbm9ybWFsJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgYHRmLlRlbnNvcmAgd2l0aCB2YWx1ZXMgc2FtcGxlZCBmcm9tIGEgbm9ybWFsIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiBUaGUgZ2VuZXJhdGVkIHZhbHVlcyB3aWxsIGhhdmUgbWVhbiAwIGFuZCBzdGFuZGFyZCBkZXZpYXRpb24gMS5cbiAqXG4gKiBgYGBqc1xuICogdGYucmFuZG9tU3RhbmRhcmROb3JtYWwoWzIsIDJdKS5wcmludCgpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHNoYXBlIEFuIGFycmF5IG9mIGludGVnZXJzIGRlZmluaW5nIHRoZSBvdXRwdXQgdGVuc29yIHNoYXBlLlxuICogQHBhcmFtIGR0eXBlIFRoZSBkYXRhIHR5cGUgb2YgdGhlIG91dHB1dC5cbiAqIEBwYXJhbSBzZWVkIFRoZSBzZWVkIGZvciB0aGUgcmFuZG9tIG51bWJlciBnZW5lcmF0b3IuXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ1RlbnNvcnMnLCBzdWJoZWFkaW5nOiAnUmFuZG9tJ31cbiAqL1xuZnVuY3Rpb24gcmFuZG9tU3RhbmRhcmROb3JtYWxfPFIgZXh0ZW5kcyBSYW5rPihcbiAgICBzaGFwZTogU2hhcGVNYXBbUl0sIGR0eXBlPzogJ2Zsb2F0MzInfCdpbnQzMicsIHNlZWQ/OiBudW1iZXIpOiBUZW5zb3I8Uj4ge1xuICBpZiAoZHR5cGUgIT0gbnVsbCAmJiAoZHR5cGUgYXMgRGF0YVR5cGUpID09PSAnYm9vbCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGRhdGEgdHlwZSAke2R0eXBlfWApO1xuICB9XG4gIHJldHVybiByYW5kb21Ob3JtYWwoc2hhcGUsIDAsIDEsIGR0eXBlLCBzZWVkKTtcbn1cblxuZXhwb3J0IGNvbnN0IHJhbmRvbVN0YW5kYXJkTm9ybWFsID0gLyogQF9fUFVSRV9fICovIG9wKHtyYW5kb21TdGFuZGFyZE5vcm1hbF99KTtcbiJdfQ==","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { op } from './operation';\nimport { randomUniform } from './random_uniform';\n/**\n * Creates a `tf.Tensor` with integers sampled from a uniform distribution.\n *\n * The generated values are uniform integers in the range [minval, maxval). The\n * lower bound minval is included in the range, while the upper bound maxval is\n * excluded.\n *\n * ```js\n * tf.randomUniformInt([2, 2], 0, 10).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param minval Inclusive lower bound on the generated integers.\n * @param maxval Exclusive upper bound on the generated integers.\n * @param seed An optional int. Defaults to 0. If seed is set to be non-zero,\n *   the random number generator is seeded by the given seed. Otherwise, it is\n *   seeded by a random seed.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomUniformInt_(shape, minval, maxval, seed) {\n    // TODO(mattsoulanille): Handle optional seed2 input.\n    return randomUniform(shape, minval, maxval, 'int32', seed);\n}\nexport const randomUniformInt = /* @__PURE__ */ op({ randomUniformInt_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tX3VuaWZvcm1faW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb3JlL3NyYy9vcHMvcmFuZG9tX3VuaWZvcm1faW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUlILE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRS9DOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBQ0gsU0FBUyxpQkFBaUIsQ0FDeEIsS0FBa0IsRUFBRSxNQUFjLEVBQUUsTUFBYyxFQUNoRCxJQUFvQjtJQUN0QixxREFBcUQ7SUFDckQsT0FBTyxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzdELENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUMsaUJBQWlCLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQy5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7UmFuaywgU2hhcGVNYXB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7b3B9IGZyb20gJy4vb3BlcmF0aW9uJztcbmltcG9ydCB7cmFuZG9tVW5pZm9ybX0gZnJvbSAnLi9yYW5kb21fdW5pZm9ybSc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGB0Zi5UZW5zb3JgIHdpdGggaW50ZWdlcnMgc2FtcGxlZCBmcm9tIGEgdW5pZm9ybSBkaXN0cmlidXRpb24uXG4gKlxuICogVGhlIGdlbmVyYXRlZCB2YWx1ZXMgYXJlIHVuaWZvcm0gaW50ZWdlcnMgaW4gdGhlIHJhbmdlIFttaW52YWwsIG1heHZhbCkuIFRoZVxuICogbG93ZXIgYm91bmQgbWludmFsIGlzIGluY2x1ZGVkIGluIHRoZSByYW5nZSwgd2hpbGUgdGhlIHVwcGVyIGJvdW5kIG1heHZhbCBpc1xuICogZXhjbHVkZWQuXG4gKlxuICogYGBganNcbiAqIHRmLnJhbmRvbVVuaWZvcm1JbnQoWzIsIDJdLCAwLCAxMCkucHJpbnQoKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzaGFwZSBBbiBhcnJheSBvZiBpbnRlZ2VycyBkZWZpbmluZyB0aGUgb3V0cHV0IHRlbnNvciBzaGFwZS5cbiAqIEBwYXJhbSBtaW52YWwgSW5jbHVzaXZlIGxvd2VyIGJvdW5kIG9uIHRoZSBnZW5lcmF0ZWQgaW50ZWdlcnMuXG4gKiBAcGFyYW0gbWF4dmFsIEV4Y2x1c2l2ZSB1cHBlciBib3VuZCBvbiB0aGUgZ2VuZXJhdGVkIGludGVnZXJzLlxuICogQHBhcmFtIHNlZWQgQW4gb3B0aW9uYWwgaW50LiBEZWZhdWx0cyB0byAwLiBJZiBzZWVkIGlzIHNldCB0byBiZSBub24temVybyxcbiAqICAgdGhlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yIGlzIHNlZWRlZCBieSB0aGUgZ2l2ZW4gc2VlZC4gT3RoZXJ3aXNlLCBpdCBpc1xuICogICBzZWVkZWQgYnkgYSByYW5kb20gc2VlZC5cbiAqXG4gKiBAZG9jIHtoZWFkaW5nOiAnVGVuc29ycycsIHN1YmhlYWRpbmc6ICdSYW5kb20nfVxuICovXG5mdW5jdGlvbiByYW5kb21Vbmlmb3JtSW50XzxSIGV4dGVuZHMgUmFuaz4oXG4gIHNoYXBlOiBTaGFwZU1hcFtSXSwgbWludmFsOiBudW1iZXIsIG1heHZhbDogbnVtYmVyLFxuICAgIHNlZWQ/OiBudW1iZXJ8c3RyaW5nKTogVGVuc29yPFI+IHtcbiAgLy8gVE9ETyhtYXR0c291bGFuaWxsZSk6IEhhbmRsZSBvcHRpb25hbCBzZWVkMiBpbnB1dC5cbiAgcmV0dXJuIHJhbmRvbVVuaWZvcm0oc2hhcGUsIG1pbnZhbCwgbWF4dmFsLCAnaW50MzInLCBzZWVkKTtcbn1cblxuZXhwb3J0IGNvbnN0IHJhbmRvbVVuaWZvcm1JbnQgPSAvKiBAX19QVVJFX18gKi8gb3Aoe3JhbmRvbVVuaWZvcm1JbnRffSk7XG4iXX0=","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reverse } from './reverse';\n/**\n * Reverses a `tf.Tensor1D`.\n *\n * @param x The input tensor.\n */\nfunction reverse1d_(x) {\n    const $x = convertToTensor(x, 'x', 'reverse');\n    util.assert($x.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${$x.rank}.`);\n    return reverse($x, 0);\n}\nexport const reverse1d = /* @__PURE__ */ op({ reverse1d_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2ZXJzZV8xZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvb3BzL3JldmVyc2VfMWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBR0gsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRW5ELE9BQU8sS0FBSyxJQUFJLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUVsQzs7OztHQUlHO0FBQ0gsU0FBUyxVQUFVLENBQUMsQ0FBc0I7SUFDeEMsTUFBTSxFQUFFLEdBQUcsZUFBZSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDOUMsSUFBSSxDQUFDLE1BQU0sQ0FDUCxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsRUFDYixHQUFHLEVBQUUsQ0FBQyxxREFBcUQsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7SUFDM0UsT0FBTyxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLEVBQUUsQ0FBQyxFQUFDLFVBQVUsRUFBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7VGVuc29yMUR9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge2NvbnZlcnRUb1RlbnNvcn0gZnJvbSAnLi4vdGVuc29yX3V0aWxfZW52JztcbmltcG9ydCB7VGVuc29yTGlrZX0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7b3B9IGZyb20gJy4vb3BlcmF0aW9uJztcbmltcG9ydCB7cmV2ZXJzZX0gZnJvbSAnLi9yZXZlcnNlJztcblxuLyoqXG4gKiBSZXZlcnNlcyBhIGB0Zi5UZW5zb3IxRGAuXG4gKlxuICogQHBhcmFtIHggVGhlIGlucHV0IHRlbnNvci5cbiAqL1xuZnVuY3Rpb24gcmV2ZXJzZTFkXyh4OiBUZW5zb3IxRHxUZW5zb3JMaWtlKTogVGVuc29yMUQge1xuICBjb25zdCAkeCA9IGNvbnZlcnRUb1RlbnNvcih4LCAneCcsICdyZXZlcnNlJyk7XG4gIHV0aWwuYXNzZXJ0KFxuICAgICAgJHgucmFuayA9PT0gMSxcbiAgICAgICgpID0+IGBFcnJvciBpbiByZXZlcnNlMUQ6IHggbXVzdCBiZSByYW5rIDEgYnV0IGdvdCByYW5rICR7JHgucmFua30uYCk7XG4gIHJldHVybiByZXZlcnNlKCR4LCAwKTtcbn1cblxuZXhwb3J0IGNvbnN0IHJldmVyc2UxZCA9IC8qIEBfX1BVUkVfXyAqLyBvcCh7cmV2ZXJzZTFkX30pO1xuIl19","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reverse } from './reverse';\n/**\n * Reverses a `tf.Tensor2D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse2d_(x, axis) {\n    const $x = convertToTensor(x, 'x', 'reverse');\n    util.assert($x.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);\n    return reverse($x, axis);\n}\nexport const reverse2d = /* @__PURE__ */ op({ reverse2d_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2ZXJzZV8yZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvb3BzL3JldmVyc2VfMmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBR0gsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRW5ELE9BQU8sS0FBSyxJQUFJLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUVsQzs7Ozs7O0dBTUc7QUFDSCxTQUFTLFVBQVUsQ0FBQyxDQUFzQixFQUFFLElBQXNCO0lBQ2hFLE1BQU0sRUFBRSxHQUFHLGVBQWUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzlDLElBQUksQ0FBQyxNQUFNLENBQ1AsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQ2IsR0FBRyxFQUFFLENBQUMscURBQXFELEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQzNFLE9BQU8sT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvcjJEfSBmcm9tICcuLi90ZW5zb3InO1xuaW1wb3J0IHtjb252ZXJ0VG9UZW5zb3J9IGZyb20gJy4uL3RlbnNvcl91dGlsX2Vudic7XG5pbXBvcnQge1RlbnNvckxpa2V9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQge29wfSBmcm9tICcuL29wZXJhdGlvbic7XG5pbXBvcnQge3JldmVyc2V9IGZyb20gJy4vcmV2ZXJzZSc7XG5cbi8qKlxuICogUmV2ZXJzZXMgYSBgdGYuVGVuc29yMkRgIGFsb25nIGEgc3BlY2lmaWVkIGF4aXMuXG4gKlxuICogQHBhcmFtIHggVGhlIGlucHV0IHRlbnNvci5cbiAqIEBwYXJhbSBheGlzIFRoZSBzZXQgb2YgZGltZW5zaW9ucyB0byByZXZlcnNlLiBNdXN0IGJlIGluIHRoZVxuICogICAgIHJhbmdlIFstcmFuayh4KSwgcmFuayh4KSkuIERlZmF1bHRzIHRvIGFsbCBheGVzLlxuICovXG5mdW5jdGlvbiByZXZlcnNlMmRfKHg6IFRlbnNvcjJEfFRlbnNvckxpa2UsIGF4aXM/OiBudW1iZXJ8bnVtYmVyW10pOiBUZW5zb3IyRCB7XG4gIGNvbnN0ICR4ID0gY29udmVydFRvVGVuc29yKHgsICd4JywgJ3JldmVyc2UnKTtcbiAgdXRpbC5hc3NlcnQoXG4gICAgICAkeC5yYW5rID09PSAyLFxuICAgICAgKCkgPT4gYEVycm9yIGluIHJldmVyc2UyRDogeCBtdXN0IGJlIHJhbmsgMiBidXQgZ290IHJhbmsgJHskeC5yYW5rfS5gKTtcbiAgcmV0dXJuIHJldmVyc2UoJHgsIGF4aXMpO1xufVxuXG5leHBvcnQgY29uc3QgcmV2ZXJzZTJkID0gLyogQF9fUFVSRV9fICovIG9wKHtyZXZlcnNlMmRffSk7XG4iXX0=","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reverse } from './reverse';\n/**\n * Reverses a `tf.Tensor3D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse3d_(x, axis) {\n    const $x = convertToTensor(x, 'x', 'reverse');\n    util.assert($x.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${$x.rank}.`);\n    return reverse($x, axis);\n}\nexport const reverse3d = /* @__PURE__ */ op({ reverse3d_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2ZXJzZV8zZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvb3BzL3JldmVyc2VfM2QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBR0gsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRW5ELE9BQU8sS0FBSyxJQUFJLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUVsQzs7Ozs7O0dBTUc7QUFDSCxTQUFTLFVBQVUsQ0FBQyxDQUFzQixFQUFFLElBQXNCO0lBQ2hFLE1BQU0sRUFBRSxHQUFHLGVBQWUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzlDLElBQUksQ0FBQyxNQUFNLENBQ1AsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQ2IsR0FBRyxFQUFFLENBQUMscURBQXFELEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQzNFLE9BQU8sT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvcjNEfSBmcm9tICcuLi90ZW5zb3InO1xuaW1wb3J0IHtjb252ZXJ0VG9UZW5zb3J9IGZyb20gJy4uL3RlbnNvcl91dGlsX2Vudic7XG5pbXBvcnQge1RlbnNvckxpa2V9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQge29wfSBmcm9tICcuL29wZXJhdGlvbic7XG5pbXBvcnQge3JldmVyc2V9IGZyb20gJy4vcmV2ZXJzZSc7XG5cbi8qKlxuICogUmV2ZXJzZXMgYSBgdGYuVGVuc29yM0RgIGFsb25nIGEgc3BlY2lmaWVkIGF4aXMuXG4gKlxuICogQHBhcmFtIHggVGhlIGlucHV0IHRlbnNvci5cbiAqIEBwYXJhbSBheGlzIFRoZSBzZXQgb2YgZGltZW5zaW9ucyB0byByZXZlcnNlLiBNdXN0IGJlIGluIHRoZVxuICogICAgIHJhbmdlIFstcmFuayh4KSwgcmFuayh4KSkuIERlZmF1bHRzIHRvIGFsbCBheGVzLlxuICovXG5mdW5jdGlvbiByZXZlcnNlM2RfKHg6IFRlbnNvcjNEfFRlbnNvckxpa2UsIGF4aXM/OiBudW1iZXJ8bnVtYmVyW10pOiBUZW5zb3IzRCB7XG4gIGNvbnN0ICR4ID0gY29udmVydFRvVGVuc29yKHgsICd4JywgJ3JldmVyc2UnKTtcbiAgdXRpbC5hc3NlcnQoXG4gICAgICAkeC5yYW5rID09PSAzLFxuICAgICAgKCkgPT4gYEVycm9yIGluIHJldmVyc2UzRDogeCBtdXN0IGJlIHJhbmsgMyBidXQgZ290IHJhbmsgJHskeC5yYW5rfS5gKTtcbiAgcmV0dXJuIHJldmVyc2UoJHgsIGF4aXMpO1xufVxuXG5leHBvcnQgY29uc3QgcmV2ZXJzZTNkID0gLyogQF9fUFVSRV9fICovIG9wKHtyZXZlcnNlM2RffSk7XG4iXX0=","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reverse } from './reverse';\n/**\n * Reverses a `tf.Tensor4D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse4d_(x, axis) {\n    const $x = convertToTensor(x, 'x', 'reverse');\n    util.assert($x.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${$x.rank}.`);\n    return reverse($x, axis);\n}\nexport const reverse4d = /* @__PURE__ */ op({ reverse4d_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2ZXJzZV80ZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvb3BzL3JldmVyc2VfNGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBR0gsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRW5ELE9BQU8sS0FBSyxJQUFJLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUVsQzs7Ozs7O0dBTUc7QUFDSCxTQUFTLFVBQVUsQ0FBQyxDQUFzQixFQUFFLElBQXNCO0lBQ2hFLE1BQU0sRUFBRSxHQUFHLGVBQWUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzlDLElBQUksQ0FBQyxNQUFNLENBQ1AsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQ2IsR0FBRyxFQUFFLENBQUMscURBQXFELEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQzNFLE9BQU8sT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvcjREfSBmcm9tICcuLi90ZW5zb3InO1xuaW1wb3J0IHtjb252ZXJ0VG9UZW5zb3J9IGZyb20gJy4uL3RlbnNvcl91dGlsX2Vudic7XG5pbXBvcnQge1RlbnNvckxpa2V9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQge29wfSBmcm9tICcuL29wZXJhdGlvbic7XG5pbXBvcnQge3JldmVyc2V9IGZyb20gJy4vcmV2ZXJzZSc7XG5cbi8qKlxuICogUmV2ZXJzZXMgYSBgdGYuVGVuc29yNERgIGFsb25nIGEgc3BlY2lmaWVkIGF4aXMuXG4gKlxuICogQHBhcmFtIHggVGhlIGlucHV0IHRlbnNvci5cbiAqIEBwYXJhbSBheGlzIFRoZSBzZXQgb2YgZGltZW5zaW9ucyB0byByZXZlcnNlLiBNdXN0IGJlIGluIHRoZVxuICogICAgIHJhbmdlIFstcmFuayh4KSwgcmFuayh4KSkuIERlZmF1bHRzIHRvIGFsbCBheGVzLlxuICovXG5mdW5jdGlvbiByZXZlcnNlNGRfKHg6IFRlbnNvcjREfFRlbnNvckxpa2UsIGF4aXM/OiBudW1iZXJ8bnVtYmVyW10pOiBUZW5zb3I0RCB7XG4gIGNvbnN0ICR4ID0gY29udmVydFRvVGVuc29yKHgsICd4JywgJ3JldmVyc2UnKTtcbiAgdXRpbC5hc3NlcnQoXG4gICAgICAkeC5yYW5rID09PSA0LFxuICAgICAgKCkgPT4gYEVycm9yIGluIHJldmVyc2U0RDogeCBtdXN0IGJlIHJhbmsgNCBidXQgZ290IHJhbmsgJHskeC5yYW5rfS5gKTtcbiAgcmV0dXJuIHJldmVyc2UoJHgsIGF4aXMpO1xufVxuXG5leHBvcnQgY29uc3QgcmV2ZXJzZTRkID0gLyogQF9fUFVSRV9fICovIG9wKHtyZXZlcnNlNGRffSk7XG4iXX0=","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\n/**\n * Computes the difference between two lists of numbers.\n *\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\n * that represents all values that are in `x` but not in `y`. The returned\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\n * (duplicates are preserved). This operation also returns a Tensor indices that\n * represents the position of each out element in `x`. In other words:\n *\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\n *\n * ```js\n * const x = [1, 2, 3, 4, 5, 6];\n * const y = [1, 3, 5];\n *\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\n * out.print(); // [2, 4, 6]\n * indices.print(); // [1, 3, 5]\n * ```\n *\n * @param x 1-D Tensor. Values to keep.\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\n *     output.\n * @returns Promise of Tensor tuple [out, indices].\n *  out: Tensor with the same type as x.\n *  indices: A Tensor of type int32.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nasync function setdiff1dAsync_(x, y) {\n    const $x = convertToTensor(x, 'x', 'setdiff1d');\n    const $y = convertToTensor(y, 'y', 'setdiff1d');\n    util.assert($x.dtype === $y.dtype, () => `x and y should have the same dtype, but got x (${$x.dtype}) and y (${$y.dtype}).`);\n    util.assert($x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);\n    util.assert($y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);\n    const xVals = await $x.data();\n    const yVals = await $y.data();\n    const ySet = new Set(yVals);\n    let outputSize = 0;\n    for (let i = 0; i < xVals.length; i++) {\n        if (!ySet.has(xVals[i])) {\n            outputSize++;\n        }\n    }\n    const buffer = new TensorBuffer([outputSize], $x.dtype);\n    const indices = new TensorBuffer([outputSize], 'int32');\n    for (let i = 0, p = 0; i < xVals.length; i++) {\n        if (!ySet.has(xVals[i])) {\n            buffer.values[p] = xVals[i];\n            indices.values[p] = i;\n            p++;\n        }\n    }\n    return [buffer.toTensor(), indices.toTensor()];\n}\nexport const setdiff1dAsync = setdiff1dAsync_;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0ZGlmZjFkX2FzeW5jLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb3JlL3NyYy9vcHMvc2V0ZGlmZjFkX2FzeW5jLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILE9BQU8sRUFBUyxZQUFZLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDL0MsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRW5ELE9BQU8sS0FBSyxJQUFJLE1BQU0sU0FBUyxDQUFDO0FBRWhDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNEJHO0FBQ0gsS0FBSyxVQUFVLGVBQWUsQ0FDMUIsQ0FBb0IsRUFBRSxDQUFvQjtJQUM1QyxNQUFNLEVBQUUsR0FBRyxlQUFlLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNoRCxNQUFNLEVBQUUsR0FBRyxlQUFlLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVoRCxJQUFJLENBQUMsTUFBTSxDQUNQLEVBQUUsQ0FBQyxLQUFLLEtBQUssRUFBRSxDQUFDLEtBQUssRUFDckIsR0FBRyxFQUFFLENBQUMsa0RBQ0YsRUFBRSxDQUFDLEtBQUssWUFBWSxFQUFFLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztJQUUxQyxJQUFJLENBQUMsTUFBTSxDQUNQLEVBQUUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztJQUU1RSxJQUFJLENBQUMsTUFBTSxDQUNQLEVBQUUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztJQUU1RSxNQUFNLEtBQUssR0FBRyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5QixNQUFNLEtBQUssR0FBRyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5QixNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUU1QixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDckMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdkIsVUFBVSxFQUFFLENBQUM7U0FDZDtLQUNGO0lBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN4RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLENBQUMsRUFBRSxDQUFDO1NBQ0w7S0FDRjtJQUNELE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUNELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5pbXBvcnQge1RlbnNvciwgVGVuc29yQnVmZmVyfSBmcm9tICcuLi90ZW5zb3InO1xuaW1wb3J0IHtjb252ZXJ0VG9UZW5zb3J9IGZyb20gJy4uL3RlbnNvcl91dGlsX2Vudic7XG5pbXBvcnQge1RlbnNvckxpa2V9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gbGlzdHMgb2YgbnVtYmVycy5cbiAqXG4gKiBHaXZlbiBhIFRlbnNvciBgeGAgYW5kIGEgVGVuc29yIGB5YCwgdGhpcyBvcGVyYXRpb24gcmV0dXJucyBhIFRlbnNvciBgb3V0YFxuICogdGhhdCByZXByZXNlbnRzIGFsbCB2YWx1ZXMgdGhhdCBhcmUgaW4gYHhgIGJ1dCBub3QgaW4gYHlgLiBUaGUgcmV0dXJuZWRcbiAqIFRlbnNvciBgb3V0YCBpcyBzb3J0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgdGhhdCB0aGUgbnVtYmVycyBhcHBlYXIgaW4gYHhgXG4gKiAoZHVwbGljYXRlcyBhcmUgcHJlc2VydmVkKS4gVGhpcyBvcGVyYXRpb24gYWxzbyByZXR1cm5zIGEgVGVuc29yIGluZGljZXMgdGhhdFxuICogcmVwcmVzZW50cyB0aGUgcG9zaXRpb24gb2YgZWFjaCBvdXQgZWxlbWVudCBpbiBgeGAuIEluIG90aGVyIHdvcmRzOlxuICpcbiAqIGBvdXRbaV0gPSB4W2lkeFtpXV0gZm9yIGkgaW4gWzAsIDEsIC4uLiwgb3V0Lmxlbmd0aCAtIDFdYFxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCB4ID0gWzEsIDIsIDMsIDQsIDUsIDZdO1xuICogY29uc3QgeSA9IFsxLCAzLCA1XTtcbiAqXG4gKiBjb25zdCBbb3V0LCBpbmRpY2VzXSA9IGF3YWl0IHRmLnNldGRpZmYxZEFzeW5jKHgsIHkpO1xuICogb3V0LnByaW50KCk7IC8vIFsyLCA0LCA2XVxuICogaW5kaWNlcy5wcmludCgpOyAvLyBbMSwgMywgNV1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB4IDEtRCBUZW5zb3IuIFZhbHVlcyB0byBrZWVwLlxuICogQHBhcmFtIHkgMS1EIFRlbnNvci4gTXVzdCBoYXZlIHRoZSBzYW1lIHR5cGUgYXMgeC4gVmFsdWVzIHRvIGV4Y2x1ZGUgaW4gdGhlXG4gKiAgICAgb3V0cHV0LlxuICogQHJldHVybnMgUHJvbWlzZSBvZiBUZW5zb3IgdHVwbGUgW291dCwgaW5kaWNlc10uXG4gKiAgb3V0OiBUZW5zb3Igd2l0aCB0aGUgc2FtZSB0eXBlIGFzIHguXG4gKiAgaW5kaWNlczogQSBUZW5zb3Igb2YgdHlwZSBpbnQzMi5cbiAqXG4gKiBAZG9jIHtoZWFkaW5nOiAnVGVuc29ycycsIHN1YmhlYWRpbmc6ICdUcmFuc2Zvcm1hdGlvbnMnfVxuICovXG5hc3luYyBmdW5jdGlvbiBzZXRkaWZmMWRBc3luY18oXG4gICAgeDogVGVuc29yfFRlbnNvckxpa2UsIHk6IFRlbnNvcnxUZW5zb3JMaWtlKTogUHJvbWlzZTxbVGVuc29yLCBUZW5zb3JdPiB7XG4gIGNvbnN0ICR4ID0gY29udmVydFRvVGVuc29yKHgsICd4JywgJ3NldGRpZmYxZCcpO1xuICBjb25zdCAkeSA9IGNvbnZlcnRUb1RlbnNvcih5LCAneScsICdzZXRkaWZmMWQnKTtcblxuICB1dGlsLmFzc2VydChcbiAgICAgICR4LmR0eXBlID09PSAkeS5kdHlwZSxcbiAgICAgICgpID0+IGB4IGFuZCB5IHNob3VsZCBoYXZlIHRoZSBzYW1lIGR0eXBlLCBidXQgZ290IHggKCR7XG4gICAgICAgICAgJHguZHR5cGV9KSBhbmQgeSAoJHskeS5kdHlwZX0pLmApO1xuXG4gIHV0aWwuYXNzZXJ0KFxuICAgICAgJHgucmFuayA9PT0gMSwgKCkgPT4gYHggc2hvdWxkIGJlIDFEIHRlbnNvciwgYnV0IGdvdCB4ICgkeyR4LnNoYXBlfSkuYCk7XG5cbiAgdXRpbC5hc3NlcnQoXG4gICAgICAkeS5yYW5rID09PSAxLCAoKSA9PiBgeSBzaG91bGQgYmUgMUQgdGVuc29yLCBidXQgZ290IHkgKCR7JHkuc2hhcGV9KS5gKTtcblxuICBjb25zdCB4VmFscyA9IGF3YWl0ICR4LmRhdGEoKTtcbiAgY29uc3QgeVZhbHMgPSBhd2FpdCAkeS5kYXRhKCk7XG4gIGNvbnN0IHlTZXQgPSBuZXcgU2V0KHlWYWxzKTtcblxuICBsZXQgb3V0cHV0U2l6ZSA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgeFZhbHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIXlTZXQuaGFzKHhWYWxzW2ldKSkge1xuICAgICAgb3V0cHV0U2l6ZSsrO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGJ1ZmZlciA9IG5ldyBUZW5zb3JCdWZmZXIoW291dHB1dFNpemVdLCAkeC5kdHlwZSk7XG4gIGNvbnN0IGluZGljZXMgPSBuZXcgVGVuc29yQnVmZmVyKFtvdXRwdXRTaXplXSwgJ2ludDMyJyk7XG4gIGZvciAobGV0IGkgPSAwLCBwID0gMDsgaSA8IHhWYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCF5U2V0Lmhhcyh4VmFsc1tpXSkpIHtcbiAgICAgIGJ1ZmZlci52YWx1ZXNbcF0gPSB4VmFsc1tpXTtcbiAgICAgIGluZGljZXMudmFsdWVzW3BdID0gaTtcbiAgICAgIHArKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtidWZmZXIudG9UZW5zb3IoKSwgaW5kaWNlcy50b1RlbnNvcigpXTtcbn1cbmV4cG9ydCBjb25zdCBzZXRkaWZmMWRBc3luYyA9IHNldGRpZmYxZEFzeW5jXztcbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor3d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided,  it is inferred from\n *     `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor3d(values, shape, dtype) {\n    assertNonNull(values);\n    if (shape != null && shape.length !== 3) {\n        throw new Error('tensor3d() requires shape to have three numbers');\n    }\n    const inferredShape = inferShape(values, dtype);\n    if (inferredShape.length !== 3 && inferredShape.length !== 1) {\n        throw new Error('tensor3d() requires values to be number[][][] or flat/TypedArray');\n    }\n    if (inferredShape.length === 1 && shape == null) {\n        throw new Error('tensor3d() requires shape to be provided when `values` ' +\n            'are a flat array');\n    }\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuc29yM2QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy90ZW5zb3IzZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFHOUMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUN0QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQkc7QUFDSCxNQUFNLFVBQVUsUUFBUSxDQUNwQixNQUFvQixFQUFFLEtBQWdDLEVBQ3RELEtBQWdCO0lBQ2xCLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QixJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0tBQ3BFO0lBQ0QsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNoRCxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzVELE1BQU0sSUFBSSxLQUFLLENBQ1gsa0VBQWtFLENBQUMsQ0FBQztLQUN6RTtJQUNELElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtRQUMvQyxNQUFNLElBQUksS0FBSyxDQUNYLHlEQUF5RDtZQUN6RCxrQkFBa0IsQ0FBQyxDQUFDO0tBQ3pCO0lBQ0QsT0FBTyxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFhLENBQUM7QUFDckUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtUZW5zb3IzRH0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7aW5mZXJTaGFwZX0gZnJvbSAnLi4vdGVuc29yX3V0aWxfZW52JztcbmltcG9ydCB7VGVuc29yTGlrZTNEfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge0RhdGFUeXBlfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge2Fzc2VydE5vbk51bGx9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHttYWtlVGVuc29yfSBmcm9tICcuL3RlbnNvcl9vcHNfdXRpbCc7XG5cbi8qKlxuICogQ3JlYXRlcyByYW5rLTMgYHRmLlRlbnNvcmAgd2l0aCB0aGUgcHJvdmlkZWQgdmFsdWVzLCBzaGFwZSBhbmQgZHR5cGUuXG4gKlxuICogVGhlIHNhbWUgZnVuY3Rpb25hbGl0eSBjYW4gYmUgYWNoaWV2ZWQgd2l0aCBgdGYudGVuc29yYCwgYnV0IGluIGdlbmVyYWxcbiAqIHdlIHJlY29tbWVuZCB1c2luZyBgdGYudGVuc29yM2RgIGFzIGl0IG1ha2VzIHRoZSBjb2RlIG1vcmUgcmVhZGFibGUuXG4gKlxuICogIGBgYGpzXG4gKiAvLyBQYXNzIGEgbmVzdGVkIGFycmF5LlxuICogdGYudGVuc29yM2QoW1tbMV0sIFsyXV0sIFtbM10sIFs0XV1dKS5wcmludCgpO1xuICogYGBgXG4gKiBgYGBqc1xuICogLy8gUGFzcyBhIGZsYXQgYXJyYXkgYW5kIHNwZWNpZnkgYSBzaGFwZS5cbiAqIHRmLnRlbnNvcjNkKFsxLCAyLCAzLCA0XSwgWzIsIDIsIDFdKS5wcmludCgpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHZhbHVlcyBUaGUgdmFsdWVzIG9mIHRoZSB0ZW5zb3IuIENhbiBiZSBuZXN0ZWQgYXJyYXkgb2YgbnVtYmVycyxcbiAqICAgICBvciBhIGZsYXQgYXJyYXksIG9yIGEgYFR5cGVkQXJyYXlgLlxuICogQHBhcmFtIHNoYXBlIFRoZSBzaGFwZSBvZiB0aGUgdGVuc29yLiBJZiBub3QgcHJvdmlkZWQsICBpdCBpcyBpbmZlcnJlZCBmcm9tXG4gKiAgICAgYHZhbHVlc2AuXG4gKiBAcGFyYW0gZHR5cGUgVGhlIGRhdGEgdHlwZS5cbiAqXG4gKiBAZG9jIHtoZWFkaW5nOiAnVGVuc29ycycsIHN1YmhlYWRpbmc6ICdDcmVhdGlvbid9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZW5zb3IzZChcbiAgICB2YWx1ZXM6IFRlbnNvckxpa2UzRCwgc2hhcGU/OiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sXG4gICAgZHR5cGU/OiBEYXRhVHlwZSk6IFRlbnNvcjNEIHtcbiAgYXNzZXJ0Tm9uTnVsbCh2YWx1ZXMpO1xuICBpZiAoc2hhcGUgIT0gbnVsbCAmJiBzaGFwZS5sZW5ndGggIT09IDMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3RlbnNvcjNkKCkgcmVxdWlyZXMgc2hhcGUgdG8gaGF2ZSB0aHJlZSBudW1iZXJzJyk7XG4gIH1cbiAgY29uc3QgaW5mZXJyZWRTaGFwZSA9IGluZmVyU2hhcGUodmFsdWVzLCBkdHlwZSk7XG4gIGlmIChpbmZlcnJlZFNoYXBlLmxlbmd0aCAhPT0gMyAmJiBpbmZlcnJlZFNoYXBlLmxlbmd0aCAhPT0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3RlbnNvcjNkKCkgcmVxdWlyZXMgdmFsdWVzIHRvIGJlIG51bWJlcltdW11bXSBvciBmbGF0L1R5cGVkQXJyYXknKTtcbiAgfVxuICBpZiAoaW5mZXJyZWRTaGFwZS5sZW5ndGggPT09IDEgJiYgc2hhcGUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3RlbnNvcjNkKCkgcmVxdWlyZXMgc2hhcGUgdG8gYmUgcHJvdmlkZWQgd2hlbiBgdmFsdWVzYCAnICtcbiAgICAgICAgJ2FyZSBhIGZsYXQgYXJyYXknKTtcbiAgfVxuICByZXR1cm4gbWFrZVRlbnNvcih2YWx1ZXMsIHNoYXBlLCBpbmZlcnJlZFNoYXBlLCBkdHlwZSkgYXMgVGVuc29yM0Q7XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor4d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor4d(values, shape, dtype) {\n    assertNonNull(values);\n    if (shape != null && shape.length !== 4) {\n        throw new Error('tensor4d() requires shape to have four numbers');\n    }\n    const inferredShape = inferShape(values, dtype);\n    if (inferredShape.length !== 4 && inferredShape.length !== 1) {\n        throw new Error('tensor4d() requires values to be number[][][][] or flat/TypedArray');\n    }\n    if (inferredShape.length === 1 && shape == null) {\n        throw new Error('tensor4d() requires shape to be provided when `values` ' +\n            'are a flat array');\n    }\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuc29yNGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy90ZW5zb3I0ZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFHOUMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUN0QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQkc7QUFDSCxNQUFNLFVBQVUsUUFBUSxDQUNwQixNQUFvQixFQUFFLEtBQXdDLEVBQzlELEtBQWdCO0lBQ2xCLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QixJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0tBQ25FO0lBQ0QsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNoRCxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzVELE1BQU0sSUFBSSxLQUFLLENBQ1gsb0VBQW9FLENBQUMsQ0FBQztLQUMzRTtJQUNELElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtRQUMvQyxNQUFNLElBQUksS0FBSyxDQUNYLHlEQUF5RDtZQUN6RCxrQkFBa0IsQ0FBQyxDQUFDO0tBQ3pCO0lBQ0QsT0FBTyxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFhLENBQUM7QUFDckUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtUZW5zb3I0RH0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7aW5mZXJTaGFwZX0gZnJvbSAnLi4vdGVuc29yX3V0aWxfZW52JztcbmltcG9ydCB7VGVuc29yTGlrZTREfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge0RhdGFUeXBlfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge2Fzc2VydE5vbk51bGx9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHttYWtlVGVuc29yfSBmcm9tICcuL3RlbnNvcl9vcHNfdXRpbCc7XG5cbi8qKlxuICogQ3JlYXRlcyByYW5rLTQgYHRmLlRlbnNvcmAgd2l0aCB0aGUgcHJvdmlkZWQgdmFsdWVzLCBzaGFwZSBhbmQgZHR5cGUuXG4gKlxuICogVGhlIHNhbWUgZnVuY3Rpb25hbGl0eSBjYW4gYmUgYWNoaWV2ZWQgd2l0aCBgdGYudGVuc29yYCwgYnV0IGluIGdlbmVyYWxcbiAqIHdlIHJlY29tbWVuZCB1c2luZyBgdGYudGVuc29yNGRgIGFzIGl0IG1ha2VzIHRoZSBjb2RlIG1vcmUgcmVhZGFibGUuXG4gKlxuICogIGBgYGpzXG4gKiAvLyBQYXNzIGEgbmVzdGVkIGFycmF5LlxuICogdGYudGVuc29yNGQoW1tbWzFdLCBbMl1dLCBbWzNdLCBbNF1dXV0pLnByaW50KCk7XG4gKiBgYGBcbiAqIGBgYGpzXG4gKiAvLyBQYXNzIGEgZmxhdCBhcnJheSBhbmQgc3BlY2lmeSBhIHNoYXBlLlxuICogdGYudGVuc29yNGQoWzEsIDIsIDMsIDRdLCBbMSwgMiwgMiwgMV0pLnByaW50KCk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdmFsdWVzIFRoZSB2YWx1ZXMgb2YgdGhlIHRlbnNvci4gQ2FuIGJlIG5lc3RlZCBhcnJheSBvZiBudW1iZXJzLFxuICogICAgIG9yIGEgZmxhdCBhcnJheSwgb3IgYSBgVHlwZWRBcnJheWAuXG4gKiBAcGFyYW0gc2hhcGUgVGhlIHNoYXBlIG9mIHRoZSB0ZW5zb3IuIE9wdGlvbmFsLiBJZiBub3QgcHJvdmlkZWQsXG4gKiAgIGl0IGlzIGluZmVycmVkIGZyb20gYHZhbHVlc2AuXG4gKiBAcGFyYW0gZHR5cGUgVGhlIGRhdGEgdHlwZS5cbiAqXG4gKiBAZG9jIHtoZWFkaW5nOiAnVGVuc29ycycsIHN1YmhlYWRpbmc6ICdDcmVhdGlvbid9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZW5zb3I0ZChcbiAgICB2YWx1ZXM6IFRlbnNvckxpa2U0RCwgc2hhcGU/OiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSxcbiAgICBkdHlwZT86IERhdGFUeXBlKTogVGVuc29yNEQge1xuICBhc3NlcnROb25OdWxsKHZhbHVlcyk7XG4gIGlmIChzaGFwZSAhPSBudWxsICYmIHNoYXBlLmxlbmd0aCAhPT0gNCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndGVuc29yNGQoKSByZXF1aXJlcyBzaGFwZSB0byBoYXZlIGZvdXIgbnVtYmVycycpO1xuICB9XG4gIGNvbnN0IGluZmVycmVkU2hhcGUgPSBpbmZlclNoYXBlKHZhbHVlcywgZHR5cGUpO1xuICBpZiAoaW5mZXJyZWRTaGFwZS5sZW5ndGggIT09IDQgJiYgaW5mZXJyZWRTaGFwZS5sZW5ndGggIT09IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICd0ZW5zb3I0ZCgpIHJlcXVpcmVzIHZhbHVlcyB0byBiZSBudW1iZXJbXVtdW11bXSBvciBmbGF0L1R5cGVkQXJyYXknKTtcbiAgfVxuICBpZiAoaW5mZXJyZWRTaGFwZS5sZW5ndGggPT09IDEgJiYgc2hhcGUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3RlbnNvcjRkKCkgcmVxdWlyZXMgc2hhcGUgdG8gYmUgcHJvdmlkZWQgd2hlbiBgdmFsdWVzYCAnICtcbiAgICAgICAgJ2FyZSBhIGZsYXQgYXJyYXknKTtcbiAgfVxuICByZXR1cm4gbWFrZVRlbnNvcih2YWx1ZXMsIHNoYXBlLCBpbmZlcnJlZFNoYXBlLCBkdHlwZSkgYXMgVGVuc29yNEQ7XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor5d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor5d([[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor5d(values, shape, dtype) {\n    assertNonNull(values);\n    if (shape != null && shape.length !== 5) {\n        throw new Error('tensor5d() requires shape to have five numbers');\n    }\n    const inferredShape = inferShape(values, dtype);\n    if (inferredShape.length !== 5 && inferredShape.length !== 1) {\n        throw new Error('tensor5d() requires values to be ' +\n            'number[][][][][] or flat/TypedArray');\n    }\n    if (inferredShape.length === 1 && shape == null) {\n        throw new Error('tensor5d() requires shape to be provided when `values` ' +\n            'are a flat array');\n    }\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuc29yNWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy90ZW5zb3I1ZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFHOUMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUN0QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQkc7QUFDSCxNQUFNLFVBQVUsUUFBUSxDQUNwQixNQUFvQixFQUFFLEtBQWdELEVBQ3RFLEtBQWdCO0lBQ2xCLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QixJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0tBQ25FO0lBQ0QsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNoRCxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzVELE1BQU0sSUFBSSxLQUFLLENBQ1gsbUNBQW1DO1lBQ25DLHFDQUFxQyxDQUFDLENBQUM7S0FDNUM7SUFDRCxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7UUFDL0MsTUFBTSxJQUFJLEtBQUssQ0FDWCx5REFBeUQ7WUFDekQsa0JBQWtCLENBQUMsQ0FBQztLQUN6QjtJQUNELE9BQU8sVUFBVSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBYSxDQUFDO0FBQ3JFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7VGVuc29yNUR9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge2luZmVyU2hhcGV9IGZyb20gJy4uL3RlbnNvcl91dGlsX2Vudic7XG5pbXBvcnQge1RlbnNvckxpa2U1RH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtEYXRhVHlwZX0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHthc3NlcnROb25OdWxsfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7bWFrZVRlbnNvcn0gZnJvbSAnLi90ZW5zb3Jfb3BzX3V0aWwnO1xuXG4vKipcbiAqIENyZWF0ZXMgcmFuay01IGB0Zi5UZW5zb3JgIHdpdGggdGhlIHByb3ZpZGVkIHZhbHVlcywgc2hhcGUgYW5kIGR0eXBlLlxuICpcbiAqIFRoZSBzYW1lIGZ1bmN0aW9uYWxpdHkgY2FuIGJlIGFjaGlldmVkIHdpdGggYHRmLnRlbnNvcmAsIGJ1dCBpbiBnZW5lcmFsXG4gKiB3ZSByZWNvbW1lbmQgdXNpbmcgYHRmLnRlbnNvcjVkYCBhcyBpdCBtYWtlcyB0aGUgY29kZSBtb3JlIHJlYWRhYmxlLlxuICpcbiAqICBgYGBqc1xuICogLy8gUGFzcyBhIG5lc3RlZCBhcnJheS5cbiAqIHRmLnRlbnNvcjVkKFtbW1tbMV0sWzJdXSxbWzNdLFs0XV1dLFtbWzVdLFs2XV0sW1s3XSxbOF1dXV1dKS5wcmludCgpO1xuICogYGBgXG4gKiBgYGBqc1xuICogLy8gUGFzcyBhIGZsYXQgYXJyYXkgYW5kIHNwZWNpZnkgYSBzaGFwZS5cbiAqIHRmLnRlbnNvcjVkKFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4XSwgWzEsIDIsIDIsIDIsIDFdKS5wcmludCgpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHZhbHVlcyBUaGUgdmFsdWVzIG9mIHRoZSB0ZW5zb3IuIENhbiBiZSBuZXN0ZWQgYXJyYXkgb2YgbnVtYmVycyxcbiAqICAgICBvciBhIGZsYXQgYXJyYXksIG9yIGEgYFR5cGVkQXJyYXlgLlxuICogQHBhcmFtIHNoYXBlIFRoZSBzaGFwZSBvZiB0aGUgdGVuc29yLiBPcHRpb25hbC4gSWYgbm90IHByb3ZpZGVkLFxuICogICBpdCBpcyBpbmZlcnJlZCBmcm9tIGB2YWx1ZXNgLlxuICogQHBhcmFtIGR0eXBlIFRoZSBkYXRhIHR5cGUuXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ1RlbnNvcnMnLCBzdWJoZWFkaW5nOiAnQ3JlYXRpb24nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGVuc29yNWQoXG4gICAgdmFsdWVzOiBUZW5zb3JMaWtlNUQsIHNoYXBlPzogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSxcbiAgICBkdHlwZT86IERhdGFUeXBlKTogVGVuc29yNUQge1xuICBhc3NlcnROb25OdWxsKHZhbHVlcyk7XG4gIGlmIChzaGFwZSAhPSBudWxsICYmIHNoYXBlLmxlbmd0aCAhPT0gNSkge1xuICAgIHRocm93IG5ldyBFcnJvcigndGVuc29yNWQoKSByZXF1aXJlcyBzaGFwZSB0byBoYXZlIGZpdmUgbnVtYmVycycpO1xuICB9XG4gIGNvbnN0IGluZmVycmVkU2hhcGUgPSBpbmZlclNoYXBlKHZhbHVlcywgZHR5cGUpO1xuICBpZiAoaW5mZXJyZWRTaGFwZS5sZW5ndGggIT09IDUgJiYgaW5mZXJyZWRTaGFwZS5sZW5ndGggIT09IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICd0ZW5zb3I1ZCgpIHJlcXVpcmVzIHZhbHVlcyB0byBiZSAnICtcbiAgICAgICAgJ251bWJlcltdW11bXVtdW10gb3IgZmxhdC9UeXBlZEFycmF5Jyk7XG4gIH1cbiAgaWYgKGluZmVycmVkU2hhcGUubGVuZ3RoID09PSAxICYmIHNoYXBlID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICd0ZW5zb3I1ZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGJlIHByb3ZpZGVkIHdoZW4gYHZhbHVlc2AgJyArXG4gICAgICAgICdhcmUgYSBmbGF0IGFycmF5Jyk7XG4gIH1cbiAgcmV0dXJuIG1ha2VUZW5zb3IodmFsdWVzLCBzaGFwZSwgaW5mZXJyZWRTaGFwZSwgZHR5cGUpIGFzIFRlbnNvcjVEO1xufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor6d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor6d(values, shape, dtype) {\n    assertNonNull(values);\n    if (shape != null && shape.length !== 6) {\n        throw new Error('tensor6d() requires shape to have six numbers');\n    }\n    const inferredShape = inferShape(values, dtype);\n    if (inferredShape.length !== 6 && inferredShape.length !== 1) {\n        throw new Error('tensor6d() requires values to be number[][][][][][] or ' +\n            'flat/TypedArray');\n    }\n    if (inferredShape.length === 1 && shape == null) {\n        throw new Error('tensor6d() requires shape to be provided when `values` ' +\n            'are a flat array');\n    }\n    shape = shape ||\n        inferredShape;\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuc29yNmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy90ZW5zb3I2ZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFHOUMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUN0QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQkc7QUFDSCxNQUFNLFVBQVUsUUFBUSxDQUNwQixNQUFvQixFQUNwQixLQUF3RCxFQUN4RCxLQUFnQjtJQUNsQixhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEIsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztLQUNsRTtJQUNELE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEQsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUM1RCxNQUFNLElBQUksS0FBSyxDQUNYLHlEQUF5RDtZQUN6RCxpQkFBaUIsQ0FBQyxDQUFDO0tBQ3hCO0lBQ0QsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO1FBQy9DLE1BQU0sSUFBSSxLQUFLLENBQ1gseURBQXlEO1lBQ3pELGtCQUFrQixDQUFDLENBQUM7S0FDekI7SUFDRCxLQUFLLEdBQUcsS0FBSztRQUNULGFBQWlFLENBQUM7SUFDdEUsT0FBTyxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFhLENBQUM7QUFDckUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtUZW5zb3I2RH0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7aW5mZXJTaGFwZX0gZnJvbSAnLi4vdGVuc29yX3V0aWxfZW52JztcbmltcG9ydCB7VGVuc29yTGlrZTZEfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge0RhdGFUeXBlfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge2Fzc2VydE5vbk51bGx9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHttYWtlVGVuc29yfSBmcm9tICcuL3RlbnNvcl9vcHNfdXRpbCc7XG5cbi8qKlxuICogQ3JlYXRlcyByYW5rLTYgYHRmLlRlbnNvcmAgd2l0aCB0aGUgcHJvdmlkZWQgdmFsdWVzLCBzaGFwZSBhbmQgZHR5cGUuXG4gKlxuICogVGhlIHNhbWUgZnVuY3Rpb25hbGl0eSBjYW4gYmUgYWNoaWV2ZWQgd2l0aCBgdGYudGVuc29yYCwgYnV0IGluIGdlbmVyYWxcbiAqIHdlIHJlY29tbWVuZCB1c2luZyBgdGYudGVuc29yNmRgIGFzIGl0IG1ha2VzIHRoZSBjb2RlIG1vcmUgcmVhZGFibGUuXG4gKlxuICogIGBgYGpzXG4gKiAvLyBQYXNzIGEgbmVzdGVkIGFycmF5LlxuICogdGYudGVuc29yNmQoW1tbW1tbMV0sWzJdXSxbWzNdLFs0XV1dLFtbWzVdLFs2XV0sW1s3XSxbOF1dXV1dXSkucHJpbnQoKTtcbiAqIGBgYFxuICogYGBganNcbiAqIC8vIFBhc3MgYSBmbGF0IGFycmF5IGFuZCBzcGVjaWZ5IGEgc2hhcGUuXG4gKiB0Zi50ZW5zb3I2ZChbMSwgMiwgMywgNCwgNSwgNiwgNywgOF0sIFsxLCAxLCAyLCAyLCAyLCAxXSkucHJpbnQoKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB2YWx1ZXMgVGhlIHZhbHVlcyBvZiB0aGUgdGVuc29yLiBDYW4gYmUgbmVzdGVkIGFycmF5IG9mIG51bWJlcnMsXG4gKiAgICAgb3IgYSBmbGF0IGFycmF5LCBvciBhIGBUeXBlZEFycmF5YC5cbiAqIEBwYXJhbSBzaGFwZSBUaGUgc2hhcGUgb2YgdGhlIHRlbnNvci4gT3B0aW9uYWwuIElmIG5vdCBwcm92aWRlZCxcbiAqICAgaXQgaXMgaW5mZXJyZWQgZnJvbSBgdmFsdWVzYC5cbiAqIEBwYXJhbSBkdHlwZSBUaGUgZGF0YSB0eXBlLlxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdUZW5zb3JzJywgc3ViaGVhZGluZzogJ0NyZWF0aW9uJ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRlbnNvcjZkKFxuICAgIHZhbHVlczogVGVuc29yTGlrZTZELFxuICAgIHNoYXBlPzogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdLFxuICAgIGR0eXBlPzogRGF0YVR5cGUpOiBUZW5zb3I2RCB7XG4gIGFzc2VydE5vbk51bGwodmFsdWVzKTtcbiAgaWYgKHNoYXBlICE9IG51bGwgJiYgc2hhcGUubGVuZ3RoICE9PSA2KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0ZW5zb3I2ZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGhhdmUgc2l4IG51bWJlcnMnKTtcbiAgfVxuICBjb25zdCBpbmZlcnJlZFNoYXBlID0gaW5mZXJTaGFwZSh2YWx1ZXMsIGR0eXBlKTtcbiAgaWYgKGluZmVycmVkU2hhcGUubGVuZ3RoICE9PSA2ICYmIGluZmVycmVkU2hhcGUubGVuZ3RoICE9PSAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAndGVuc29yNmQoKSByZXF1aXJlcyB2YWx1ZXMgdG8gYmUgbnVtYmVyW11bXVtdW11bXVtdIG9yICcgK1xuICAgICAgICAnZmxhdC9UeXBlZEFycmF5Jyk7XG4gIH1cbiAgaWYgKGluZmVycmVkU2hhcGUubGVuZ3RoID09PSAxICYmIHNoYXBlID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICd0ZW5zb3I2ZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGJlIHByb3ZpZGVkIHdoZW4gYHZhbHVlc2AgJyArXG4gICAgICAgICdhcmUgYSBmbGF0IGFycmF5Jyk7XG4gIH1cbiAgc2hhcGUgPSBzaGFwZSB8fFxuICAgICAgaW5mZXJyZWRTaGFwZSBhcyBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG4gIHJldHVybiBtYWtlVGVuc29yKHZhbHVlcywgc2hhcGUsIGluZmVycmVkU2hhcGUsIGR0eXBlKSBhcyBUZW5zb3I2RDtcbn1cbiJdfQ==","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { TensorScatterUpdate } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport * as scatter_nd_util from './scatter_nd_util';\n/**\n * Creates a new tensor by applying sparse updates to individual\n * values or slices to the passed in tensor according to\n * indices. This operator is the similar to scatterNd op, except that the\n * udpates are scattered on an existing tensor (as opposed to a zero-tensor).\n *\n * If indices contains duplicates, then we pick the last update for the index.\n *\n * If an out of bound index is found on CPU, an error is returned.\n *\n * Warning: There are some GPU specific semantics for this operation.\n *  - If an out of bound index is found, the index is ignored.\n *  - The order in which updates are applied is nondeterministic, so the output\n * will be nondeterministic if indices contains duplicates.\n * ```js\n * const shape = [8];\n * const tensor = tf.ones(shape);\n * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');\n * const updates = tf.tensor1d([9, 10, 11, 12]);\n *\n * tf.tensorScatterUpdate(tensor, indices, updates).print();\n *    //[1, 11, 1, 10, 9, 1, 1, 12]\n * ```\n *\n * @param tensor A Tensor. Tensor to copy/update.\n * @param indices The tensor contains the indices into the output tensor, must\n *     have at least 2 axes: (num_updates, index_depth).\n * @param updates The tensor contains the value for the indices.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nfunction tensorScatterUpdate_(tensor, indices, updates) {\n    const $tensor = convertToTensor(tensor, 'tensor', 'tensorScatterupdate');\n    const $indices = convertToTensor(indices, 'indices', 'tensorScatterupdate', 'int32');\n    const $updates = convertToTensor(updates, 'updates', 'tensorScatterupdate');\n    scatter_nd_util.validateInput($updates, $indices, $tensor.shape);\n    if ($tensor.dtype !== $updates.dtype) {\n        throw new Error(`tensor and updates must have the same dtype, instead they are ${$tensor.dtype} and ${$updates.dtype}.`);\n    }\n    const inputs = {\n        tensor: $tensor,\n        indices: $indices,\n        updates: $updates\n    };\n    const attrs = {};\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    return ENGINE.runKernel(TensorScatterUpdate, inputs, attrs);\n}\nexport const tensorScatterUpdate = op({ tensorScatterUpdate_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuc29yX3NjYXR0ZXJfdXBkYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb3JlL3NyYy9vcHMvdGVuc29yX3NjYXR0ZXJfdXBkYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFDLG1CQUFtQixFQUFzRCxNQUFNLGlCQUFpQixDQUFDO0FBSXpHLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUduRCxPQUFPLEVBQUMsRUFBRSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sS0FBSyxlQUFlLE1BQU0sbUJBQW1CLENBQUM7QUFFckQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQThCRztBQUNILFNBQVMsb0JBQW9CLENBQ3pCLE1BQTRCLEVBQUUsT0FBMEIsRUFDeEQsT0FBMEI7SUFDNUIsTUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUN6RSxNQUFNLFFBQVEsR0FDVixlQUFlLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxxQkFBcUIsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN4RSxNQUFNLFFBQVEsR0FBRyxlQUFlLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBQzVFLGVBQWUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakUsSUFBSSxPQUFPLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxLQUFLLEVBQUU7UUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FDWCxpRUFDSSxPQUFPLENBQUMsS0FBSyxRQUFRLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0tBQ2pEO0lBRUQsTUFBTSxNQUFNLEdBQThCO1FBQ3hDLE1BQU0sRUFBRSxPQUFPO1FBQ2YsT0FBTyxFQUFFLFFBQVE7UUFDakIsT0FBTyxFQUFFLFFBQVE7S0FDbEIsQ0FBQztJQUNGLE1BQU0sS0FBSyxHQUE2QixFQUFFLENBQUM7SUFFM0MsMERBQTBEO0lBQzFELE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FDWixtQkFBbUIsRUFBRSxNQUFtQyxFQUN4RCxLQUFnQyxDQUFjLENBQUM7QUFDNUQsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLEVBQUUsQ0FBQyxFQUFDLG9CQUFvQixFQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtFTkdJTkV9IGZyb20gJy4uL2VuZ2luZSc7XG5pbXBvcnQge1RlbnNvclNjYXR0ZXJVcGRhdGUsIFRlbnNvclNjYXR0ZXJVcGRhdGVBdHRycywgVGVuc29yU2NhdHRlclVwZGF0ZUlucHV0c30gZnJvbSAnLi4va2VybmVsX25hbWVzJztcbmltcG9ydCB7TmFtZWRBdHRyTWFwfSBmcm9tICcuLi9rZXJuZWxfcmVnaXN0cnknO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge05hbWVkVGVuc29yTWFwfSBmcm9tICcuLi90ZW5zb3JfdHlwZXMnO1xuaW1wb3J0IHtjb252ZXJ0VG9UZW5zb3J9IGZyb20gJy4uL3RlbnNvcl91dGlsX2Vudic7XG5pbXBvcnQge1JhbmssIFRlbnNvckxpa2V9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHtvcH0gZnJvbSAnLi9vcGVyYXRpb24nO1xuaW1wb3J0ICogYXMgc2NhdHRlcl9uZF91dGlsIGZyb20gJy4vc2NhdHRlcl9uZF91dGlsJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHRlbnNvciBieSBhcHBseWluZyBzcGFyc2UgdXBkYXRlcyB0byBpbmRpdmlkdWFsXG4gKiB2YWx1ZXMgb3Igc2xpY2VzIHRvIHRoZSBwYXNzZWQgaW4gdGVuc29yIGFjY29yZGluZyB0b1xuICogaW5kaWNlcy4gVGhpcyBvcGVyYXRvciBpcyB0aGUgc2ltaWxhciB0byBzY2F0dGVyTmQgb3AsIGV4Y2VwdCB0aGF0IHRoZVxuICogdWRwYXRlcyBhcmUgc2NhdHRlcmVkIG9uIGFuIGV4aXN0aW5nIHRlbnNvciAoYXMgb3Bwb3NlZCB0byBhIHplcm8tdGVuc29yKS5cbiAqXG4gKiBJZiBpbmRpY2VzIGNvbnRhaW5zIGR1cGxpY2F0ZXMsIHRoZW4gd2UgcGljayB0aGUgbGFzdCB1cGRhdGUgZm9yIHRoZSBpbmRleC5cbiAqXG4gKiBJZiBhbiBvdXQgb2YgYm91bmQgaW5kZXggaXMgZm91bmQgb24gQ1BVLCBhbiBlcnJvciBpcyByZXR1cm5lZC5cbiAqXG4gKiBXYXJuaW5nOiBUaGVyZSBhcmUgc29tZSBHUFUgc3BlY2lmaWMgc2VtYW50aWNzIGZvciB0aGlzIG9wZXJhdGlvbi5cbiAqICAtIElmIGFuIG91dCBvZiBib3VuZCBpbmRleCBpcyBmb3VuZCwgdGhlIGluZGV4IGlzIGlnbm9yZWQuXG4gKiAgLSBUaGUgb3JkZXIgaW4gd2hpY2ggdXBkYXRlcyBhcmUgYXBwbGllZCBpcyBub25kZXRlcm1pbmlzdGljLCBzbyB0aGUgb3V0cHV0XG4gKiB3aWxsIGJlIG5vbmRldGVybWluaXN0aWMgaWYgaW5kaWNlcyBjb250YWlucyBkdXBsaWNhdGVzLlxuICogYGBganNcbiAqIGNvbnN0IHNoYXBlID0gWzhdO1xuICogY29uc3QgdGVuc29yID0gdGYub25lcyhzaGFwZSk7XG4gKiBjb25zdCBpbmRpY2VzID0gdGYudGVuc29yMmQoWzQsIDMsIDEsIDddLCBbNCwgMV0sICdpbnQzMicpO1xuICogY29uc3QgdXBkYXRlcyA9IHRmLnRlbnNvcjFkKFs5LCAxMCwgMTEsIDEyXSk7XG4gKlxuICogdGYudGVuc29yU2NhdHRlclVwZGF0ZSh0ZW5zb3IsIGluZGljZXMsIHVwZGF0ZXMpLnByaW50KCk7XG4gKiAgICAvL1sxLCAxMSwgMSwgMTAsIDksIDEsIDEsIDEyXVxuICogYGBgXG4gKlxuICogQHBhcmFtIHRlbnNvciBBIFRlbnNvci4gVGVuc29yIHRvIGNvcHkvdXBkYXRlLlxuICogQHBhcmFtIGluZGljZXMgVGhlIHRlbnNvciBjb250YWlucyB0aGUgaW5kaWNlcyBpbnRvIHRoZSBvdXRwdXQgdGVuc29yLCBtdXN0XG4gKiAgICAgaGF2ZSBhdCBsZWFzdCAyIGF4ZXM6IChudW1fdXBkYXRlcywgaW5kZXhfZGVwdGgpLlxuICogQHBhcmFtIHVwZGF0ZXMgVGhlIHRlbnNvciBjb250YWlucyB0aGUgdmFsdWUgZm9yIHRoZSBpbmRpY2VzLlxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdPcGVyYXRpb25zJywgc3ViaGVhZGluZzogJ1NsaWNpbmcgYW5kIEpvaW5pbmcnfVxuICovXG5mdW5jdGlvbiB0ZW5zb3JTY2F0dGVyVXBkYXRlXzxSIGV4dGVuZHMgUmFuaz4oXG4gICAgdGVuc29yOiBUZW5zb3I8Uj58VGVuc29yTGlrZSwgaW5kaWNlczogVGVuc29yfFRlbnNvckxpa2UsXG4gICAgdXBkYXRlczogVGVuc29yfFRlbnNvckxpa2UpOiBUZW5zb3I8Uj4ge1xuICBjb25zdCAkdGVuc29yID0gY29udmVydFRvVGVuc29yKHRlbnNvciwgJ3RlbnNvcicsICd0ZW5zb3JTY2F0dGVydXBkYXRlJyk7XG4gIGNvbnN0ICRpbmRpY2VzID1cbiAgICAgIGNvbnZlcnRUb1RlbnNvcihpbmRpY2VzLCAnaW5kaWNlcycsICd0ZW5zb3JTY2F0dGVydXBkYXRlJywgJ2ludDMyJyk7XG4gIGNvbnN0ICR1cGRhdGVzID0gY29udmVydFRvVGVuc29yKHVwZGF0ZXMsICd1cGRhdGVzJywgJ3RlbnNvclNjYXR0ZXJ1cGRhdGUnKTtcbiAgc2NhdHRlcl9uZF91dGlsLnZhbGlkYXRlSW5wdXQoJHVwZGF0ZXMsICRpbmRpY2VzLCAkdGVuc29yLnNoYXBlKTtcbiAgaWYgKCR0ZW5zb3IuZHR5cGUgIT09ICR1cGRhdGVzLmR0eXBlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgdGVuc29yIGFuZCB1cGRhdGVzIG11c3QgaGF2ZSB0aGUgc2FtZSBkdHlwZSwgaW5zdGVhZCB0aGV5IGFyZSAke1xuICAgICAgICAgICAgJHRlbnNvci5kdHlwZX0gYW5kICR7JHVwZGF0ZXMuZHR5cGV9LmApO1xuICB9XG5cbiAgY29uc3QgaW5wdXRzOiBUZW5zb3JTY2F0dGVyVXBkYXRlSW5wdXRzID0ge1xuICAgIHRlbnNvcjogJHRlbnNvcixcbiAgICBpbmRpY2VzOiAkaW5kaWNlcyxcbiAgICB1cGRhdGVzOiAkdXBkYXRlc1xuICB9O1xuICBjb25zdCBhdHRyczogVGVuc29yU2NhdHRlclVwZGF0ZUF0dHJzID0ge307XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby11bm5lY2Vzc2FyeS10eXBlLWFzc2VydGlvblxuICByZXR1cm4gRU5HSU5FLnJ1bktlcm5lbChcbiAgICAgICAgICAgICBUZW5zb3JTY2F0dGVyVXBkYXRlLCBpbnB1dHMgYXMgdW5rbm93biBhcyBOYW1lZFRlbnNvck1hcCxcbiAgICAgICAgICAgICBhdHRycyBhcyB1bmtub3duIGFzIE5hbWVkQXR0ck1hcCkgYXMgVGVuc29yPFI+O1xufVxuXG5leHBvcnQgY29uc3QgdGVuc29yU2NhdHRlclVwZGF0ZSA9IG9wKHt0ZW5zb3JTY2F0dGVyVXBkYXRlX30pO1xuIl19","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { searchSorted } from './search_sorted';\n/**\n * Searches for where a value would go in a sorted sequence.\n *\n * This is not a method for checking containment (like javascript in).\n *\n * The typical use case for this operation is \"binning\", \"bucketing\", or\n * \"discretizing\". The values are assigned to bucket-indices based on the edges\n * listed in 'sortedSequence'. This operation returns the bucket-index for each\n * value.\n *\n * The index returned corresponds to the first edge greater than the value.\n *\n * The axis is not settable for this operation. It always operates on the\n * innermost dimension (axis=-1). The operation will accept any number of outer\n * dimensions.\n *\n * Note: This operation assumes that 'upperBound' is sorted along the\n * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not\n * sorted no error is raised and the content of the returned tensor is not well\n * defined.\n *\n * ```js\n * const seq = tf.tensor1d([0, 3, 9, 10, 10]);\n * const values = tf.tensor1d([0, 4, 10]);\n * const result = tf.upperBound(seq, values);\n * result.print(); // [1, 2, 5]\n * ```\n * @param sortedSequence: N-D. Sorted sequence.\n * @param values: N-D. Search values.\n * @return An N-D int32 tensor the size of values containing the result of\n *     applying upper bound to each value. The result is not a global index to\n *     the entire Tensor, but the index in the last dimension.\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nexport function upperBound(sortedSequence, values) {\n    return searchSorted(sortedSequence, values, 'right');\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBwZXJfYm91bmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy91cHBlcl9ib3VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFJSCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFFN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWlDRztBQUNILE1BQU0sVUFBVSxVQUFVLENBQ3RCLGNBQWlDLEVBQUUsTUFBeUI7SUFDOUQsT0FBTyxZQUFZLENBQUMsY0FBYyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN2RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7VGVuc29yTGlrZX0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtzZWFyY2hTb3J0ZWR9IGZyb20gJy4vc2VhcmNoX3NvcnRlZCc7XG5cbi8qKlxuICogU2VhcmNoZXMgZm9yIHdoZXJlIGEgdmFsdWUgd291bGQgZ28gaW4gYSBzb3J0ZWQgc2VxdWVuY2UuXG4gKlxuICogVGhpcyBpcyBub3QgYSBtZXRob2QgZm9yIGNoZWNraW5nIGNvbnRhaW5tZW50IChsaWtlIGphdmFzY3JpcHQgaW4pLlxuICpcbiAqIFRoZSB0eXBpY2FsIHVzZSBjYXNlIGZvciB0aGlzIG9wZXJhdGlvbiBpcyBcImJpbm5pbmdcIiwgXCJidWNrZXRpbmdcIiwgb3JcbiAqIFwiZGlzY3JldGl6aW5nXCIuIFRoZSB2YWx1ZXMgYXJlIGFzc2lnbmVkIHRvIGJ1Y2tldC1pbmRpY2VzIGJhc2VkIG9uIHRoZSBlZGdlc1xuICogbGlzdGVkIGluICdzb3J0ZWRTZXF1ZW5jZScuIFRoaXMgb3BlcmF0aW9uIHJldHVybnMgdGhlIGJ1Y2tldC1pbmRleCBmb3IgZWFjaFxuICogdmFsdWUuXG4gKlxuICogVGhlIGluZGV4IHJldHVybmVkIGNvcnJlc3BvbmRzIHRvIHRoZSBmaXJzdCBlZGdlIGdyZWF0ZXIgdGhhbiB0aGUgdmFsdWUuXG4gKlxuICogVGhlIGF4aXMgaXMgbm90IHNldHRhYmxlIGZvciB0aGlzIG9wZXJhdGlvbi4gSXQgYWx3YXlzIG9wZXJhdGVzIG9uIHRoZVxuICogaW5uZXJtb3N0IGRpbWVuc2lvbiAoYXhpcz0tMSkuIFRoZSBvcGVyYXRpb24gd2lsbCBhY2NlcHQgYW55IG51bWJlciBvZiBvdXRlclxuICogZGltZW5zaW9ucy5cbiAqXG4gKiBOb3RlOiBUaGlzIG9wZXJhdGlvbiBhc3N1bWVzIHRoYXQgJ3VwcGVyQm91bmQnIGlzIHNvcnRlZCBhbG9uZyB0aGVcbiAqIGlubmVybW9zdCBheGlzLCBtYXliZSB1c2luZyAnc29ydCguLi4sIGF4aXM9LTEpJy4gSWYgdGhlIHNlcXVlbmNlIGlzIG5vdFxuICogc29ydGVkIG5vIGVycm9yIGlzIHJhaXNlZCBhbmQgdGhlIGNvbnRlbnQgb2YgdGhlIHJldHVybmVkIHRlbnNvciBpcyBub3Qgd2VsbFxuICogZGVmaW5lZC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3Qgc2VxID0gdGYudGVuc29yMWQoWzAsIDMsIDksIDEwLCAxMF0pO1xuICogY29uc3QgdmFsdWVzID0gdGYudGVuc29yMWQoWzAsIDQsIDEwXSk7XG4gKiBjb25zdCByZXN1bHQgPSB0Zi51cHBlckJvdW5kKHNlcSwgdmFsdWVzKTtcbiAqIHJlc3VsdC5wcmludCgpOyAvLyBbMSwgMiwgNV1cbiAqIGBgYFxuICogQHBhcmFtIHNvcnRlZFNlcXVlbmNlOiBOLUQuIFNvcnRlZCBzZXF1ZW5jZS5cbiAqIEBwYXJhbSB2YWx1ZXM6IE4tRC4gU2VhcmNoIHZhbHVlcy5cbiAqIEByZXR1cm4gQW4gTi1EIGludDMyIHRlbnNvciB0aGUgc2l6ZSBvZiB2YWx1ZXMgY29udGFpbmluZyB0aGUgcmVzdWx0IG9mXG4gKiAgICAgYXBwbHlpbmcgdXBwZXIgYm91bmQgdG8gZWFjaCB2YWx1ZS4gVGhlIHJlc3VsdCBpcyBub3QgYSBnbG9iYWwgaW5kZXggdG9cbiAqICAgICB0aGUgZW50aXJlIFRlbnNvciwgYnV0IHRoZSBpbmRleCBpbiB0aGUgbGFzdCBkaW1lbnNpb24uXG4gKiBAZG9jIHtoZWFkaW5nOiAnT3BlcmF0aW9ucycsIHN1YmhlYWRpbmc6ICdFdmFsdWF0aW9uJ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwcGVyQm91bmQoXG4gICAgc29ydGVkU2VxdWVuY2U6IFRlbnNvcnxUZW5zb3JMaWtlLCB2YWx1ZXM6IFRlbnNvcnxUZW5zb3JMaWtlKTogVGVuc29yIHtcbiAgcmV0dXJuIHNlYXJjaFNvcnRlZChzb3J0ZWRTZXF1ZW5jZSwgdmFsdWVzLCAncmlnaHQnKTtcbn1cbiJdfQ==","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { whereImpl } from '../backends/where_impl';\nimport { convertToTensor } from '../tensor_util_env';\n/**\n * Returns the coordinates of true elements of condition.\n *\n * The coordinates are returned in a 2-D tensor where the first dimension (rows)\n * represents the number of true elements, and the second dimension (columns)\n * represents the coordinates of the true elements. Keep in mind, the shape of\n * the output tensor can vary depending on how many true values there are in\n * input. Indices are output in row-major order. The resulting tensor has the\n * shape `[numTrueElems, condition.rank]`.\n *\n * This is analogous to calling the python `tf.where(cond)` without an x or y.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const result = await tf.whereAsync(cond);\n * result.print();\n * ```\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nasync function whereAsync_(condition) {\n    const $condition = convertToTensor(condition, 'condition', 'whereAsync', 'bool');\n    const vals = await $condition.data();\n    const res = whereImpl($condition.shape, vals);\n    if (condition !== $condition) {\n        $condition.dispose();\n    }\n    return res;\n}\nexport const whereAsync = whereAsync_;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2hlcmVfYXN5bmMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy93aGVyZV9hc3luYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFakQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBR25EOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBQ0gsS0FBSyxVQUFVLFdBQVcsQ0FBQyxTQUE0QjtJQUNyRCxNQUFNLFVBQVUsR0FDWixlQUFlLENBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEUsTUFBTSxJQUFJLEdBQUcsTUFBTSxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDckMsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsSUFBSSxTQUFTLEtBQUssVUFBVSxFQUFFO1FBQzVCLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUN0QjtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5pbXBvcnQge3doZXJlSW1wbH0gZnJvbSAnLi4vYmFja2VuZHMvd2hlcmVfaW1wbCc7XG5pbXBvcnQge1RlbnNvciwgVGVuc29yMkR9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge2NvbnZlcnRUb1RlbnNvcn0gZnJvbSAnLi4vdGVuc29yX3V0aWxfZW52JztcbmltcG9ydCB7VGVuc29yTGlrZX0gZnJvbSAnLi4vdHlwZXMnO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvb3JkaW5hdGVzIG9mIHRydWUgZWxlbWVudHMgb2YgY29uZGl0aW9uLlxuICpcbiAqIFRoZSBjb29yZGluYXRlcyBhcmUgcmV0dXJuZWQgaW4gYSAyLUQgdGVuc29yIHdoZXJlIHRoZSBmaXJzdCBkaW1lbnNpb24gKHJvd3MpXG4gKiByZXByZXNlbnRzIHRoZSBudW1iZXIgb2YgdHJ1ZSBlbGVtZW50cywgYW5kIHRoZSBzZWNvbmQgZGltZW5zaW9uIChjb2x1bW5zKVxuICogcmVwcmVzZW50cyB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIHRydWUgZWxlbWVudHMuIEtlZXAgaW4gbWluZCwgdGhlIHNoYXBlIG9mXG4gKiB0aGUgb3V0cHV0IHRlbnNvciBjYW4gdmFyeSBkZXBlbmRpbmcgb24gaG93IG1hbnkgdHJ1ZSB2YWx1ZXMgdGhlcmUgYXJlIGluXG4gKiBpbnB1dC4gSW5kaWNlcyBhcmUgb3V0cHV0IGluIHJvdy1tYWpvciBvcmRlci4gVGhlIHJlc3VsdGluZyB0ZW5zb3IgaGFzIHRoZVxuICogc2hhcGUgYFtudW1UcnVlRWxlbXMsIGNvbmRpdGlvbi5yYW5rXWAuXG4gKlxuICogVGhpcyBpcyBhbmFsb2dvdXMgdG8gY2FsbGluZyB0aGUgcHl0aG9uIGB0Zi53aGVyZShjb25kKWAgd2l0aG91dCBhbiB4IG9yIHkuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGNvbmQgPSB0Zi50ZW5zb3IxZChbZmFsc2UsIGZhbHNlLCB0cnVlXSwgJ2Jvb2wnKTtcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRmLndoZXJlQXN5bmMoY29uZCk7XG4gKiByZXN1bHQucHJpbnQoKTtcbiAqIGBgYFxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdPcGVyYXRpb25zJywgc3ViaGVhZGluZzogJ0xvZ2ljYWwnfVxuICovXG5hc3luYyBmdW5jdGlvbiB3aGVyZUFzeW5jXyhjb25kaXRpb246IFRlbnNvcnxUZW5zb3JMaWtlKTogUHJvbWlzZTxUZW5zb3IyRD4ge1xuICBjb25zdCAkY29uZGl0aW9uID1cbiAgICAgIGNvbnZlcnRUb1RlbnNvcihjb25kaXRpb24sICdjb25kaXRpb24nLCAnd2hlcmVBc3luYycsICdib29sJyk7XG4gIGNvbnN0IHZhbHMgPSBhd2FpdCAkY29uZGl0aW9uLmRhdGEoKTtcbiAgY29uc3QgcmVzID0gd2hlcmVJbXBsKCRjb25kaXRpb24uc2hhcGUsIHZhbHMpO1xuICBpZiAoY29uZGl0aW9uICE9PSAkY29uZGl0aW9uKSB7XG4gICAgJGNvbmRpdGlvbi5kaXNwb3NlKCk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGNvbnN0IHdoZXJlQXN5bmMgPSB3aGVyZUFzeW5jXztcbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { gather } from './gather';\nimport { reshape } from './reshape';\nimport { squeeze } from './squeeze';\nimport { whereAsync } from './where_async';\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param tensor N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nasync function booleanMaskAsync_(tensor, mask, axis) {\n    const $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n    const $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n    const axisFrom = axis == null ? 0 : axis;\n    const maskDim = $mask.rank;\n    const tensorShape = $tensor.shape;\n    util.assert(maskDim > 0, () => 'mask cannot be scalar');\n    util.assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, `mask's shape must match the first K dimensions of tensor's shape,`);\n    let leadingSize = 1;\n    for (let i = axisFrom; i < axisFrom + maskDim; i++) {\n        leadingSize *= tensorShape[i];\n    }\n    const targetTensorShape = tensorShape.slice(0, axisFrom)\n        .concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n    const reshapedTensor = reshape($tensor, targetTensorShape);\n    const reshapedMask = reshape($mask, [-1]);\n    const positivePositions = await whereAsync(reshapedMask);\n    const indices = squeeze(positivePositions, [1]);\n    const res = gather(reshapedTensor, indices, axisFrom);\n    // Ensure no memory leak.\n    if (tensor !== $tensor) {\n        $tensor.dispose();\n    }\n    if (mask !== $mask) {\n        $mask.dispose();\n    }\n    indices.dispose();\n    reshapedTensor.dispose();\n    reshapedMask.dispose();\n    positivePositions.dispose();\n    return res;\n}\nexport const booleanMaskAsync = booleanMaskAsync_;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vbGVhbl9tYXNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb3JlL3NyYy9vcHMvYm9vbGVhbl9tYXNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVuRCxPQUFPLEtBQUssSUFBSSxNQUFNLFNBQVMsQ0FBQztBQUVoQyxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDbEMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNsQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXpDOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUNILEtBQUssVUFBVSxpQkFBaUIsQ0FDNUIsTUFBeUIsRUFBRSxJQUF1QixFQUNsRCxJQUFhO0lBQ2YsTUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDOUQsTUFBTSxLQUFLLEdBQUcsZUFBZSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRWhFLE1BQU0sUUFBUSxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3pDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDM0IsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUVsQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUN4RCxJQUFJLENBQUMsaUJBQWlCLENBQ2xCLFdBQVcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFFBQVEsR0FBRyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUM1RCxtRUFBbUUsQ0FBQyxDQUFDO0lBRXpFLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNwQixLQUFLLElBQUksQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEdBQUcsUUFBUSxHQUFHLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNsRCxXQUFXLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQy9CO0lBQ0QsTUFBTSxpQkFBaUIsR0FDbkIsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDO1NBQ3pCLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDdEUsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQzNELE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUMsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN6RCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWhELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRXRELHlCQUF5QjtJQUN6QixJQUFJLE1BQU0sS0FBSyxPQUFPLEVBQUU7UUFDdEIsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ25CO0lBQ0QsSUFBSSxJQUFJLEtBQUssS0FBSyxFQUFFO1FBQ2xCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNqQjtJQUNELE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNsQixjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDekIsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZCLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRTVCLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7Y29udmVydFRvVGVuc29yfSBmcm9tICcuLi90ZW5zb3JfdXRpbF9lbnYnO1xuaW1wb3J0IHtUZW5zb3JMaWtlfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQge2dhdGhlcn0gZnJvbSAnLi9nYXRoZXInO1xuaW1wb3J0IHtyZXNoYXBlfSBmcm9tICcuL3Jlc2hhcGUnO1xuaW1wb3J0IHtzcXVlZXplfSBmcm9tICcuL3NxdWVlemUnO1xuaW1wb3J0IHt3aGVyZUFzeW5jfSBmcm9tICcuL3doZXJlX2FzeW5jJztcblxuLyoqXG4gKiBBcHBseSBib29sZWFuIG1hc2sgdG8gdGVuc29yLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCB0ZW5zb3IgPSB0Zi50ZW5zb3IyZChbMSwgMiwgMywgNCwgNSwgNl0sIFszLCAyXSk7XG4gKiBjb25zdCBtYXNrID0gdGYudGVuc29yMWQoWzEsIDAsIDFdLCAnYm9vbCcpO1xuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgdGYuYm9vbGVhbk1hc2tBc3luYyh0ZW5zb3IsIG1hc2spO1xuICogcmVzdWx0LnByaW50KCk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdGVuc29yIE4tRCB0ZW5zb3IuXG4gKiBAcGFyYW0gbWFzayBLLUQgYm9vbGVhbiB0ZW5zb3IsIEsgPD0gTiBhbmQgSyBtdXN0IGJlIGtub3duIHN0YXRpY2FsbHkuXG4gKiBAcGFyYW0gYXhpcyBBIDAtRCBpbnQgVGVuc29yIHJlcHJlc2VudGluZyB0aGUgYXhpcyBpbiB0ZW5zb3IgdG8gbWFzayBmcm9tLlxuICogICAgIEJ5IGRlZmF1bHQsIGF4aXMgaXMgMCB3aGljaCB3aWxsIG1hc2sgZnJvbSB0aGUgZmlyc3QgZGltZW5zaW9uLlxuICogICAgIE90aGVyd2lzZSBLICsgYXhpcyA8PSBOLlxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdUZW5zb3JzJywgc3ViaGVhZGluZzogJ1NsaWNpbmcgYW5kIEpvaW5pbmcnfVxuICovXG5hc3luYyBmdW5jdGlvbiBib29sZWFuTWFza0FzeW5jXyhcbiAgICB0ZW5zb3I6IFRlbnNvcnxUZW5zb3JMaWtlLCBtYXNrOiBUZW5zb3J8VGVuc29yTGlrZSxcbiAgICBheGlzPzogbnVtYmVyKTogUHJvbWlzZTxUZW5zb3I+IHtcbiAgY29uc3QgJHRlbnNvciA9IGNvbnZlcnRUb1RlbnNvcih0ZW5zb3IsICd0ZW5zb3InLCAnYm9vbE1hc2snKTtcbiAgY29uc3QgJG1hc2sgPSBjb252ZXJ0VG9UZW5zb3IobWFzaywgJ21hc2snLCAnYm9vbE1hc2snLCAnYm9vbCcpO1xuXG4gIGNvbnN0IGF4aXNGcm9tID0gYXhpcyA9PSBudWxsID8gMCA6IGF4aXM7XG4gIGNvbnN0IG1hc2tEaW0gPSAkbWFzay5yYW5rO1xuICBjb25zdCB0ZW5zb3JTaGFwZSA9ICR0ZW5zb3Iuc2hhcGU7XG5cbiAgdXRpbC5hc3NlcnQobWFza0RpbSA+IDAsICgpID0+ICdtYXNrIGNhbm5vdCBiZSBzY2FsYXInKTtcbiAgdXRpbC5hc3NlcnRTaGFwZXNNYXRjaChcbiAgICAgIHRlbnNvclNoYXBlLnNsaWNlKGF4aXNGcm9tLCBheGlzRnJvbSArIG1hc2tEaW0pLCAkbWFzay5zaGFwZSxcbiAgICAgIGBtYXNrJ3Mgc2hhcGUgbXVzdCBtYXRjaCB0aGUgZmlyc3QgSyBkaW1lbnNpb25zIG9mIHRlbnNvcidzIHNoYXBlLGApO1xuXG4gIGxldCBsZWFkaW5nU2l6ZSA9IDE7XG4gIGZvciAobGV0IGkgPSBheGlzRnJvbTsgaSA8IGF4aXNGcm9tICsgbWFza0RpbTsgaSsrKSB7XG4gICAgbGVhZGluZ1NpemUgKj0gdGVuc29yU2hhcGVbaV07XG4gIH1cbiAgY29uc3QgdGFyZ2V0VGVuc29yU2hhcGUgPVxuICAgICAgdGVuc29yU2hhcGUuc2xpY2UoMCwgYXhpc0Zyb20pXG4gICAgICAgICAgLmNvbmNhdChbbGVhZGluZ1NpemVdLCB0ZW5zb3JTaGFwZS5zbGljZShheGlzRnJvbSArIG1hc2tEaW0pKTtcbiAgY29uc3QgcmVzaGFwZWRUZW5zb3IgPSByZXNoYXBlKCR0ZW5zb3IsIHRhcmdldFRlbnNvclNoYXBlKTtcbiAgY29uc3QgcmVzaGFwZWRNYXNrID0gcmVzaGFwZSgkbWFzaywgWy0xXSk7XG4gIGNvbnN0IHBvc2l0aXZlUG9zaXRpb25zID0gYXdhaXQgd2hlcmVBc3luYyhyZXNoYXBlZE1hc2spO1xuICBjb25zdCBpbmRpY2VzID0gc3F1ZWV6ZShwb3NpdGl2ZVBvc2l0aW9ucywgWzFdKTtcblxuICBjb25zdCByZXMgPSBnYXRoZXIocmVzaGFwZWRUZW5zb3IsIGluZGljZXMsIGF4aXNGcm9tKTtcblxuICAvLyBFbnN1cmUgbm8gbWVtb3J5IGxlYWsuXG4gIGlmICh0ZW5zb3IgIT09ICR0ZW5zb3IpIHtcbiAgICAkdGVuc29yLmRpc3Bvc2UoKTtcbiAgfVxuICBpZiAobWFzayAhPT0gJG1hc2spIHtcbiAgICAkbWFzay5kaXNwb3NlKCk7XG4gIH1cbiAgaW5kaWNlcy5kaXNwb3NlKCk7XG4gIHJlc2hhcGVkVGVuc29yLmRpc3Bvc2UoKTtcbiAgcmVzaGFwZWRNYXNrLmRpc3Bvc2UoKTtcbiAgcG9zaXRpdmVQb3NpdGlvbnMuZGlzcG9zZSgpO1xuXG4gIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCBjb25zdCBib29sZWFuTWFza0FzeW5jID0gYm9vbGVhbk1hc2tBc3luY187XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assertTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { add } from './add';\nimport { div } from './div';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { pow } from './pow';\nimport { scalar } from './scalar';\nimport { sub } from './sub';\n/**\n * Compute the moving average of a variable.\n *\n * Without zeroDebias, the moving average operation is defined by:\n *   `v += delta`\n * where\n *   `delta = (1 - decay) * (x - v)`\n *\n * With zeroDebias (default), the `delta` term is scaled to debias the\n * effect of the (assumed) zero-initialization of `v`.\n *   `delta /= (1 - decay ^ step)`\n *\n * For more details on the zero-debiasing algorithm, see:\n *   https://arxiv.org/abs/1412.6980\n *\n * Note that this function is completely stateless and does not keep track of\n * step count. The step count needs to be maintained by the caller and passed\n * in as `step`.\n *\n * @param v The current moving average value.\n * @param x New input value, must have the same shape and dtype as `v`.\n * @param decay The decay factor. Typical values are 0.95 and 0.99.\n * @param step Step count.\n * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).\n * @returns The new moving average value.\n *\n * @doc {heading: 'Operations', subheading: 'Moving Average'}\n */\nfunction movingAverage_(v, x, decay, step, zeroDebias = true) {\n    const $v = convertToTensor(v, 'v', 'movingAverage');\n    const $x = convertToTensor(x, 'x', 'movingAverage');\n    const $decay = convertToTensor(decay, 'decay', 'movingAverage');\n    assertTypesMatch($v, $x);\n    util.assert(util.arraysEqual($v.shape, $x.shape), () => 'Shape mismatch in v and x');\n    const one = scalar(1);\n    const oneMinusDecay = sub(one, $decay);\n    let update = mul(sub($x, $v), oneMinusDecay);\n    if (zeroDebias) {\n        util.assert(step != null, () => 'When using zeroDebias: true, step is required.');\n        const $step = convertToTensor(step, 'step', 'movingAverage');\n        update = div(update, sub(one, pow($decay, $step)));\n    }\n    return add($v, update);\n}\nexport const movingAverage = /* @__PURE__ */ op({ movingAverage_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW92aW5nX2F2ZXJhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9tb3ZpbmdfYXZlcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFbkQsT0FBTyxLQUFLLElBQUksTUFBTSxTQUFTLENBQUM7QUFFaEMsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxPQUFPLENBQUM7QUFDMUIsT0FBTyxFQUFDLEVBQUUsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUMvQixPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDaEMsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLE9BQU8sQ0FBQztBQUUxQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMkJHO0FBQ0gsU0FBUyxjQUFjLENBQ25CLENBQWUsRUFBRSxDQUFlLEVBQUUsS0FBb0IsRUFDdEQsSUFBb0IsRUFBRSxVQUFVLEdBQUcsSUFBSTtJQUN6QyxNQUFNLEVBQUUsR0FBRyxlQUFlLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUNwRCxNQUFNLEVBQUUsR0FBRyxlQUFlLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUNwRCxNQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztJQUVoRSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FDUCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLDJCQUEyQixDQUFDLENBQUM7SUFFN0UsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFdkMsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDN0MsSUFBSSxVQUFVLEVBQUU7UUFDZCxJQUFJLENBQUMsTUFBTSxDQUNQLElBQUksSUFBSSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsZ0RBQWdELENBQUMsQ0FBQztRQUMxRSxNQUFNLEtBQUssR0FBRyxlQUFlLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztRQUM3RCxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BEO0lBQ0QsT0FBTyxHQUFHLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsZUFBZSxDQUFDLEVBQUUsQ0FBQyxFQUFDLGNBQWMsRUFBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7U2NhbGFyLCBUZW5zb3J9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge2Fzc2VydFR5cGVzTWF0Y2h9IGZyb20gJy4uL3RlbnNvcl91dGlsJztcbmltcG9ydCB7Y29udmVydFRvVGVuc29yfSBmcm9tICcuLi90ZW5zb3JfdXRpbF9lbnYnO1xuaW1wb3J0IHtUZW5zb3JMaWtlfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQge2FkZH0gZnJvbSAnLi9hZGQnO1xuaW1wb3J0IHtkaXZ9IGZyb20gJy4vZGl2JztcbmltcG9ydCB7bXVsfSBmcm9tICcuL211bCc7XG5pbXBvcnQge29wfSBmcm9tICcuL29wZXJhdGlvbic7XG5pbXBvcnQge3Bvd30gZnJvbSAnLi9wb3cnO1xuaW1wb3J0IHtzY2FsYXJ9IGZyb20gJy4vc2NhbGFyJztcbmltcG9ydCB7c3VifSBmcm9tICcuL3N1Yic7XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgbW92aW5nIGF2ZXJhZ2Ugb2YgYSB2YXJpYWJsZS5cbiAqXG4gKiBXaXRob3V0IHplcm9EZWJpYXMsIHRoZSBtb3ZpbmcgYXZlcmFnZSBvcGVyYXRpb24gaXMgZGVmaW5lZCBieTpcbiAqICAgYHYgKz0gZGVsdGFgXG4gKiB3aGVyZVxuICogICBgZGVsdGEgPSAoMSAtIGRlY2F5KSAqICh4IC0gdilgXG4gKlxuICogV2l0aCB6ZXJvRGViaWFzIChkZWZhdWx0KSwgdGhlIGBkZWx0YWAgdGVybSBpcyBzY2FsZWQgdG8gZGViaWFzIHRoZVxuICogZWZmZWN0IG9mIHRoZSAoYXNzdW1lZCkgemVyby1pbml0aWFsaXphdGlvbiBvZiBgdmAuXG4gKiAgIGBkZWx0YSAvPSAoMSAtIGRlY2F5IF4gc3RlcClgXG4gKlxuICogRm9yIG1vcmUgZGV0YWlscyBvbiB0aGUgemVyby1kZWJpYXNpbmcgYWxnb3JpdGhtLCBzZWU6XG4gKiAgIGh0dHBzOi8vYXJ4aXYub3JnL2Ficy8xNDEyLjY5ODBcbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBjb21wbGV0ZWx5IHN0YXRlbGVzcyBhbmQgZG9lcyBub3Qga2VlcCB0cmFjayBvZlxuICogc3RlcCBjb3VudC4gVGhlIHN0ZXAgY291bnQgbmVlZHMgdG8gYmUgbWFpbnRhaW5lZCBieSB0aGUgY2FsbGVyIGFuZCBwYXNzZWRcbiAqIGluIGFzIGBzdGVwYC5cbiAqXG4gKiBAcGFyYW0gdiBUaGUgY3VycmVudCBtb3ZpbmcgYXZlcmFnZSB2YWx1ZS5cbiAqIEBwYXJhbSB4IE5ldyBpbnB1dCB2YWx1ZSwgbXVzdCBoYXZlIHRoZSBzYW1lIHNoYXBlIGFuZCBkdHlwZSBhcyBgdmAuXG4gKiBAcGFyYW0gZGVjYXkgVGhlIGRlY2F5IGZhY3Rvci4gVHlwaWNhbCB2YWx1ZXMgYXJlIDAuOTUgYW5kIDAuOTkuXG4gKiBAcGFyYW0gc3RlcCBTdGVwIGNvdW50LlxuICogQHBhcmFtIHplcm9EZWJpYXM6IFdoZXRoZXIgemVyb0RlYmlhcyBpcyB0byBiZSBwZXJmb3JtZWQgKGRlZmF1bHQ6IGB0cnVlYCkuXG4gKiBAcmV0dXJucyBUaGUgbmV3IG1vdmluZyBhdmVyYWdlIHZhbHVlLlxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdPcGVyYXRpb25zJywgc3ViaGVhZGluZzogJ01vdmluZyBBdmVyYWdlJ31cbiAqL1xuZnVuY3Rpb24gbW92aW5nQXZlcmFnZV88VCBleHRlbmRzIFRlbnNvcj4oXG4gICAgdjogVHxUZW5zb3JMaWtlLCB4OiBUfFRlbnNvckxpa2UsIGRlY2F5OiBudW1iZXJ8U2NhbGFyLFxuICAgIHN0ZXA/OiBudW1iZXJ8U2NhbGFyLCB6ZXJvRGViaWFzID0gdHJ1ZSk6IFQge1xuICBjb25zdCAkdiA9IGNvbnZlcnRUb1RlbnNvcih2LCAndicsICdtb3ZpbmdBdmVyYWdlJyk7XG4gIGNvbnN0ICR4ID0gY29udmVydFRvVGVuc29yKHgsICd4JywgJ21vdmluZ0F2ZXJhZ2UnKTtcbiAgY29uc3QgJGRlY2F5ID0gY29udmVydFRvVGVuc29yKGRlY2F5LCAnZGVjYXknLCAnbW92aW5nQXZlcmFnZScpO1xuXG4gIGFzc2VydFR5cGVzTWF0Y2goJHYsICR4KTtcbiAgdXRpbC5hc3NlcnQoXG4gICAgICB1dGlsLmFycmF5c0VxdWFsKCR2LnNoYXBlLCAkeC5zaGFwZSksICgpID0+ICdTaGFwZSBtaXNtYXRjaCBpbiB2IGFuZCB4Jyk7XG5cbiAgY29uc3Qgb25lID0gc2NhbGFyKDEpO1xuICBjb25zdCBvbmVNaW51c0RlY2F5ID0gc3ViKG9uZSwgJGRlY2F5KTtcblxuICBsZXQgdXBkYXRlID0gbXVsKHN1YigkeCwgJHYpLCBvbmVNaW51c0RlY2F5KTtcbiAgaWYgKHplcm9EZWJpYXMpIHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgc3RlcCAhPSBudWxsLCAoKSA9PiAnV2hlbiB1c2luZyB6ZXJvRGViaWFzOiB0cnVlLCBzdGVwIGlzIHJlcXVpcmVkLicpO1xuICAgIGNvbnN0ICRzdGVwID0gY29udmVydFRvVGVuc29yKHN0ZXAsICdzdGVwJywgJ21vdmluZ0F2ZXJhZ2UnKTtcbiAgICB1cGRhdGUgPSBkaXYodXBkYXRlLCBzdWIob25lLCBwb3coJGRlY2F5LCAkc3RlcCkpKTtcbiAgfVxuICByZXR1cm4gYWRkKCR2LCB1cGRhdGUpO1xufVxuXG5leHBvcnQgY29uc3QgbW92aW5nQXZlcmFnZSA9IC8qIEBfX1BVUkVfXyAqLyBvcCh7bW92aW5nQXZlcmFnZV99KTtcbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ScatterNd } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertNonNegativeIntegerDimensions } from '../util_base';\nimport { op } from './operation';\nimport * as scatter_nd_util from './scatter_nd_util';\n/**\n * Creates a new tensor by applying sparse updates to individual\n * values or slices within a zero tensor of the given shape tensor according to\n * indices. This operator is the inverse of the `tf.gatherND` operator which\n * extracts values or slices from a given tensor.\n *\n * ```js\n * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');\n * const updates = tf.tensor1d([9, 10, 11, 12]);\n * const shape = [8];\n * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]\n * ```\n *\n * @param indices The tensor contains the indices into the output tensor.\n * @param updates The tensor contains the value for the indices.\n * @param shape: The shape of the output tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nfunction scatterND_(indices, updates, shape) {\n    assertNonNegativeIntegerDimensions(shape);\n    const $indices = convertToTensor(indices, 'indices', 'scatterND', 'int32');\n    const $updates = convertToTensor(updates, 'updates', 'scatterND');\n    scatter_nd_util.validateInput($updates, $indices, shape);\n    const inputs = { indices: $indices, updates: $updates };\n    const attrs = { shape };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    return ENGINE.runKernel(ScatterNd, inputs, attrs);\n}\nexport const scatterND = /* @__PURE__ */ op({ scatterND_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhdHRlcl9uZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvb3BzL3NjYXR0ZXJfbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNqQyxPQUFPLEVBQUMsU0FBUyxFQUFrQyxNQUFNLGlCQUFpQixDQUFDO0FBSTNFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVuRCxPQUFPLEVBQUMsa0NBQWtDLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFaEUsT0FBTyxFQUFDLEVBQUUsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUMvQixPQUFPLEtBQUssZUFBZSxNQUFNLG1CQUFtQixDQUFDO0FBRXJEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrQkc7QUFDSCxTQUFTLFVBQVUsQ0FDZixPQUEwQixFQUFFLE9BQTBCLEVBQ3RELEtBQWtCO0lBQ3BCLGtDQUFrQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzRSxNQUFNLFFBQVEsR0FBRyxlQUFlLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNsRSxlQUFlLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFekQsTUFBTSxNQUFNLEdBQW9CLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFDLENBQUM7SUFDdkUsTUFBTSxLQUFLLEdBQW1CLEVBQUMsS0FBSyxFQUFDLENBQUM7SUFFdEMsMERBQTBEO0lBQzFELE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FDWixTQUFTLEVBQUUsTUFBbUMsRUFDOUMsS0FBZ0MsQ0FBYyxDQUFDO0FBQzVELENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLEVBQUUsQ0FBQyxFQUFDLFVBQVUsRUFBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7RU5HSU5FfSBmcm9tICcuLi9lbmdpbmUnO1xuaW1wb3J0IHtTY2F0dGVyTmQsIFNjYXR0ZXJOZEF0dHJzLCBTY2F0dGVyTmRJbnB1dHN9IGZyb20gJy4uL2tlcm5lbF9uYW1lcyc7XG5pbXBvcnQge05hbWVkQXR0ck1hcH0gZnJvbSAnLi4va2VybmVsX3JlZ2lzdHJ5JztcbmltcG9ydCB7VGVuc29yfSBmcm9tICcuLi90ZW5zb3InO1xuaW1wb3J0IHtOYW1lZFRlbnNvck1hcH0gZnJvbSAnLi4vdGVuc29yX3R5cGVzJztcbmltcG9ydCB7Y29udmVydFRvVGVuc29yfSBmcm9tICcuLi90ZW5zb3JfdXRpbF9lbnYnO1xuaW1wb3J0IHtSYW5rLCBTaGFwZU1hcCwgVGVuc29yTGlrZX0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHthc3NlcnROb25OZWdhdGl2ZUludGVnZXJEaW1lbnNpb25zfSBmcm9tICcuLi91dGlsX2Jhc2UnO1xuXG5pbXBvcnQge29wfSBmcm9tICcuL29wZXJhdGlvbic7XG5pbXBvcnQgKiBhcyBzY2F0dGVyX25kX3V0aWwgZnJvbSAnLi9zY2F0dGVyX25kX3V0aWwnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdGVuc29yIGJ5IGFwcGx5aW5nIHNwYXJzZSB1cGRhdGVzIHRvIGluZGl2aWR1YWxcbiAqIHZhbHVlcyBvciBzbGljZXMgd2l0aGluIGEgemVybyB0ZW5zb3Igb2YgdGhlIGdpdmVuIHNoYXBlIHRlbnNvciBhY2NvcmRpbmcgdG9cbiAqIGluZGljZXMuIFRoaXMgb3BlcmF0b3IgaXMgdGhlIGludmVyc2Ugb2YgdGhlIGB0Zi5nYXRoZXJORGAgb3BlcmF0b3Igd2hpY2hcbiAqIGV4dHJhY3RzIHZhbHVlcyBvciBzbGljZXMgZnJvbSBhIGdpdmVuIHRlbnNvci5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgaW5kaWNlcyA9IHRmLnRlbnNvcjJkKFs0LCAzLCAxLCA3XSwgWzQsIDFdLCAnaW50MzInKTtcbiAqIGNvbnN0IHVwZGF0ZXMgPSB0Zi50ZW5zb3IxZChbOSwgMTAsIDExLCAxMl0pO1xuICogY29uc3Qgc2hhcGUgPSBbOF07XG4gKiB0Zi5zY2F0dGVyTkQoaW5kaWNlcywgdXBkYXRlcywgc2hhcGUpLnByaW50KCkgLy9bMCwgMTEsIDAsIDEwLCA5LCAwLCAwLCAxMl1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBpbmRpY2VzIFRoZSB0ZW5zb3IgY29udGFpbnMgdGhlIGluZGljZXMgaW50byB0aGUgb3V0cHV0IHRlbnNvci5cbiAqIEBwYXJhbSB1cGRhdGVzIFRoZSB0ZW5zb3IgY29udGFpbnMgdGhlIHZhbHVlIGZvciB0aGUgaW5kaWNlcy5cbiAqIEBwYXJhbSBzaGFwZTogVGhlIHNoYXBlIG9mIHRoZSBvdXRwdXQgdGVuc29yLlxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdPcGVyYXRpb25zJywgc3ViaGVhZGluZzogJ1NsaWNpbmcgYW5kIEpvaW5pbmcnfVxuICovXG5mdW5jdGlvbiBzY2F0dGVyTkRfPFIgZXh0ZW5kcyBSYW5rPihcbiAgICBpbmRpY2VzOiBUZW5zb3J8VGVuc29yTGlrZSwgdXBkYXRlczogVGVuc29yfFRlbnNvckxpa2UsXG4gICAgc2hhcGU6IFNoYXBlTWFwW1JdKTogVGVuc29yPFI+IHtcbiAgYXNzZXJ0Tm9uTmVnYXRpdmVJbnRlZ2VyRGltZW5zaW9ucyhzaGFwZSk7XG4gIGNvbnN0ICRpbmRpY2VzID0gY29udmVydFRvVGVuc29yKGluZGljZXMsICdpbmRpY2VzJywgJ3NjYXR0ZXJORCcsICdpbnQzMicpO1xuICBjb25zdCAkdXBkYXRlcyA9IGNvbnZlcnRUb1RlbnNvcih1cGRhdGVzLCAndXBkYXRlcycsICdzY2F0dGVyTkQnKTtcbiAgc2NhdHRlcl9uZF91dGlsLnZhbGlkYXRlSW5wdXQoJHVwZGF0ZXMsICRpbmRpY2VzLCBzaGFwZSk7XG5cbiAgY29uc3QgaW5wdXRzOiBTY2F0dGVyTmRJbnB1dHMgPSB7aW5kaWNlczogJGluZGljZXMsIHVwZGF0ZXM6ICR1cGRhdGVzfTtcbiAgY29uc3QgYXR0cnM6IFNjYXR0ZXJOZEF0dHJzID0ge3NoYXBlfTtcblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXVubmVjZXNzYXJ5LXR5cGUtYXNzZXJ0aW9uXG4gIHJldHVybiBFTkdJTkUucnVuS2VybmVsKFxuICAgICAgICAgICAgIFNjYXR0ZXJOZCwgaW5wdXRzIGFzIHVua25vd24gYXMgTmFtZWRUZW5zb3JNYXAsXG4gICAgICAgICAgICAgYXR0cnMgYXMgdW5rbm93biBhcyBOYW1lZEF0dHJNYXApIGFzIFRlbnNvcjxSPjtcbn1cblxuZXhwb3J0IGNvbnN0IHNjYXR0ZXJORCA9IC8qIEBfX1BVUkVfXyAqLyBvcCh7c2NhdHRlck5EX30pO1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SparseToDense } from '../kernel_names';\nimport * as sparse_to_dense from '../ops/sparse_to_dense_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertNonNegativeIntegerDimensions } from '../util_base';\nimport { op } from './operation';\n/**\n * Converts a sparse representation into a dense tensor.\n *\n * Builds an array dense with shape outputShape such that:\n *\n * // If sparseIndices is scalar\n * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)\n *\n * // If sparseIndices is a vector, then for each i\n * dense[sparseIndices[i]] = sparseValues[i]\n *\n * // If sparseIndices is an n by d matrix, then for each i in [0, n)\n * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]\n * All other values in dense are set to defaultValue. If sparseValues is a\n * scalar, all sparse indices are set to this single value.\n *\n * If indices are repeated the final value is summed over all values for those\n * indices.\n *\n * ```js\n * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');\n * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');\n * const shape = [8];\n * tf.sparseToDense(indices, values, shape).print();\n * ```\n *\n * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.\n * sparseIndices[i] contains the complete index where sparseValues[i] will be\n * placed.\n * @param sparseValues A 0-D or 1-D Tensor. Values\n * corresponding to each row of sparseIndices, or a scalar value to be used for\n * all sparse indices.\n * @param outputShape Shape of the dense output tensor. The type is inferred.\n * @param defaultValue Scalar. Value to set for indices not specified in\n * sparseIndices. Defaults to zero.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction sparseToDense_(sparseIndices, sparseValues, outputShape, defaultValue = 0) {\n    assertNonNegativeIntegerDimensions(outputShape);\n    const $sparseIndices = convertToTensor(sparseIndices, 'sparseIndices', 'sparseToDense', 'int32');\n    const $sparseValues = convertToTensor(sparseValues, 'sparseValues', 'sparseToDense', 'string_or_numeric');\n    const $defaultValue = convertToTensor(defaultValue, 'defaultValue', 'sparseToDense', $sparseValues.dtype);\n    sparse_to_dense.validateInput($sparseIndices, $sparseValues, outputShape, $defaultValue);\n    const inputs = {\n        sparseIndices: $sparseIndices,\n        sparseValues: $sparseValues,\n        defaultValue: $defaultValue\n    };\n    const attrs = { outputShape };\n    return ENGINE.runKernel(SparseToDense, inputs, attrs);\n}\nexport const sparseToDense = /* @__PURE__ */ op({ sparseToDense_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhcnNlX3RvX2RlbnNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb3JlL3NyYy9vcHMvc3BhcnNlX3RvX2RlbnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFDLGFBQWEsRUFBMEMsTUFBTSxpQkFBaUIsQ0FBQztBQUV2RixPQUFPLEtBQUssZUFBZSxNQUFNLDZCQUE2QixDQUFDO0FBRy9ELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVuRCxPQUFPLEVBQUMsa0NBQWtDLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFaEUsT0FBTyxFQUFDLEVBQUUsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUUvQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXFDRztBQUNILFNBQVMsY0FBYyxDQUNuQixhQUFnQyxFQUFFLFlBQStCLEVBQ2pFLFdBQXdCLEVBQUUsZUFBa0MsQ0FBQztJQUMvRCxrQ0FBa0MsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVoRCxNQUFNLGNBQWMsR0FDaEIsZUFBZSxDQUFDLGFBQWEsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzlFLE1BQU0sYUFBYSxHQUFHLGVBQWUsQ0FDakMsWUFBWSxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUN4RSxNQUFNLGFBQWEsR0FBRyxlQUFlLENBQ2pDLFlBQVksRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV4RSxlQUFlLENBQUMsYUFBYSxDQUN6QixjQUFjLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUUvRCxNQUFNLE1BQU0sR0FBd0I7UUFDbEMsYUFBYSxFQUFFLGNBQWM7UUFDN0IsWUFBWSxFQUFFLGFBQWE7UUFDM0IsWUFBWSxFQUFFLGFBQWE7S0FDNUIsQ0FBQztJQUVGLE1BQU0sS0FBSyxHQUF1QixFQUFDLFdBQVcsRUFBQyxDQUFDO0lBRWhELE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FDbkIsYUFBYSxFQUFFLE1BQW1DLEVBQ2xELEtBQWdDLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsRUFBQyxjQUFjLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge0VOR0lORX0gZnJvbSAnLi4vZW5naW5lJztcbmltcG9ydCB7U3BhcnNlVG9EZW5zZSwgU3BhcnNlVG9EZW5zZUF0dHJzLCBTcGFyc2VUb0RlbnNlSW5wdXRzfSBmcm9tICcuLi9rZXJuZWxfbmFtZXMnO1xuaW1wb3J0IHtOYW1lZEF0dHJNYXB9IGZyb20gJy4uL2tlcm5lbF9yZWdpc3RyeSc7XG5pbXBvcnQgKiBhcyBzcGFyc2VfdG9fZGVuc2UgZnJvbSAnLi4vb3BzL3NwYXJzZV90b19kZW5zZV91dGlsJztcbmltcG9ydCB7U2NhbGFyLCBUZW5zb3J9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge05hbWVkVGVuc29yTWFwfSBmcm9tICcuLi90ZW5zb3JfdHlwZXMnO1xuaW1wb3J0IHtjb252ZXJ0VG9UZW5zb3J9IGZyb20gJy4uL3RlbnNvcl91dGlsX2Vudic7XG5pbXBvcnQge1JhbmssIFNjYWxhckxpa2UsIFNoYXBlTWFwLCBUZW5zb3JMaWtlfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge2Fzc2VydE5vbk5lZ2F0aXZlSW50ZWdlckRpbWVuc2lvbnN9IGZyb20gJy4uL3V0aWxfYmFzZSc7XG5cbmltcG9ydCB7b3B9IGZyb20gJy4vb3BlcmF0aW9uJztcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHNwYXJzZSByZXByZXNlbnRhdGlvbiBpbnRvIGEgZGVuc2UgdGVuc29yLlxuICpcbiAqIEJ1aWxkcyBhbiBhcnJheSBkZW5zZSB3aXRoIHNoYXBlIG91dHB1dFNoYXBlIHN1Y2ggdGhhdDpcbiAqXG4gKiAvLyBJZiBzcGFyc2VJbmRpY2VzIGlzIHNjYWxhclxuICogZGVuc2VbaV0gPSAoaSA9PSBzcGFyc2VJbmRpY2VzID8gc3BhcnNlVmFsdWVzIDogZGVmYXVsdFZhbHVlKVxuICpcbiAqIC8vIElmIHNwYXJzZUluZGljZXMgaXMgYSB2ZWN0b3IsIHRoZW4gZm9yIGVhY2ggaVxuICogZGVuc2Vbc3BhcnNlSW5kaWNlc1tpXV0gPSBzcGFyc2VWYWx1ZXNbaV1cbiAqXG4gKiAvLyBJZiBzcGFyc2VJbmRpY2VzIGlzIGFuIG4gYnkgZCBtYXRyaXgsIHRoZW4gZm9yIGVhY2ggaSBpbiBbMCwgbilcbiAqIGRlbnNlW3NwYXJzZUluZGljZXNbaV1bMF0sIC4uLiwgc3BhcnNlSW5kaWNlc1tpXVtkLTFdXSA9IHNwYXJzZVZhbHVlc1tpXVxuICogQWxsIG90aGVyIHZhbHVlcyBpbiBkZW5zZSBhcmUgc2V0IHRvIGRlZmF1bHRWYWx1ZS4gSWYgc3BhcnNlVmFsdWVzIGlzIGFcbiAqIHNjYWxhciwgYWxsIHNwYXJzZSBpbmRpY2VzIGFyZSBzZXQgdG8gdGhpcyBzaW5nbGUgdmFsdWUuXG4gKlxuICogSWYgaW5kaWNlcyBhcmUgcmVwZWF0ZWQgdGhlIGZpbmFsIHZhbHVlIGlzIHN1bW1lZCBvdmVyIGFsbCB2YWx1ZXMgZm9yIHRob3NlXG4gKiBpbmRpY2VzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBpbmRpY2VzID0gdGYudGVuc29yMWQoWzQsIDUsIDYsIDEsIDIsIDNdLCAnaW50MzInKTtcbiAqIGNvbnN0IHZhbHVlcyA9IHRmLnRlbnNvcjFkKFsxMCwgMTEsIDEyLCAxMywgMTQsIDE1XSwgJ2Zsb2F0MzInKTtcbiAqIGNvbnN0IHNoYXBlID0gWzhdO1xuICogdGYuc3BhcnNlVG9EZW5zZShpbmRpY2VzLCB2YWx1ZXMsIHNoYXBlKS5wcmludCgpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHNwYXJzZUluZGljZXMgQSAwLUQsIDEtRCwgb3IgMi1EIFRlbnNvciBvZiB0eXBlIGludDMyLlxuICogc3BhcnNlSW5kaWNlc1tpXSBjb250YWlucyB0aGUgY29tcGxldGUgaW5kZXggd2hlcmUgc3BhcnNlVmFsdWVzW2ldIHdpbGwgYmVcbiAqIHBsYWNlZC5cbiAqIEBwYXJhbSBzcGFyc2VWYWx1ZXMgQSAwLUQgb3IgMS1EIFRlbnNvci4gVmFsdWVzXG4gKiBjb3JyZXNwb25kaW5nIHRvIGVhY2ggcm93IG9mIHNwYXJzZUluZGljZXMsIG9yIGEgc2NhbGFyIHZhbHVlIHRvIGJlIHVzZWQgZm9yXG4gKiBhbGwgc3BhcnNlIGluZGljZXMuXG4gKiBAcGFyYW0gb3V0cHV0U2hhcGUgU2hhcGUgb2YgdGhlIGRlbnNlIG91dHB1dCB0ZW5zb3IuIFRoZSB0eXBlIGlzIGluZmVycmVkLlxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBTY2FsYXIuIFZhbHVlIHRvIHNldCBmb3IgaW5kaWNlcyBub3Qgc3BlY2lmaWVkIGluXG4gKiBzcGFyc2VJbmRpY2VzLiBEZWZhdWx0cyB0byB6ZXJvLlxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdPcGVyYXRpb25zJywgc3ViaGVhZGluZzogJ05vcm1hbGl6YXRpb24nfVxuICovXG5mdW5jdGlvbiBzcGFyc2VUb0RlbnNlXzxSIGV4dGVuZHMgUmFuaz4oXG4gICAgc3BhcnNlSW5kaWNlczogVGVuc29yfFRlbnNvckxpa2UsIHNwYXJzZVZhbHVlczogVGVuc29yfFRlbnNvckxpa2UsXG4gICAgb3V0cHV0U2hhcGU6IFNoYXBlTWFwW1JdLCBkZWZhdWx0VmFsdWU6IFNjYWxhcnxTY2FsYXJMaWtlID0gMCk6IFRlbnNvcjxSPiB7XG4gIGFzc2VydE5vbk5lZ2F0aXZlSW50ZWdlckRpbWVuc2lvbnMob3V0cHV0U2hhcGUpO1xuXG4gIGNvbnN0ICRzcGFyc2VJbmRpY2VzID1cbiAgICAgIGNvbnZlcnRUb1RlbnNvcihzcGFyc2VJbmRpY2VzLCAnc3BhcnNlSW5kaWNlcycsICdzcGFyc2VUb0RlbnNlJywgJ2ludDMyJyk7XG4gIGNvbnN0ICRzcGFyc2VWYWx1ZXMgPSBjb252ZXJ0VG9UZW5zb3IoXG4gICAgICBzcGFyc2VWYWx1ZXMsICdzcGFyc2VWYWx1ZXMnLCAnc3BhcnNlVG9EZW5zZScsICdzdHJpbmdfb3JfbnVtZXJpYycpO1xuICBjb25zdCAkZGVmYXVsdFZhbHVlID0gY29udmVydFRvVGVuc29yKFxuICAgICAgZGVmYXVsdFZhbHVlLCAnZGVmYXVsdFZhbHVlJywgJ3NwYXJzZVRvRGVuc2UnLCAkc3BhcnNlVmFsdWVzLmR0eXBlKTtcblxuICBzcGFyc2VfdG9fZGVuc2UudmFsaWRhdGVJbnB1dChcbiAgICAgICRzcGFyc2VJbmRpY2VzLCAkc3BhcnNlVmFsdWVzLCBvdXRwdXRTaGFwZSwgJGRlZmF1bHRWYWx1ZSk7XG5cbiAgY29uc3QgaW5wdXRzOiBTcGFyc2VUb0RlbnNlSW5wdXRzID0ge1xuICAgIHNwYXJzZUluZGljZXM6ICRzcGFyc2VJbmRpY2VzLFxuICAgIHNwYXJzZVZhbHVlczogJHNwYXJzZVZhbHVlcyxcbiAgICBkZWZhdWx0VmFsdWU6ICRkZWZhdWx0VmFsdWVcbiAgfTtcblxuICBjb25zdCBhdHRyczogU3BhcnNlVG9EZW5zZUF0dHJzID0ge291dHB1dFNoYXBlfTtcblxuICByZXR1cm4gRU5HSU5FLnJ1bktlcm5lbChcbiAgICAgIFNwYXJzZVRvRGVuc2UsIGlucHV0cyBhcyB1bmtub3duIGFzIE5hbWVkVGVuc29yTWFwLFxuICAgICAgYXR0cnMgYXMgdW5rbm93biBhcyBOYW1lZEF0dHJNYXApO1xufVxuXG5leHBvcnQgY29uc3Qgc3BhcnNlVG9EZW5zZSA9IC8qIEBfX1BVUkVfXyAqLyBvcCh7c3BhcnNlVG9EZW5zZV99KTtcbiJdfQ==","/**\n * Validate sparseToDense inputs.\n *\n * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.\n * sparseIndices[i] contains the complete index where sparseValues[i] will be\n * placed.\n * @param sparseValues A 0-D or 1-D Tensor. Values\n * corresponding to each row of sparseIndices, or a scalar value to be used for\n * all sparse indices.\n * @param outputShape number[]. Shape of the dense output tensor.\n * @param validateIndices boolean. indice validation is not supported, error\n * will be thrown if it is set.\n */\nexport function validateInput(sparseIndices, sparseValues, outputShape, defaultValues) {\n    if (sparseIndices.dtype !== 'int32') {\n        throw new Error('tf.sparseToDense() expects the indices to be int32 type,' +\n            ` but the dtype was ${sparseIndices.dtype}.`);\n    }\n    if (sparseIndices.rank > 2) {\n        throw new Error('sparseIndices should be a scalar, vector, or matrix,' +\n            ` but got shape ${sparseIndices.shape}.`);\n    }\n    const numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;\n    const numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;\n    if (outputShape.length !== numDims) {\n        throw new Error('outputShape has incorrect number of elements:,' +\n            ` ${outputShape.length}, should be: ${numDims}.`);\n    }\n    const numValues = sparseValues.size;\n    if (!(sparseValues.rank === 0 ||\n        sparseValues.rank === 1 && numValues === numElems)) {\n        throw new Error('sparseValues has incorrect shape ' +\n            `${sparseValues.shape}, should be [] or [${numElems}]`);\n    }\n    if (sparseValues.dtype !== defaultValues.dtype) {\n        throw new Error('sparseValues.dtype must match defaultValues.dtype');\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhcnNlX3RvX2RlbnNlX3V0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9zcGFyc2VfdG9fZGVuc2VfdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQkE7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxVQUFVLGFBQWEsQ0FDekIsYUFBcUIsRUFBRSxZQUFvQixFQUFFLFdBQXFCLEVBQ2xFLGFBQXFCO0lBQ3ZCLElBQUksYUFBYSxDQUFDLEtBQUssS0FBSyxPQUFPLEVBQUU7UUFDbkMsTUFBTSxJQUFJLEtBQUssQ0FDWCwwREFBMEQ7WUFDMUQsc0JBQXNCLGFBQWEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0tBQ25EO0lBQ0QsSUFBSSxhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtRQUMxQixNQUFNLElBQUksS0FBSyxDQUNYLHNEQUFzRDtZQUN0RCxrQkFBa0IsYUFBYSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7S0FDL0M7SUFFRCxNQUFNLFFBQVEsR0FBRyxhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEUsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFBRTtRQUNsQyxNQUFNLElBQUksS0FBSyxDQUNYLGdEQUFnRDtZQUNoRCxJQUFJLFdBQVcsQ0FBQyxNQUFNLGdCQUFnQixPQUFPLEdBQUcsQ0FBQyxDQUFDO0tBQ3ZEO0lBRUQsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQztJQUNwQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFLLENBQUM7UUFDdkIsWUFBWSxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksU0FBUyxLQUFLLFFBQVEsQ0FBQyxFQUFFO1FBQ3hELE1BQU0sSUFBSSxLQUFLLENBQ1gsbUNBQW1DO1lBQ25DLEdBQUcsWUFBWSxDQUFDLEtBQUssc0JBQXNCLFFBQVEsR0FBRyxDQUFDLENBQUM7S0FDN0Q7SUFFRCxJQUFJLFlBQVksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLEtBQUssRUFBRTtRQUM5QyxNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7S0FDdEU7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL3RlbnNvcic7XG5cbi8qKlxuICogVmFsaWRhdGUgc3BhcnNlVG9EZW5zZSBpbnB1dHMuXG4gKlxuICogQHBhcmFtIHNwYXJzZUluZGljZXMgQSAwLUQsIDEtRCwgb3IgMi1EIFRlbnNvciBvZiB0eXBlIGludDMyLlxuICogc3BhcnNlSW5kaWNlc1tpXSBjb250YWlucyB0aGUgY29tcGxldGUgaW5kZXggd2hlcmUgc3BhcnNlVmFsdWVzW2ldIHdpbGwgYmVcbiAqIHBsYWNlZC5cbiAqIEBwYXJhbSBzcGFyc2VWYWx1ZXMgQSAwLUQgb3IgMS1EIFRlbnNvci4gVmFsdWVzXG4gKiBjb3JyZXNwb25kaW5nIHRvIGVhY2ggcm93IG9mIHNwYXJzZUluZGljZXMsIG9yIGEgc2NhbGFyIHZhbHVlIHRvIGJlIHVzZWQgZm9yXG4gKiBhbGwgc3BhcnNlIGluZGljZXMuXG4gKiBAcGFyYW0gb3V0cHV0U2hhcGUgbnVtYmVyW10uIFNoYXBlIG9mIHRoZSBkZW5zZSBvdXRwdXQgdGVuc29yLlxuICogQHBhcmFtIHZhbGlkYXRlSW5kaWNlcyBib29sZWFuLiBpbmRpY2UgdmFsaWRhdGlvbiBpcyBub3Qgc3VwcG9ydGVkLCBlcnJvclxuICogd2lsbCBiZSB0aHJvd24gaWYgaXQgaXMgc2V0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVJbnB1dChcbiAgICBzcGFyc2VJbmRpY2VzOiBUZW5zb3IsIHNwYXJzZVZhbHVlczogVGVuc29yLCBvdXRwdXRTaGFwZTogbnVtYmVyW10sXG4gICAgZGVmYXVsdFZhbHVlczogVGVuc29yKSB7XG4gIGlmIChzcGFyc2VJbmRpY2VzLmR0eXBlICE9PSAnaW50MzInKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAndGYuc3BhcnNlVG9EZW5zZSgpIGV4cGVjdHMgdGhlIGluZGljZXMgdG8gYmUgaW50MzIgdHlwZSwnICtcbiAgICAgICAgYCBidXQgdGhlIGR0eXBlIHdhcyAke3NwYXJzZUluZGljZXMuZHR5cGV9LmApO1xuICB9XG4gIGlmIChzcGFyc2VJbmRpY2VzLnJhbmsgPiAyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnc3BhcnNlSW5kaWNlcyBzaG91bGQgYmUgYSBzY2FsYXIsIHZlY3Rvciwgb3IgbWF0cml4LCcgK1xuICAgICAgICBgIGJ1dCBnb3Qgc2hhcGUgJHtzcGFyc2VJbmRpY2VzLnNoYXBlfS5gKTtcbiAgfVxuXG4gIGNvbnN0IG51bUVsZW1zID0gc3BhcnNlSW5kaWNlcy5yYW5rID4gMCA/IHNwYXJzZUluZGljZXMuc2hhcGVbMF0gOiAxO1xuICBjb25zdCBudW1EaW1zID0gc3BhcnNlSW5kaWNlcy5yYW5rID4gMSA/IHNwYXJzZUluZGljZXMuc2hhcGVbMV0gOiAxO1xuXG4gIGlmIChvdXRwdXRTaGFwZS5sZW5ndGggIT09IG51bURpbXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdvdXRwdXRTaGFwZSBoYXMgaW5jb3JyZWN0IG51bWJlciBvZiBlbGVtZW50czosJyArXG4gICAgICAgIGAgJHtvdXRwdXRTaGFwZS5sZW5ndGh9LCBzaG91bGQgYmU6ICR7bnVtRGltc30uYCk7XG4gIH1cblxuICBjb25zdCBudW1WYWx1ZXMgPSBzcGFyc2VWYWx1ZXMuc2l6ZTtcbiAgaWYgKCEoc3BhcnNlVmFsdWVzLnJhbmsgPT09IDAgfHxcbiAgICAgICAgc3BhcnNlVmFsdWVzLnJhbmsgPT09IDEgJiYgbnVtVmFsdWVzID09PSBudW1FbGVtcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdzcGFyc2VWYWx1ZXMgaGFzIGluY29ycmVjdCBzaGFwZSAnICtcbiAgICAgICAgYCR7c3BhcnNlVmFsdWVzLnNoYXBlfSwgc2hvdWxkIGJlIFtdIG9yIFske251bUVsZW1zfV1gKTtcbiAgfVxuXG4gIGlmIChzcGFyc2VWYWx1ZXMuZHR5cGUgIT09IGRlZmF1bHRWYWx1ZXMuZHR5cGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NwYXJzZVZhbHVlcy5kdHlwZSBtdXN0IG1hdGNoIGRlZmF1bHRWYWx1ZXMuZHR5cGUnKTtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { GatherNd } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Gather slices from input tensor into a Tensor with shape specified by\n * `indices`.\n *\n * `indices` is a K-dimensional integer tensor, best thought of as a\n * (K-1)-dimensional tensor of indices into input, where each element defines a\n * slice of input:\n * output[\\\\(i_0, ..., i_{K-2}\\\\)] = input[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\n *\n * Whereas in `tf.gather`, `indices` defines slices into the first dimension of\n * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions\n * of input, where N = indices.shape[-1].\n *\n * The last dimension of indices can be at most the rank of input:\n * indices.shape[-1] <= input.rank\n *\n * The last dimension of `indices` corresponds to elements\n * (if indices.shape[-1] == input.rank) or slices\n * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of\n * input.\n * The output tensor has shape\n * indices.shape[:-1] + input.shape[indices.shape[-1]:]\n *\n * Note that on CPU, if an out of bound index is found, an error is returned. On\n * GPU, if an out of bound index is found, a 0 is stored in the corresponding\n * output value.\n *\n * ```js\n * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');\n * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);\n * tf.gatherND(input, indices).print() // [10, 11]\n * ```\n *\n * @param x The tensor from which to gather values.\n * @param indices Index tensor, must be of type int32.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nfunction gatherND_(x, indices) {\n    const $indices = convertToTensor(indices, 'indices', 'gatherND', 'int32');\n    const $x = convertToTensor(x, 'x', 'gatherND', 'string_or_numeric');\n    const inputs = { params: $x, indices: $indices };\n    return ENGINE.runKernel(GatherNd, inputs);\n}\nexport const gatherND = /* @__PURE__ */ op({ gatherND_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F0aGVyX25kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb3JlL3NyYy9vcHMvZ2F0aGVyX25kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFDLFFBQVEsRUFBaUIsTUFBTSxpQkFBaUIsQ0FBQztBQUd6RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFbkQsT0FBTyxFQUFDLEVBQUUsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUUvQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXFDRztBQUNILFNBQVMsU0FBUyxDQUFDLENBQW9CLEVBQUUsT0FBMEI7SUFDakUsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFFLE1BQU0sRUFBRSxHQUFHLGVBQWUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBRXBFLE1BQU0sTUFBTSxHQUFtQixFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBQyxDQUFDO0lBRS9ELE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsTUFBbUMsQ0FBQyxDQUFDO0FBQ3pFLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLEVBQUUsQ0FBQyxFQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5pbXBvcnQge0VOR0lORX0gZnJvbSAnLi4vZW5naW5lJztcbmltcG9ydCB7R2F0aGVyTmQsIEdhdGhlck5kSW5wdXRzfSBmcm9tICcuLi9rZXJuZWxfbmFtZXMnO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL3RlbnNvcic7XG5pbXBvcnQge05hbWVkVGVuc29yTWFwfSBmcm9tICcuLi90ZW5zb3JfdHlwZXMnO1xuaW1wb3J0IHtjb252ZXJ0VG9UZW5zb3J9IGZyb20gJy4uL3RlbnNvcl91dGlsX2Vudic7XG5pbXBvcnQge1RlbnNvckxpa2V9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7b3B9IGZyb20gJy4vb3BlcmF0aW9uJztcblxuLyoqXG4gKiBHYXRoZXIgc2xpY2VzIGZyb20gaW5wdXQgdGVuc29yIGludG8gYSBUZW5zb3Igd2l0aCBzaGFwZSBzcGVjaWZpZWQgYnlcbiAqIGBpbmRpY2VzYC5cbiAqXG4gKiBgaW5kaWNlc2AgaXMgYSBLLWRpbWVuc2lvbmFsIGludGVnZXIgdGVuc29yLCBiZXN0IHRob3VnaHQgb2YgYXMgYVxuICogKEstMSktZGltZW5zaW9uYWwgdGVuc29yIG9mIGluZGljZXMgaW50byBpbnB1dCwgd2hlcmUgZWFjaCBlbGVtZW50IGRlZmluZXMgYVxuICogc2xpY2Ugb2YgaW5wdXQ6XG4gKiBvdXRwdXRbXFxcXChpXzAsIC4uLiwgaV97Sy0yfVxcXFwpXSA9IGlucHV0W2luZGljZXNbXFxcXChpXzAsIC4uLiwgaV97Sy0yfVxcXFwpXV1cbiAqXG4gKiBXaGVyZWFzIGluIGB0Zi5nYXRoZXJgLCBgaW5kaWNlc2AgZGVmaW5lcyBzbGljZXMgaW50byB0aGUgZmlyc3QgZGltZW5zaW9uIG9mXG4gKiBpbnB1dCwgaW4gYHRmLmdhdGhlck5EYCwgYGluZGljZXNgIGRlZmluZXMgc2xpY2VzIGludG8gdGhlIGZpcnN0IE4gZGltZW5zaW9uc1xuICogb2YgaW5wdXQsIHdoZXJlIE4gPSBpbmRpY2VzLnNoYXBlWy0xXS5cbiAqXG4gKiBUaGUgbGFzdCBkaW1lbnNpb24gb2YgaW5kaWNlcyBjYW4gYmUgYXQgbW9zdCB0aGUgcmFuayBvZiBpbnB1dDpcbiAqIGluZGljZXMuc2hhcGVbLTFdIDw9IGlucHV0LnJhbmtcbiAqXG4gKiBUaGUgbGFzdCBkaW1lbnNpb24gb2YgYGluZGljZXNgIGNvcnJlc3BvbmRzIHRvIGVsZW1lbnRzXG4gKiAoaWYgaW5kaWNlcy5zaGFwZVstMV0gPT0gaW5wdXQucmFuaykgb3Igc2xpY2VzXG4gKiAoaWYgaW5kaWNlcy5zaGFwZVstMV0gPCBpbnB1dC5yYW5rKSBhbG9uZyBkaW1lbnNpb24gaW5kaWNlcy5zaGFwZVstMV0gb2ZcbiAqIGlucHV0LlxuICogVGhlIG91dHB1dCB0ZW5zb3IgaGFzIHNoYXBlXG4gKiBpbmRpY2VzLnNoYXBlWzotMV0gKyBpbnB1dC5zaGFwZVtpbmRpY2VzLnNoYXBlWy0xXTpdXG4gKlxuICogTm90ZSB0aGF0IG9uIENQVSwgaWYgYW4gb3V0IG9mIGJvdW5kIGluZGV4IGlzIGZvdW5kLCBhbiBlcnJvciBpcyByZXR1cm5lZC4gT25cbiAqIEdQVSwgaWYgYW4gb3V0IG9mIGJvdW5kIGluZGV4IGlzIGZvdW5kLCBhIDAgaXMgc3RvcmVkIGluIHRoZSBjb3JyZXNwb25kaW5nXG4gKiBvdXRwdXQgdmFsdWUuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGluZGljZXMgPSB0Zi50ZW5zb3IyZChbMCwgMSwgMSwgMF0sIFsyLDJdLCAnaW50MzInKTtcbiAqIGNvbnN0IGlucHV0ID0gdGYudGVuc29yMmQoWzksIDEwLCAxMSwgMTJdLCBbMiwgMl0pO1xuICogdGYuZ2F0aGVyTkQoaW5wdXQsIGluZGljZXMpLnByaW50KCkgLy8gWzEwLCAxMV1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB4IFRoZSB0ZW5zb3IgZnJvbSB3aGljaCB0byBnYXRoZXIgdmFsdWVzLlxuICogQHBhcmFtIGluZGljZXMgSW5kZXggdGVuc29yLCBtdXN0IGJlIG9mIHR5cGUgaW50MzIuXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ09wZXJhdGlvbnMnLCBzdWJoZWFkaW5nOiAnU2xpY2luZyBhbmQgSm9pbmluZyd9XG4gKi9cbmZ1bmN0aW9uIGdhdGhlck5EXyh4OiBUZW5zb3J8VGVuc29yTGlrZSwgaW5kaWNlczogVGVuc29yfFRlbnNvckxpa2UpOiBUZW5zb3Ige1xuICBjb25zdCAkaW5kaWNlcyA9IGNvbnZlcnRUb1RlbnNvcihpbmRpY2VzLCAnaW5kaWNlcycsICdnYXRoZXJORCcsICdpbnQzMicpO1xuICBjb25zdCAkeCA9IGNvbnZlcnRUb1RlbnNvcih4LCAneCcsICdnYXRoZXJORCcsICdzdHJpbmdfb3JfbnVtZXJpYycpO1xuXG4gIGNvbnN0IGlucHV0czogR2F0aGVyTmRJbnB1dHMgPSB7cGFyYW1zOiAkeCwgaW5kaWNlczogJGluZGljZXN9O1xuXG4gIHJldHVybiBFTkdJTkUucnVuS2VybmVsKEdhdGhlck5kLCBpbnB1dHMgYXMgdW5rbm93biBhcyBOYW1lZFRlbnNvck1hcCk7XG59XG5cbmV4cG9ydCBjb25zdCBnYXRoZXJORCA9IC8qIEBfX1BVUkVfXyAqLyBvcCh7Z2F0aGVyTkRffSk7XG4iXX0=","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { assert, assertShapesMatch, getTypedArrayFromDType } from '../util';\nimport { tensor } from './tensor';\n/**\n * Returns whether the targets are in the top K predictions.\n *\n * ```js\n * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);\n * const targets = tf.tensor1d([2, 0]);\n * const precision = await tf.inTopKAsync(predictions, targets);\n * precision.print();\n * ```\n * @param predictions 2-D or higher `tf.Tensor` with last dimension being\n *     at least `k`.\n * @param targets 1-D or higher `tf.Tensor`.\n * @param k Optional Number of top elements to look at for computing precision,\n *     default to 1.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nasync function inTopKAsync_(predictions, targets, k = 1) {\n    const $predictions = convertToTensor(predictions, 'predictions', 'inTopK');\n    const $targets = convertToTensor(targets, 'targets', 'inTopK');\n    assert($predictions.rank > 1, () => 'inTopK() expects the predictions to be of rank 2 or higher, ' +\n        `but got ${$predictions.rank}`);\n    assert($predictions.rank - 1 === $targets.rank, () => `predictions rank should be 1 larger than ` +\n        `targets rank, but got predictions rank ` +\n        `${$predictions.rank} and targets rank ${$targets.rank}`);\n    assertShapesMatch($predictions.shape.slice(0, $predictions.shape.length - 1), $targets.shape, `predictions's shape should be align with the targets' shape, ` +\n        'except the last dimension.');\n    const lastDim = $predictions.shape[$predictions.shape.length - 1];\n    assert(k > 0 && k <= lastDim, () => `'k' passed to inTopK() must be > 0 && <= the predictions last ` +\n        `dimension (${lastDim}), but got ${k}`);\n    const predictionsVals = await $predictions.data();\n    const targetsVals = await $targets.data();\n    // Reshape predictionsVals into a 2d tensor [batch, lastDim]\n    // and look up topK along lastDim.\n    const [batch, size] = [predictionsVals.length / lastDim, lastDim];\n    const precision = getTypedArrayFromDType('bool', batch);\n    for (let b = 0; b < batch; b++) {\n        const offset = b * size;\n        const vals = predictionsVals.subarray(offset, offset + size);\n        const valAndInd = [];\n        for (let i = 0; i < vals.length; i++) {\n            valAndInd.push({ value: vals[i], index: i });\n        }\n        valAndInd.sort((a, b) => b.value - a.value);\n        precision[b] = 0;\n        for (let i = 0; i < k; i++) {\n            if (valAndInd[i].index === targetsVals[b]) {\n                precision[b] = 1;\n                break;\n            }\n        }\n    }\n    if (predictions !== $predictions) {\n        $predictions.dispose();\n    }\n    if (targets !== $targets) {\n        $targets.dispose();\n    }\n    // Output precision has the same shape as targets.\n    return tensor(precision, $targets.shape, 'bool');\n}\nexport const inTopKAsync = inTopKAsync_;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5fdG9wX2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL29wcy9pbl90b3Bfay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFbkQsT0FBTyxFQUFDLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxzQkFBc0IsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUMxRSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBRWhDOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBQ0gsS0FBSyxVQUFVLFlBQVksQ0FDdkIsV0FBeUIsRUFBRSxPQUFxQixFQUFFLENBQUMsR0FBRyxDQUFDO0lBQ3pELE1BQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUUsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzNFLE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRS9ELE1BQU0sQ0FDRixZQUFZLENBQUMsSUFBSSxHQUFHLENBQUMsRUFDckIsR0FBRyxFQUFFLENBQUMsOERBQThEO1FBQ2hFLFdBQVcsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDeEMsTUFBTSxDQUNGLFlBQVksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxJQUFJLEVBQ3ZDLEdBQUcsRUFBRSxDQUFDLDJDQUEyQztRQUM3Qyx5Q0FBeUM7UUFDekMsR0FBRyxZQUFZLENBQUMsSUFBSSxxQkFBcUIsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDbEUsaUJBQWlCLENBQ2IsWUFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUMxRCxRQUFRLENBQUMsS0FBSyxFQUNkLCtEQUErRDtRQUMzRCw0QkFBNEIsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEUsTUFBTSxDQUNGLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sRUFDckIsR0FBRyxFQUFFLENBQUMsZ0VBQWdFO1FBQ2xFLGNBQWMsT0FBTyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFaEQsTUFBTSxlQUFlLEdBQUcsTUFBTSxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbEQsTUFBTSxXQUFXLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFMUMsNERBQTREO0lBQzVELGtDQUFrQztJQUNsQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLE1BQU0sR0FBRyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbEUsTUFBTSxTQUFTLEdBQUcsc0JBQXNCLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXhELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDOUIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN4QixNQUFNLElBQUksR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDN0QsTUFBTSxTQUFTLEdBQTBDLEVBQUUsQ0FBQztRQUM1RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQztTQUM1QztRQUNELFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUU1QyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDMUIsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDekMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDakIsTUFBTTthQUNQO1NBQ0Y7S0FDRjtJQUVELElBQUksV0FBVyxLQUFLLFlBQVksRUFBRTtRQUNoQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDeEI7SUFDRCxJQUFJLE9BQU8sS0FBSyxRQUFRLEVBQUU7UUFDeEIsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ3BCO0lBRUQsa0RBQWtEO0lBQ2xELE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBTSxDQUFDO0FBQ3hELENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7Y29udmVydFRvVGVuc29yfSBmcm9tICcuLi90ZW5zb3JfdXRpbF9lbnYnO1xuaW1wb3J0IHtUZW5zb3JMaWtlfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge2Fzc2VydCwgYXNzZXJ0U2hhcGVzTWF0Y2gsIGdldFR5cGVkQXJyYXlGcm9tRFR5cGV9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHt0ZW5zb3J9IGZyb20gJy4vdGVuc29yJztcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHRhcmdldHMgYXJlIGluIHRoZSB0b3AgSyBwcmVkaWN0aW9ucy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcHJlZGljdGlvbnMgPSB0Zi50ZW5zb3IyZChbWzIwLCAxMCwgNDAsIDMwXSwgWzMwLCA1MCwgLTIwLCAxMF1dKTtcbiAqIGNvbnN0IHRhcmdldHMgPSB0Zi50ZW5zb3IxZChbMiwgMF0pO1xuICogY29uc3QgcHJlY2lzaW9uID0gYXdhaXQgdGYuaW5Ub3BLQXN5bmMocHJlZGljdGlvbnMsIHRhcmdldHMpO1xuICogcHJlY2lzaW9uLnByaW50KCk7XG4gKiBgYGBcbiAqIEBwYXJhbSBwcmVkaWN0aW9ucyAyLUQgb3IgaGlnaGVyIGB0Zi5UZW5zb3JgIHdpdGggbGFzdCBkaW1lbnNpb24gYmVpbmdcbiAqICAgICBhdCBsZWFzdCBga2AuXG4gKiBAcGFyYW0gdGFyZ2V0cyAxLUQgb3IgaGlnaGVyIGB0Zi5UZW5zb3JgLlxuICogQHBhcmFtIGsgT3B0aW9uYWwgTnVtYmVyIG9mIHRvcCBlbGVtZW50cyB0byBsb29rIGF0IGZvciBjb21wdXRpbmcgcHJlY2lzaW9uLFxuICogICAgIGRlZmF1bHQgdG8gMS5cbiAqXG4gKiBAZG9jIHtoZWFkaW5nOiAnT3BlcmF0aW9ucycsIHN1YmhlYWRpbmc6ICdFdmFsdWF0aW9uJ31cbiAqL1xuYXN5bmMgZnVuY3Rpb24gaW5Ub3BLQXN5bmNfPFQgZXh0ZW5kcyBUZW5zb3IsIFUgZXh0ZW5kcyBUZW5zb3I+KFxuICAgIHByZWRpY3Rpb25zOiBUfFRlbnNvckxpa2UsIHRhcmdldHM6IFV8VGVuc29yTGlrZSwgayA9IDEpOiBQcm9taXNlPFU+IHtcbiAgY29uc3QgJHByZWRpY3Rpb25zID0gY29udmVydFRvVGVuc29yKHByZWRpY3Rpb25zLCAncHJlZGljdGlvbnMnLCAnaW5Ub3BLJyk7XG4gIGNvbnN0ICR0YXJnZXRzID0gY29udmVydFRvVGVuc29yKHRhcmdldHMsICd0YXJnZXRzJywgJ2luVG9wSycpO1xuXG4gIGFzc2VydChcbiAgICAgICRwcmVkaWN0aW9ucy5yYW5rID4gMSxcbiAgICAgICgpID0+ICdpblRvcEsoKSBleHBlY3RzIHRoZSBwcmVkaWN0aW9ucyB0byBiZSBvZiByYW5rIDIgb3IgaGlnaGVyLCAnICtcbiAgICAgICAgICBgYnV0IGdvdCAkeyRwcmVkaWN0aW9ucy5yYW5rfWApO1xuICBhc3NlcnQoXG4gICAgICAkcHJlZGljdGlvbnMucmFuayAtIDEgPT09ICR0YXJnZXRzLnJhbmssXG4gICAgICAoKSA9PiBgcHJlZGljdGlvbnMgcmFuayBzaG91bGQgYmUgMSBsYXJnZXIgdGhhbiBgICtcbiAgICAgICAgICBgdGFyZ2V0cyByYW5rLCBidXQgZ290IHByZWRpY3Rpb25zIHJhbmsgYCArXG4gICAgICAgICAgYCR7JHByZWRpY3Rpb25zLnJhbmt9IGFuZCB0YXJnZXRzIHJhbmsgJHskdGFyZ2V0cy5yYW5rfWApO1xuICBhc3NlcnRTaGFwZXNNYXRjaChcbiAgICAgICRwcmVkaWN0aW9ucy5zaGFwZS5zbGljZSgwLCAkcHJlZGljdGlvbnMuc2hhcGUubGVuZ3RoIC0gMSksXG4gICAgICAkdGFyZ2V0cy5zaGFwZSxcbiAgICAgIGBwcmVkaWN0aW9ucydzIHNoYXBlIHNob3VsZCBiZSBhbGlnbiB3aXRoIHRoZSB0YXJnZXRzJyBzaGFwZSwgYCArXG4gICAgICAgICAgJ2V4Y2VwdCB0aGUgbGFzdCBkaW1lbnNpb24uJyk7XG4gIGNvbnN0IGxhc3REaW0gPSAkcHJlZGljdGlvbnMuc2hhcGVbJHByZWRpY3Rpb25zLnNoYXBlLmxlbmd0aCAtIDFdO1xuICBhc3NlcnQoXG4gICAgICBrID4gMCAmJiBrIDw9IGxhc3REaW0sXG4gICAgICAoKSA9PiBgJ2snIHBhc3NlZCB0byBpblRvcEsoKSBtdXN0IGJlID4gMCAmJiA8PSB0aGUgcHJlZGljdGlvbnMgbGFzdCBgICtcbiAgICAgICAgICBgZGltZW5zaW9uICgke2xhc3REaW19KSwgYnV0IGdvdCAke2t9YCk7XG5cbiAgY29uc3QgcHJlZGljdGlvbnNWYWxzID0gYXdhaXQgJHByZWRpY3Rpb25zLmRhdGEoKTtcbiAgY29uc3QgdGFyZ2V0c1ZhbHMgPSBhd2FpdCAkdGFyZ2V0cy5kYXRhKCk7XG5cbiAgLy8gUmVzaGFwZSBwcmVkaWN0aW9uc1ZhbHMgaW50byBhIDJkIHRlbnNvciBbYmF0Y2gsIGxhc3REaW1dXG4gIC8vIGFuZCBsb29rIHVwIHRvcEsgYWxvbmcgbGFzdERpbS5cbiAgY29uc3QgW2JhdGNoLCBzaXplXSA9IFtwcmVkaWN0aW9uc1ZhbHMubGVuZ3RoIC8gbGFzdERpbSwgbGFzdERpbV07XG4gIGNvbnN0IHByZWNpc2lvbiA9IGdldFR5cGVkQXJyYXlGcm9tRFR5cGUoJ2Jvb2wnLCBiYXRjaCk7XG5cbiAgZm9yIChsZXQgYiA9IDA7IGIgPCBiYXRjaDsgYisrKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gYiAqIHNpemU7XG4gICAgY29uc3QgdmFscyA9IHByZWRpY3Rpb25zVmFscy5zdWJhcnJheShvZmZzZXQsIG9mZnNldCArIHNpemUpO1xuICAgIGNvbnN0IHZhbEFuZEluZDogQXJyYXk8e3ZhbHVlOiBudW1iZXIsIGluZGV4OiBudW1iZXJ9PiA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsQW5kSW5kLnB1c2goe3ZhbHVlOiB2YWxzW2ldLCBpbmRleDogaX0pO1xuICAgIH1cbiAgICB2YWxBbmRJbmQuc29ydCgoYSwgYikgPT4gYi52YWx1ZSAtIGEudmFsdWUpO1xuXG4gICAgcHJlY2lzaW9uW2JdID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGs7IGkrKykge1xuICAgICAgaWYgKHZhbEFuZEluZFtpXS5pbmRleCA9PT0gdGFyZ2V0c1ZhbHNbYl0pIHtcbiAgICAgICAgcHJlY2lzaW9uW2JdID0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHByZWRpY3Rpb25zICE9PSAkcHJlZGljdGlvbnMpIHtcbiAgICAkcHJlZGljdGlvbnMuZGlzcG9zZSgpO1xuICB9XG4gIGlmICh0YXJnZXRzICE9PSAkdGFyZ2V0cykge1xuICAgICR0YXJnZXRzLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIC8vIE91dHB1dCBwcmVjaXNpb24gaGFzIHRoZSBzYW1lIHNoYXBlIGFzIHRhcmdldHMuXG4gIHJldHVybiB0ZW5zb3IocHJlY2lzaW9uLCAkdGFyZ2V0cy5zaGFwZSwgJ2Jvb2wnKSBhcyBVO1xufVxuXG5leHBvcnQgY29uc3QgaW5Ub3BLQXN5bmMgPSBpblRvcEtBc3luY187XG4iXX0=","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { customGrad } from '../../gradients';\nimport { FusedDepthwiseConv2D } from '../../kernel_names';\nimport { makeTypesMatch } from '../../tensor_util';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { add } from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport * as conv_util from '../conv_util';\nimport { depthwiseConv2d as unfusedDepthwiseConv2d } from '../depthwise_conv2d';\nimport { depthwiseConv2dNativeBackpropFilter } from '../depthwise_conv2d_native_backprop_filter';\nimport { depthwiseConv2dNativeBackpropInput } from '../depthwise_conv2d_native_backprop_input';\nimport { applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse } from '../fused_util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * Computes depthwise 2D convolution, optionally fused with adding a\n * bias and applying an activation.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`).\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`\n *     activation.\n */\nfunction fusedDepthwiseConv2d_({ x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode, bias, activation = 'linear', preluActivationWeights, leakyreluAlpha }) {\n    if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n        let result = unfusedDepthwiseConv2d(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n        if (bias != null) {\n            result = add(result, bias);\n        }\n        return applyActivation(result, activation, preluActivationWeights, leakyreluAlpha);\n    }\n    const $x = convertToTensor(x, 'x', 'depthwiseConv2d', 'float32');\n    const $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d', 'float32');\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    util.assert(x4D.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got ` +\n        `rank ${x4D.rank}.`);\n    util.assert($filter.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, ` +\n        `but got rank ${$filter.rank}.`);\n    util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in fused depthwiseConv2d: number of input channels ` +\n        `(${x4D.shape[3]}) must match the inChannels dimension in ` +\n        `filter ${$filter.shape[2]}.`);\n    if (dilations == null) {\n        dilations = [1, 1];\n    }\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in fused depthwiseConv2d: Either strides or dilations must ' +\n        `be 1. Got strides ${strides} and dilations '${dilations}'`);\n    conv_util.checkPadOnDimRoundingMode('fused depthwiseConv2d', pad, dimRoundingMode);\n    const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    let $bias;\n    if (bias != null) {\n        $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n        [$bias] = makeTypesMatch($bias, $x);\n        broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n    }\n    let $preluActivationWeights;\n    if (preluActivationWeights != null) {\n        $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused depthwiseConv2d');\n    }\n    const grad = (dy, saved) => {\n        util.assert(conv_util.tupleValuesAreOne(dilations), () => 'Error in gradient of fused depthwiseConv2d: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${dilations}'`);\n        const [$filter, x4D, y, bias] = saved;\n        const dyActivation = getFusedDyActivation(dy, y, activation);\n        const xDer = depthwiseConv2dNativeBackpropInput(x4D.shape, dyActivation, $filter, strides, pad, dilations, dimRoundingMode);\n        const filterDer = depthwiseConv2dNativeBackpropFilter(x4D, dyActivation, $filter.shape, strides, pad, dilations, dimRoundingMode);\n        if (bias != null) {\n            const biasDer = getFusedBiasGradient($bias, dyActivation);\n            return [xDer, filterDer, biasDer];\n        }\n        return [xDer, filterDer];\n    };\n    const inputs = {\n        x: x4D,\n        filter: $filter,\n        bias: $bias,\n        preluActivationWeights: $preluActivationWeights\n    };\n    const attrs = {\n        strides,\n        pad,\n        dataFormat,\n        dilations,\n        dimRoundingMode,\n        activation,\n        leakyreluAlpha\n    };\n    // Depending on the the params passed in we will have different number of\n    // inputs and thus a a different number of elements in the gradient.\n    if (bias == null) {\n        const customOp = customGrad((x4D, filter, save) => {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            let res = ENGINE.runKernel(FusedDepthwiseConv2D, inputs, attrs);\n            save([filter, x4D, res]);\n            if (reshapedTo4D) {\n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n            }\n            return { value: res, gradFunc: grad };\n        });\n        return customOp(x4D, $filter);\n    }\n    else {\n        const customOpWithBias = customGrad((x4D, filter, bias, save) => {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            let res = ENGINE.runKernel(FusedDepthwiseConv2D, inputs, attrs);\n            save([filter, x4D, res, bias]);\n            if (reshapedTo4D) {\n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n            }\n            return { value: res, gradFunc: grad };\n        });\n        return customOpWithBias(x4D, $filter, $bias);\n    }\n}\nexport const depthwiseConv2d = /* @__PURE__ */ op({ fusedDepthwiseConv2d_ });\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { CompositeArrayBuffer } from './composite_array_buffer';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n    return new Promise(resolve => setTimeout(resolve)).then(f);\n}\nclass BrowserDownloads {\n    constructor(fileNamePrefix) {\n        if (!env().getBool('IS_BROWSER')) {\n            // TODO(cais): Provide info on what IOHandlers are available under the\n            //   current environment.\n            throw new Error('browserDownloads() cannot proceed because the current environment ' +\n                'is not a browser.');\n        }\n        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n            fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n        }\n        if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n            fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n        }\n        this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n        this.weightDataFileName =\n            fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n    }\n    async save(modelArtifacts) {\n        if (typeof (document) === 'undefined') {\n            throw new Error('Browser downloads are not supported in ' +\n                'this environment since `document` is not present');\n        }\n        // TODO(mattsoulanille): Support saving models over 2GB that exceed\n        // Chrome's ArrayBuffer size limit.\n        const weightBuffer = CompositeArrayBuffer.join(modelArtifacts.weightData);\n        const weightsURL = window.URL.createObjectURL(new Blob([weightBuffer], { type: 'application/octet-stream' }));\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserDownloads.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const weightsManifest = [{\n                    paths: ['./' + this.weightDataFileName],\n                    weights: modelArtifacts.weightSpecs\n                }];\n            const modelJSON = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n            const modelJsonURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelJSON)], { type: 'application/json' }));\n            // If anchor elements are not provided, create them without attaching them\n            // to parents, so that the downloaded file names can be controlled.\n            const jsonAnchor = this.modelJsonAnchor == null ?\n                document.createElement('a') :\n                this.modelJsonAnchor;\n            jsonAnchor.download = this.modelJsonFileName;\n            jsonAnchor.href = modelJsonURL;\n            // Trigger downloads by evoking a click event on the download anchors.\n            // When multiple downloads are started synchronously, Firefox will only\n            // save the last one.\n            await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n            if (modelArtifacts.weightData != null) {\n                const weightDataAnchor = this.weightDataAnchor == null ?\n                    document.createElement('a') :\n                    this.weightDataAnchor;\n                weightDataAnchor.download = this.weightDataFileName;\n                weightDataAnchor.href = weightsURL;\n                await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n            }\n            return { modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts) };\n        }\n    }\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\nexport { BrowserDownloads };\nclass BrowserFiles {\n    constructor(files) {\n        if (files == null || files.length < 1) {\n            throw new Error(`When calling browserFiles, at least 1 file is required, ` +\n                `but received ${files}`);\n        }\n        this.jsonFile = files[0];\n        this.weightsFiles = files.slice(1);\n    }\n    async load() {\n        return new Promise((resolve, reject) => {\n            const jsonReader = new FileReader();\n            jsonReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const modelJSON = JSON.parse(event.target.result);\n                const modelTopology = modelJSON.modelTopology;\n                if (modelTopology == null) {\n                    reject(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));\n                    return;\n                }\n                const weightsManifest = modelJSON.weightsManifest;\n                if (weightsManifest == null) {\n                    reject(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));\n                    return;\n                }\n                if (this.weightsFiles.length === 0) {\n                    resolve({ modelTopology });\n                    return;\n                }\n                const modelArtifactsPromise = getModelArtifactsForJSON(modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n                resolve(modelArtifactsPromise);\n            };\n            jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` +\n                `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` +\n                `Keras-style tf.Model artifacts only.`);\n            jsonReader.readAsText(this.jsonFile);\n        });\n    }\n    loadWeights(weightsManifest) {\n        const weightSpecs = [];\n        const paths = [];\n        for (const entry of weightsManifest) {\n            weightSpecs.push(...entry.weights);\n            paths.push(...entry.paths);\n        }\n        const pathToFile = this.checkManifestAndWeightFiles(weightsManifest);\n        const promises = paths.map(path => this.loadWeightsFile(path, pathToFile[path]));\n        return Promise.all(promises).then(buffers => [weightSpecs, buffers]);\n    }\n    loadWeightsFile(path, file) {\n        return new Promise((resolve, reject) => {\n            const weightFileReader = new FileReader();\n            weightFileReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const weightData = event.target.result;\n                resolve(weightData);\n            };\n            weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n            weightFileReader.readAsArrayBuffer(file);\n        });\n    }\n    /**\n     * Check the compatibility between weights manifest and weight files.\n     */\n    checkManifestAndWeightFiles(manifest) {\n        const basenames = [];\n        const fileNames = this.weightsFiles.map(file => basename(file.name));\n        const pathToFile = {};\n        for (const group of manifest) {\n            group.paths.forEach(path => {\n                const pathBasename = basename(path);\n                if (basenames.indexOf(pathBasename) !== -1) {\n                    throw new Error(`Duplicate file basename found in weights manifest: ` +\n                        `'${pathBasename}'`);\n                }\n                basenames.push(pathBasename);\n                if (fileNames.indexOf(pathBasename) === -1) {\n                    throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n                }\n                else {\n                    pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n                }\n            });\n        }\n        if (basenames.length !== this.weightsFiles.length) {\n            throw new Error(`Mismatch in the number of files in weights manifest ` +\n                `(${basenames.length}) and the number of weight files provided ` +\n                `(${this.weightsFiles.length}).`);\n        }\n        return pathToFile;\n    }\n}\nexport const browserDownloadsRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n            return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model') {\n    return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, one or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files) {\n    return new BrowserFiles(files);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass PassthroughLoader {\n    constructor(modelArtifacts) {\n        this.modelArtifacts = modelArtifacts;\n    }\n    load() {\n        return this.modelArtifacts;\n    }\n}\nclass PassthroughSaver {\n    constructor(saveHandler) {\n        this.saveHandler = saveHandler;\n    }\n    save(modelArtifacts) {\n        return this.saveHandler(modelArtifacts);\n    }\n}\nclass PassthroughAsync {\n    constructor(handler) {\n        if (handler.load) {\n            this.load = () => Promise.resolve(handler.load());\n        }\n        if (handler.save) {\n            this.save = (modelArtifacts) => Promise.resolve(handler.save(modelArtifacts));\n        }\n    }\n}\n/**\n * Creates an IOHandler that loads model artifacts from memory.\n *\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * const model = await tf.loadLayersModel(tf.io.fromMemory(\n *     modelTopology, weightSpecs, weightData));\n * ```\n *\n * @param modelArtifacts a object containing model topology (i.e., parsed from\n *   the JSON format).\n * @param weightSpecs An array of `WeightsManifestEntry` objects describing the\n *   names, shapes, types, and quantization of the weight data. Optional.\n * @param weightData A single `ArrayBuffer` containing the weight data,\n *   concatenated in the order described by the weightSpecs. Optional.\n * @param trainingConfig Model training configuration. Optional.\n *\n * @returns A passthrough `IOHandler` that simply loads the provided data.\n */\nexport function fromMemory(modelArtifacts, weightSpecs, weightData, trainingConfig) {\n    const args = arguments;\n    return new PassthroughAsync(fromMemorySync(...args));\n}\n/**\n * Creates an IOHandler that loads model artifacts from memory.\n *\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * const model = await tf.loadLayersModel(tf.io.fromMemory(\n *     modelTopology, weightSpecs, weightData));\n * ```\n *\n * @param modelArtifacts a object containing model topology (i.e., parsed from\n *   the JSON format).\n * @param weightSpecs An array of `WeightsManifestEntry` objects describing the\n *   names, shapes, types, and quantization of the weight data. Optional.\n * @param weightData A single `ArrayBuffer` containing the weight data,\n *   concatenated in the order described by the weightSpecs. Optional.\n * @param trainingConfig Model training configuration. Optional.\n *\n * @returns A passthrough `IOHandlerSync` that simply loads the provided data.\n */\nexport function fromMemorySync(modelArtifacts, weightSpecs, weightData, trainingConfig) {\n    if (arguments.length === 1) {\n        const isModelArtifacts = modelArtifacts.modelTopology != null ||\n            modelArtifacts.weightSpecs != null;\n        if (isModelArtifacts) {\n            return new PassthroughLoader(modelArtifacts);\n        }\n        else {\n            // Legacy support: with only modelTopology.\n            // TODO(cais): Remove this deprecated API.\n            console.warn('Please call tf.io.fromMemory() with only one argument. ' +\n                'The argument should be of type ModelArtifacts. ' +\n                'The multi-argument signature of tf.io.fromMemory() has been ' +\n                'deprecated and will be removed in a future release.');\n            return new PassthroughLoader({ modelTopology: modelArtifacts });\n        }\n    }\n    else {\n        // Legacy support.\n        // TODO(cais): Remove this deprecated API.\n        console.warn('Please call tf.io.fromMemory() with only one argument. ' +\n            'The argument should be of type ModelArtifacts. ' +\n            'The multi-argument signature of tf.io.fromMemory() has been ' +\n            'deprecated and will be removed in a future release.');\n        return new PassthroughLoader({\n            modelTopology: modelArtifacts,\n            weightSpecs,\n            weightData,\n            trainingConfig\n        });\n    }\n}\n/**\n * Creates an IOHandler that passes saved model artifacts to a callback.\n *\n * ```js\n * function handleSave(artifacts) {\n *   // ... do something with the artifacts ...\n *   return {modelArtifactsInfo: {...}, ...};\n * }\n *\n * const saveResult = model.save(tf.io.withSaveHandler(handleSave));\n * ```\n *\n * @param saveHandler A function that accepts a `ModelArtifacts` and returns a\n *     promise that resolves to a `SaveResult`.\n */\nexport function withSaveHandler(saveHandler) {\n    return new PassthroughSaver(saveHandler);\n}\n/**\n * Creates an IOHandlerSync that passes saved model artifacts to a callback.\n *\n * ```js\n * function handleSave(artifacts) {\n *   // ... do something with the artifacts ...\n *   return {modelArtifactsInfo: {...}, ...};\n * }\n *\n * const saveResult = model.save(tf.io.withSaveHandler(handleSave));\n * ```\n *\n * @param saveHandler A function that accepts a `ModelArtifacts` and returns a\n *     `SaveResult`.\n */\nexport function withSaveHandlerSync(saveHandler) {\n    return new PassthroughSaver(saveHandler);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { cast } from './cast';\nimport { matMul } from './mat_mul';\nimport { oneHot } from './one_hot';\nimport { op } from './operation';\nimport { transpose } from './transpose';\n/**\n * Computes the confusion matrix from true labels and predicted labels.\n *\n * ```js\n * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');\n * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');\n * const numClasses = 3;\n * const out = tf.math.confusionMatrix(labels, predictions, numClasses);\n * out.print();\n * // Expected output matrix:\n * // [[2, 0, 0],\n * //  [0, 1, 1],\n * //  [0, 0, 1]]\n * ```\n *\n * @param labels The target labels, assumed to be 0-based integers\n *   for the classes. The shape is `[numExamples]`, where\n *   `numExamples` is the number of examples included.\n * @param predictions The predicted classes, assumed to be\n *   0-based integers for the classes. Must have the same shape as `labels`.\n * @param numClasses Number of all classes, as an integer.\n *   Its value must be larger than the largest element in `labels` and\n *   `predictions`.\n * @returns The confusion matrix as a int32-type 2D tensor. The value at\n *   row `r` and column `c` is the number of times examples of actual class\n *   `r` were predicted as class `c`.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nexport function confusionMatrix_(labels, predictions, numClasses) {\n    const $labels = convertToTensor(labels, 'labels', 'confusionMatrix');\n    const $predictions = convertToTensor(predictions, 'predictions', 'confusionMatrix');\n    util.assert(numClasses == null || numClasses > 0 && Number.isInteger(numClasses), () => `If provided, numClasses must be a positive integer, ` +\n        `but got ${numClasses}`);\n    util.assert($labels.rank === 1, () => `Expected the rank of labels to be 1, but got ${$labels.rank}`);\n    util.assert($predictions.rank === 1, () => `Expected the rank of predictions to be 1, ` +\n        `but got ${$predictions.rank}`);\n    util.assert($labels.shape[0] === $predictions.shape[0], () => `Mismatch in the number of examples: ` +\n        `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` +\n        `Labels and predictions should have the same number of elements.`);\n    util.assert(numClasses > 0 && Number.isInteger(numClasses), () => `numClasses is required to be a positive integer, but got ` +\n        `${numClasses}`);\n    // TODO(cais): In the future, if oneHot supports tensors inputs for\n    //   `numClasses`, `confusionMatrix` can make `numClasses` optional.\n    const oneHotLabels = oneHot(cast($labels, 'int32'), numClasses);\n    const oneHotPredictions = oneHot(cast($predictions, 'int32'), numClasses);\n    const oneHotLabelsT = transpose(oneHotLabels);\n    const product = matMul(oneHotLabelsT, oneHotPredictions);\n    return cast(product, 'int32');\n}\nexport const confusionMatrix = /* @__PURE__ */ op({ confusionMatrix_ });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZnVzaW9uX21hdHJpeC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvb3BzL2NvbmZ1c2lvbl9tYXRyaXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBR0gsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRW5ELE9BQU8sS0FBSyxJQUFJLE1BQU0sU0FBUyxDQUFDO0FBRWhDLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNqQyxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUV0Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTRCRztBQUNILE1BQU0sVUFBVSxnQkFBZ0IsQ0FDNUIsTUFBMkIsRUFBRSxXQUFnQyxFQUM3RCxVQUFrQjtJQUNwQixNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3JFLE1BQU0sWUFBWSxHQUNkLGVBQWUsQ0FBQyxXQUFXLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFFbkUsSUFBSSxDQUFDLE1BQU0sQ0FDUCxVQUFVLElBQUksSUFBSSxJQUFJLFVBQVUsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFDcEUsR0FBRyxFQUFFLENBQUMsc0RBQXNEO1FBQ3hELFdBQVcsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNqQyxJQUFJLENBQUMsTUFBTSxDQUNQLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUNsQixHQUFHLEVBQUUsQ0FBQyxnREFBZ0QsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDMUUsSUFBSSxDQUFDLE1BQU0sQ0FDUCxZQUFZLENBQUMsSUFBSSxLQUFLLENBQUMsRUFDdkIsR0FBRyxFQUFFLENBQUMsNENBQTRDO1FBQzlDLFdBQVcsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FDUCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQzFDLEdBQUcsRUFBRSxDQUFDLHNDQUFzQztRQUN4QyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSTtRQUNwRCxpRUFBaUUsQ0FBQyxDQUFDO0lBQzNFLElBQUksQ0FBQyxNQUFNLENBQ1AsVUFBVSxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUM5QyxHQUFHLEVBQUUsQ0FBQywyREFBMkQ7UUFDN0QsR0FBRyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3pCLG1FQUFtRTtJQUNuRSxvRUFBb0U7SUFFcEUsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUUsVUFBVSxDQUFhLENBQUM7SUFDNUUsTUFBTSxpQkFBaUIsR0FDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLEVBQUUsVUFBVSxDQUFhLENBQUM7SUFDaEUsTUFBTSxhQUFhLEdBQWEsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hELE1BQU0sT0FBTyxHQUFhLE1BQU0sQ0FBQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUNuRSxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxlQUFlLENBQUMsRUFBRSxDQUFDLEVBQUMsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvcjFELCBUZW5zb3IyRH0gZnJvbSAnLi4vdGVuc29yJztcbmltcG9ydCB7Y29udmVydFRvVGVuc29yfSBmcm9tICcuLi90ZW5zb3JfdXRpbF9lbnYnO1xuaW1wb3J0IHtUZW5zb3JMaWtlfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQge2Nhc3R9IGZyb20gJy4vY2FzdCc7XG5pbXBvcnQge21hdE11bH0gZnJvbSAnLi9tYXRfbXVsJztcbmltcG9ydCB7b25lSG90fSBmcm9tICcuL29uZV9ob3QnO1xuaW1wb3J0IHtvcH0gZnJvbSAnLi9vcGVyYXRpb24nO1xuaW1wb3J0IHt0cmFuc3Bvc2V9IGZyb20gJy4vdHJhbnNwb3NlJztcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgY29uZnVzaW9uIG1hdHJpeCBmcm9tIHRydWUgbGFiZWxzIGFuZCBwcmVkaWN0ZWQgbGFiZWxzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBsYWJlbHMgPSB0Zi50ZW5zb3IxZChbMCwgMSwgMiwgMSwgMF0sICdpbnQzMicpO1xuICogY29uc3QgcHJlZGljdGlvbnMgPSB0Zi50ZW5zb3IxZChbMCwgMiwgMiwgMSwgMF0sICdpbnQzMicpO1xuICogY29uc3QgbnVtQ2xhc3NlcyA9IDM7XG4gKiBjb25zdCBvdXQgPSB0Zi5tYXRoLmNvbmZ1c2lvbk1hdHJpeChsYWJlbHMsIHByZWRpY3Rpb25zLCBudW1DbGFzc2VzKTtcbiAqIG91dC5wcmludCgpO1xuICogLy8gRXhwZWN0ZWQgb3V0cHV0IG1hdHJpeDpcbiAqIC8vIFtbMiwgMCwgMF0sXG4gKiAvLyAgWzAsIDEsIDFdLFxuICogLy8gIFswLCAwLCAxXV1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBsYWJlbHMgVGhlIHRhcmdldCBsYWJlbHMsIGFzc3VtZWQgdG8gYmUgMC1iYXNlZCBpbnRlZ2Vyc1xuICogICBmb3IgdGhlIGNsYXNzZXMuIFRoZSBzaGFwZSBpcyBgW251bUV4YW1wbGVzXWAsIHdoZXJlXG4gKiAgIGBudW1FeGFtcGxlc2AgaXMgdGhlIG51bWJlciBvZiBleGFtcGxlcyBpbmNsdWRlZC5cbiAqIEBwYXJhbSBwcmVkaWN0aW9ucyBUaGUgcHJlZGljdGVkIGNsYXNzZXMsIGFzc3VtZWQgdG8gYmVcbiAqICAgMC1iYXNlZCBpbnRlZ2VycyBmb3IgdGhlIGNsYXNzZXMuIE11c3QgaGF2ZSB0aGUgc2FtZSBzaGFwZSBhcyBgbGFiZWxzYC5cbiAqIEBwYXJhbSBudW1DbGFzc2VzIE51bWJlciBvZiBhbGwgY2xhc3NlcywgYXMgYW4gaW50ZWdlci5cbiAqICAgSXRzIHZhbHVlIG11c3QgYmUgbGFyZ2VyIHRoYW4gdGhlIGxhcmdlc3QgZWxlbWVudCBpbiBgbGFiZWxzYCBhbmRcbiAqICAgYHByZWRpY3Rpb25zYC5cbiAqIEByZXR1cm5zIFRoZSBjb25mdXNpb24gbWF0cml4IGFzIGEgaW50MzItdHlwZSAyRCB0ZW5zb3IuIFRoZSB2YWx1ZSBhdFxuICogICByb3cgYHJgIGFuZCBjb2x1bW4gYGNgIGlzIHRoZSBudW1iZXIgb2YgdGltZXMgZXhhbXBsZXMgb2YgYWN0dWFsIGNsYXNzXG4gKiAgIGByYCB3ZXJlIHByZWRpY3RlZCBhcyBjbGFzcyBgY2AuXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ09wZXJhdGlvbnMnLCBzdWJoZWFkaW5nOiAnRXZhbHVhdGlvbid9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25mdXNpb25NYXRyaXhfKFxuICAgIGxhYmVsczogVGVuc29yMUR8VGVuc29yTGlrZSwgcHJlZGljdGlvbnM6IFRlbnNvcjFEfFRlbnNvckxpa2UsXG4gICAgbnVtQ2xhc3NlczogbnVtYmVyKTogVGVuc29yMkQge1xuICBjb25zdCAkbGFiZWxzID0gY29udmVydFRvVGVuc29yKGxhYmVscywgJ2xhYmVscycsICdjb25mdXNpb25NYXRyaXgnKTtcbiAgY29uc3QgJHByZWRpY3Rpb25zID1cbiAgICAgIGNvbnZlcnRUb1RlbnNvcihwcmVkaWN0aW9ucywgJ3ByZWRpY3Rpb25zJywgJ2NvbmZ1c2lvbk1hdHJpeCcpO1xuXG4gIHV0aWwuYXNzZXJ0KFxuICAgICAgbnVtQ2xhc3NlcyA9PSBudWxsIHx8IG51bUNsYXNzZXMgPiAwICYmIE51bWJlci5pc0ludGVnZXIobnVtQ2xhc3NlcyksXG4gICAgICAoKSA9PiBgSWYgcHJvdmlkZWQsIG51bUNsYXNzZXMgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIsIGAgK1xuICAgICAgICAgIGBidXQgZ290ICR7bnVtQ2xhc3Nlc31gKTtcbiAgdXRpbC5hc3NlcnQoXG4gICAgICAkbGFiZWxzLnJhbmsgPT09IDEsXG4gICAgICAoKSA9PiBgRXhwZWN0ZWQgdGhlIHJhbmsgb2YgbGFiZWxzIHRvIGJlIDEsIGJ1dCBnb3QgJHskbGFiZWxzLnJhbmt9YCk7XG4gIHV0aWwuYXNzZXJ0KFxuICAgICAgJHByZWRpY3Rpb25zLnJhbmsgPT09IDEsXG4gICAgICAoKSA9PiBgRXhwZWN0ZWQgdGhlIHJhbmsgb2YgcHJlZGljdGlvbnMgdG8gYmUgMSwgYCArXG4gICAgICAgICAgYGJ1dCBnb3QgJHskcHJlZGljdGlvbnMucmFua31gKTtcbiAgdXRpbC5hc3NlcnQoXG4gICAgICAkbGFiZWxzLnNoYXBlWzBdID09PSAkcHJlZGljdGlvbnMuc2hhcGVbMF0sXG4gICAgICAoKSA9PiBgTWlzbWF0Y2ggaW4gdGhlIG51bWJlciBvZiBleGFtcGxlczogYCArXG4gICAgICAgICAgYCR7JGxhYmVscy5zaGFwZVswXX0gdnMuICR7JHByZWRpY3Rpb25zLnNoYXBlWzBdfS4gYCArXG4gICAgICAgICAgYExhYmVscyBhbmQgcHJlZGljdGlvbnMgc2hvdWxkIGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIGVsZW1lbnRzLmApO1xuICB1dGlsLmFzc2VydChcbiAgICAgIG51bUNsYXNzZXMgPiAwICYmIE51bWJlci5pc0ludGVnZXIobnVtQ2xhc3NlcyksXG4gICAgICAoKSA9PiBgbnVtQ2xhc3NlcyBpcyByZXF1aXJlZCB0byBiZSBhIHBvc2l0aXZlIGludGVnZXIsIGJ1dCBnb3QgYCArXG4gICAgICAgICAgYCR7bnVtQ2xhc3Nlc31gKTtcbiAgLy8gVE9ETyhjYWlzKTogSW4gdGhlIGZ1dHVyZSwgaWYgb25lSG90IHN1cHBvcnRzIHRlbnNvcnMgaW5wdXRzIGZvclxuICAvLyAgIGBudW1DbGFzc2VzYCwgYGNvbmZ1c2lvbk1hdHJpeGAgY2FuIG1ha2UgYG51bUNsYXNzZXNgIG9wdGlvbmFsLlxuXG4gIGNvbnN0IG9uZUhvdExhYmVscyA9IG9uZUhvdChjYXN0KCRsYWJlbHMsICdpbnQzMicpLCBudW1DbGFzc2VzKSBhcyBUZW5zb3IyRDtcbiAgY29uc3Qgb25lSG90UHJlZGljdGlvbnMgPVxuICAgICAgb25lSG90KGNhc3QoJHByZWRpY3Rpb25zLCAnaW50MzInKSwgbnVtQ2xhc3NlcykgYXMgVGVuc29yMkQ7XG4gIGNvbnN0IG9uZUhvdExhYmVsc1Q6IFRlbnNvcjJEID0gdHJhbnNwb3NlKG9uZUhvdExhYmVscyk7XG4gIGNvbnN0IHByb2R1Y3Q6IFRlbnNvcjJEID0gbWF0TXVsKG9uZUhvdExhYmVsc1QsIG9uZUhvdFByZWRpY3Rpb25zKTtcbiAgcmV0dXJuIGNhc3QocHJvZHVjdCwgJ2ludDMyJyk7XG59XG5cbmV4cG9ydCBjb25zdCBjb25mdXNpb25NYXRyaXggPSAvKiBAX19QVVJFX18gKi8gb3Aoe2NvbmZ1c2lvbk1hdHJpeF99KTtcbiJdfQ==","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { env } from '../environment';\nimport { Draw, FromPixels } from '../kernel_names';\nimport { getKernel } from '../kernel_registry';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { op } from './operation';\nimport { tensor3d } from './tensor3d';\nlet fromPixels2DContext;\nlet hasToPixelsWarned = false;\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @returns A Tensor3D with the shape `[height, width, numChannels]`.\n *\n * Note: fromPixels can be lossy in some cases, same image may result in\n * slightly different tensor values, if rendered by different rendering\n * engines. This means that results from different browsers, or even same\n * browser with CPU and GPU rendering engines can be different. See discussion\n * in details:\n * https://github.com/tensorflow/tfjs/issues/5482\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nfunction fromPixels_(pixels, numChannels = 3) {\n    // Sanity checks.\n    if (numChannels > 4) {\n        throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\n    }\n    if (pixels == null) {\n        throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n    }\n    let isPixelData = false;\n    let isImageData = false;\n    let isVideo = false;\n    let isImage = false;\n    let isCanvasLike = false;\n    let isImageBitmap = false;\n    if (pixels.data instanceof Uint8Array) {\n        isPixelData = true;\n    }\n    else if (typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {\n        isImageData = true;\n    }\n    else if (typeof (HTMLVideoElement) !== 'undefined' &&\n        pixels instanceof HTMLVideoElement) {\n        isVideo = true;\n    }\n    else if (typeof (HTMLImageElement) !== 'undefined' &&\n        pixels instanceof HTMLImageElement) {\n        isImage = true;\n        // tslint:disable-next-line: no-any\n    }\n    else if (pixels.getContext != null) {\n        isCanvasLike = true;\n    }\n    else if (typeof (ImageBitmap) !== 'undefined' && pixels instanceof ImageBitmap) {\n        isImageBitmap = true;\n    }\n    else {\n        throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' +\n            `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +\n            `in browser, or OffscreenCanvas, ImageData in webworker` +\n            ` or {data: Uint32Array, width: number, height: number}, ` +\n            `but was ${pixels.constructor.name}`);\n    }\n    // If the current backend has 'FromPixels' registered, it has a more\n    // efficient way of handling pixel uploads, so we call that.\n    const kernel = getKernel(FromPixels, ENGINE.backendName);\n    if (kernel != null) {\n        const inputs = { pixels };\n        const attrs = { numChannels };\n        return ENGINE.runKernel(FromPixels, inputs, attrs);\n    }\n    const [width, height] = isVideo ?\n        [\n            pixels.videoWidth,\n            pixels.videoHeight\n        ] :\n        [pixels.width, pixels.height];\n    let vals;\n    if (isCanvasLike) {\n        vals =\n            // tslint:disable-next-line:no-any\n            pixels.getContext('2d').getImageData(0, 0, width, height).data;\n    }\n    else if (isImageData || isPixelData) {\n        vals = pixels.data;\n    }\n    else if (isImage || isVideo || isImageBitmap) {\n        if (fromPixels2DContext == null) {\n            if (typeof document === 'undefined') {\n                if (typeof OffscreenCanvas !== 'undefined' &&\n                    typeof OffscreenCanvasRenderingContext2D !== 'undefined') {\n                    // @ts-ignore\n                    fromPixels2DContext = new OffscreenCanvas(1, 1).getContext('2d');\n                }\n                else {\n                    throw new Error('Cannot parse input in current context. ' +\n                        'Reason: OffscreenCanvas Context2D rendering is not supported.');\n                }\n            }\n            else {\n                fromPixels2DContext = document.createElement('canvas').getContext('2d', { willReadFrequently: true });\n            }\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n        vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n    }\n    let values;\n    if (numChannels === 4) {\n        values = new Int32Array(vals);\n    }\n    else {\n        const numPixels = width * height;\n        values = new Int32Array(numPixels * numChannels);\n        for (let i = 0; i < numPixels; i++) {\n            for (let channel = 0; channel < numChannels; ++channel) {\n                values[i * numChannels + channel] = vals[i * 4 + channel];\n            }\n        }\n    }\n    const outShape = [height, width, numChannels];\n    return tensor3d(values, outShape, 'int32');\n}\n// Helper functions for |fromPixelsAsync| to check whether the input can\n// be wrapped into imageBitmap.\nfunction isPixelData(pixels) {\n    return (pixels != null) && (pixels.data instanceof Uint8Array);\n}\nfunction isImageBitmapFullySupported() {\n    return typeof window !== 'undefined' &&\n        typeof (ImageBitmap) !== 'undefined' &&\n        window.hasOwnProperty('createImageBitmap');\n}\nfunction isNonEmptyPixels(pixels) {\n    return pixels != null && pixels.width !== 0 && pixels.height !== 0;\n}\nfunction canWrapPixelsToImageBitmap(pixels) {\n    return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) &&\n        isNonEmptyPixels(pixels) && !isPixelData(pixels);\n}\n/**\n * Creates a `tf.Tensor` from an image in async way.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * (await tf.browser.fromPixelsAsync(image)).print();\n * ```\n * This API is the async version of fromPixels. The API will first\n * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to\n * imageBitmap if the flag is set to true.\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nexport async function fromPixelsAsync(pixels, numChannels = 3) {\n    let inputs = null;\n    // Check whether the backend needs to wrap |pixels| to imageBitmap and\n    // whether |pixels| can be wrapped to imageBitmap.\n    if (env().getBool('WRAP_TO_IMAGEBITMAP') &&\n        canWrapPixelsToImageBitmap(pixels)) {\n        // Force the imageBitmap creation to not do any premultiply alpha\n        // ops.\n        let imageBitmap;\n        try {\n            // wrap in try-catch block, because createImageBitmap may not work\n            // properly in some browsers, e.g.\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1335594\n            // tslint:disable-next-line: no-any\n            imageBitmap = await createImageBitmap(pixels, { premultiplyAlpha: 'none' });\n        }\n        catch (e) {\n            imageBitmap = null;\n        }\n        // createImageBitmap will clip the source size.\n        // In some cases, the input will have larger size than its content.\n        // E.g. new Image(10, 10) but with 1 x 1 content. Using\n        // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which\n        // is not correct. We should avoid wrapping such resouce to\n        // imageBitmap.\n        if (imageBitmap != null && imageBitmap.width === pixels.width &&\n            imageBitmap.height === pixels.height) {\n            inputs = imageBitmap;\n        }\n        else {\n            inputs = pixels;\n        }\n    }\n    else {\n        inputs = pixels;\n    }\n    return fromPixels_(inputs, numChannels);\n}\nfunction validateImgTensor(img) {\n    if (img.rank !== 2 && img.rank !== 3) {\n        throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${img.rank}.`);\n    }\n    const depth = img.rank === 2 ? 1 : img.shape[2];\n    if (depth > 4 || depth === 2) {\n        throw new Error(`toPixels only supports depth of size ` +\n            `1, 3 or 4 but got ${depth}`);\n    }\n    if (img.dtype !== 'float32' && img.dtype !== 'int32') {\n        throw new Error(`Unsupported type for toPixels: ${img.dtype}.` +\n            ` Please use float32 or int32 tensors.`);\n    }\n}\nfunction validateImageOptions(imageOptions) {\n    const alpha = (imageOptions === null || imageOptions === void 0 ? void 0 : imageOptions.alpha) || 1;\n    if (alpha > 1 || alpha < 0) {\n        throw new Error(`Alpha value ${alpha} is suppoed to be in range [0 - 1].`);\n    }\n}\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor\n * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If\n * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport async function toPixels(img, canvas) {\n    let $img = convertToTensor(img, 'img', 'toPixels');\n    if (!(img instanceof Tensor)) {\n        // Assume int32 if user passed a native array.\n        const originalImgTensor = $img;\n        $img = cast(originalImgTensor, 'int32');\n        originalImgTensor.dispose();\n    }\n    validateImgTensor($img);\n    const [height, width] = $img.shape.slice(0, 2);\n    const depth = $img.rank === 2 ? 1 : $img.shape[2];\n    const data = await $img.data();\n    const multiplier = $img.dtype === 'float32' ? 255 : 1;\n    const bytes = new Uint8ClampedArray(width * height * 4);\n    for (let i = 0; i < height * width; ++i) {\n        const rgba = [0, 0, 0, 255];\n        for (let d = 0; d < depth; d++) {\n            const value = data[i * depth + d];\n            if ($img.dtype === 'float32') {\n                if (value < 0 || value > 1) {\n                    throw new Error(`Tensor values for a float32 Tensor must be in the ` +\n                        `range [0 - 1] but encountered ${value}.`);\n                }\n            }\n            else if ($img.dtype === 'int32') {\n                if (value < 0 || value > 255) {\n                    throw new Error(`Tensor values for a int32 Tensor must be in the ` +\n                        `range [0 - 255] but encountered ${value}.`);\n                }\n            }\n            if (depth === 1) {\n                rgba[0] = value * multiplier;\n                rgba[1] = value * multiplier;\n                rgba[2] = value * multiplier;\n            }\n            else {\n                rgba[d] = value * multiplier;\n            }\n        }\n        const j = i * 4;\n        bytes[j + 0] = Math.round(rgba[0]);\n        bytes[j + 1] = Math.round(rgba[1]);\n        bytes[j + 2] = Math.round(rgba[2]);\n        bytes[j + 3] = Math.round(rgba[3]);\n    }\n    if (canvas != null) {\n        if (!hasToPixelsWarned) {\n            const kernel = getKernel(Draw, ENGINE.backendName);\n            if (kernel != null) {\n                console.warn('tf.browser.toPixels is not efficient to draw tensor on canvas. ' +\n                    'Please try tf.browser.draw instead.');\n                hasToPixelsWarned = true;\n            }\n        }\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext('2d');\n        const imageData = new ImageData(bytes, width, height);\n        ctx.putImageData(imageData, 0, 0);\n    }\n    if ($img !== img) {\n        $img.dispose();\n    }\n    return bytes;\n}\n/**\n * Draws a `tf.Tensor` to a canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * @param image The tensor to draw on the canvas. Must match one of\n * these shapes:\n *   - Rank-2 with shape `[height, width`]: Drawn as grayscale.\n *   - Rank-3 with shape `[height, width, 1]`: Drawn as grayscale.\n *   - Rank-3 with shape `[height, width, 3]`: Drawn as RGB with alpha set in\n *     `imageOptions` (defaults to 1, which is opaque).\n *   - Rank-3 with shape `[height, width, 4]`: Drawn as RGBA.\n * @param canvas The canvas to draw to.\n * @param options The configuration arguments for image to be drawn and the\n *     canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport function draw(image, canvas, options) {\n    let $img = convertToTensor(image, 'img', 'draw');\n    if (!(image instanceof Tensor)) {\n        // Assume int32 if user passed a native array.\n        const originalImgTensor = $img;\n        $img = cast(originalImgTensor, 'int32');\n        originalImgTensor.dispose();\n    }\n    validateImgTensor($img);\n    validateImageOptions(options === null || options === void 0 ? void 0 : options.imageOptions);\n    const inputs = { image: $img };\n    const attrs = { canvas, options };\n    ENGINE.runKernel(Draw, inputs, attrs);\n}\nexport const fromPixels = /* @__PURE__ */ op({ fromPixels_ });\n//# sourceMappingURL=data:application/json;base64,","/** @license See the LICENSE file. */\n// This code is auto-generated, do not modify this file!\nconst version = '4.22.0';\nexport { version };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvdmVyc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxQ0FBcUM7QUFFckMsd0RBQXdEO0FBQ3hELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQztBQUN6QixPQUFPLEVBQUMsT0FBTyxFQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgU2VlIHRoZSBMSUNFTlNFIGZpbGUuICovXG5cbi8vIFRoaXMgY29kZSBpcyBhdXRvLWdlbmVyYXRlZCwgZG8gbm90IG1vZGlmeSB0aGlzIGZpbGUhXG5jb25zdCB2ZXJzaW9uID0gJzQuMjIuMCc7XG5leHBvcnQge3ZlcnNpb259O1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// tslint:disable-next-line:max-line-length\nimport { MaxNorm, MinMaxNorm, NonNeg, UnitNorm } from './constraints';\n/**\n * MaxNorm weight constraint.\n *\n * Constrains the weights incident to each hidden unit\n * to have a norm less than or equal to a desired value.\n *\n * References\n *       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting\n * Srivastava, Hinton, et al.\n * 2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n *\n * @doc {heading: 'Constraints',namespace: 'constraints'}\n */\nexport function maxNorm(args) {\n    return new MaxNorm(args);\n}\n/**\n * Constrains the weights incident to each hidden unit to have unit norm.\n *\n * @doc {heading: 'Constraints', namespace: 'constraints'}\n */\nexport function unitNorm(args) {\n    return new UnitNorm(args);\n}\n/**\n * Constrains the weight to be non-negative.\n *\n * @doc {heading: 'Constraints', namespace: 'constraints'}\n */\nexport function nonNeg() {\n    return new NonNeg();\n}\n/** @doc {heading: 'Constraints', namespace: 'constraints'} */\nexport function minMaxNorm(config) {\n    return new MinMaxNorm(config);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0c19jb25zdHJhaW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtbGF5ZXJzL3NyYy9leHBvcnRzX2NvbnN0cmFpbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztHQVFHO0FBQ0gsMkNBQTJDO0FBQzNDLE9BQU8sRUFBYSxPQUFPLEVBQWUsVUFBVSxFQUFrQixNQUFNLEVBQUUsUUFBUSxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBRTNIOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILE1BQU0sVUFBVSxPQUFPLENBQUMsSUFBaUI7SUFDdkMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxRQUFRLENBQUMsSUFBa0I7SUFDekMsT0FBTyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxNQUFNO0lBQ3BCLE9BQU8sSUFBSSxNQUFNLEVBQUUsQ0FBQztBQUN0QixDQUFDO0FBRUQsOERBQThEO0FBQzlELE1BQU0sVUFBVSxVQUFVLENBQUMsTUFBc0I7SUFDL0MsT0FBTyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNoQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZVxuICogbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIG9yIGF0XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVC5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbmltcG9ydCB7Q29uc3RyYWludCwgTWF4Tm9ybSwgTWF4Tm9ybUFyZ3MsIE1pbk1heE5vcm0sIE1pbk1heE5vcm1BcmdzLCBOb25OZWcsIFVuaXROb3JtLCBVbml0Tm9ybUFyZ3N9IGZyb20gJy4vY29uc3RyYWludHMnO1xuXG4vKipcbiAqIE1heE5vcm0gd2VpZ2h0IGNvbnN0cmFpbnQuXG4gKlxuICogQ29uc3RyYWlucyB0aGUgd2VpZ2h0cyBpbmNpZGVudCB0byBlYWNoIGhpZGRlbiB1bml0XG4gKiB0byBoYXZlIGEgbm9ybSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYSBkZXNpcmVkIHZhbHVlLlxuICpcbiAqIFJlZmVyZW5jZXNcbiAqICAgICAgIC0gW0Ryb3BvdXQ6IEEgU2ltcGxlIFdheSB0byBQcmV2ZW50IE5ldXJhbCBOZXR3b3JrcyBmcm9tIE92ZXJmaXR0aW5nXG4gKiBTcml2YXN0YXZhLCBIaW50b24sIGV0IGFsLlxuICogMjAxNF0oaHR0cDovL3d3dy5jcy50b3JvbnRvLmVkdS9+cnNhbGFraHUvcGFwZXJzL3NyaXZhc3RhdmExNGEucGRmKVxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdDb25zdHJhaW50cycsbmFtZXNwYWNlOiAnY29uc3RyYWludHMnfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF4Tm9ybShhcmdzOiBNYXhOb3JtQXJncyk6IENvbnN0cmFpbnQge1xuICByZXR1cm4gbmV3IE1heE5vcm0oYXJncyk7XG59XG5cbi8qKlxuICogQ29uc3RyYWlucyB0aGUgd2VpZ2h0cyBpbmNpZGVudCB0byBlYWNoIGhpZGRlbiB1bml0IHRvIGhhdmUgdW5pdCBub3JtLlxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdDb25zdHJhaW50cycsIG5hbWVzcGFjZTogJ2NvbnN0cmFpbnRzJ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVuaXROb3JtKGFyZ3M6IFVuaXROb3JtQXJncyk6IENvbnN0cmFpbnQge1xuICByZXR1cm4gbmV3IFVuaXROb3JtKGFyZ3MpO1xufVxuXG4vKipcbiAqIENvbnN0cmFpbnMgdGhlIHdlaWdodCB0byBiZSBub24tbmVnYXRpdmUuXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ0NvbnN0cmFpbnRzJywgbmFtZXNwYWNlOiAnY29uc3RyYWludHMnfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9uTmVnKCk6IENvbnN0cmFpbnQge1xuICByZXR1cm4gbmV3IE5vbk5lZygpO1xufVxuXG4vKiogQGRvYyB7aGVhZGluZzogJ0NvbnN0cmFpbnRzJywgbmFtZXNwYWNlOiAnY29uc3RyYWludHMnfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pbk1heE5vcm0oY29uZmlnOiBNaW5NYXhOb3JtQXJncyk6IENvbnN0cmFpbnQge1xuICByZXR1cm4gbmV3IE1pbk1heE5vcm0oY29uZmlnKTtcbn1cbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// tslint:disable-next-line:max-line-length\nimport { Constant, GlorotNormal, GlorotUniform, HeNormal, HeUniform, Identity, LeCunNormal, LeCunUniform, Ones, Orthogonal, RandomNormal, RandomUniform, TruncatedNormal, VarianceScaling, Zeros } from './initializers';\n/**\n * Initializer that generates tensors initialized to 0.\n *\n * @doc {heading: 'Initializers', namespace: 'initializers'}\n */\nexport function zeros() {\n    return new Zeros();\n}\n/**\n * Initializer that generates tensors initialized to 1.\n *\n * @doc {heading: 'Initializers', namespace: 'initializers'}\n */\nexport function ones() {\n    return new Ones();\n}\n/**\n * Initializer that generates values initialized to some constant.\n *\n * @doc {heading: 'Initializers', namespace: 'initializers'}\n */\nexport function constant(args) {\n    return new Constant(args);\n}\n/**\n * Initializer that generates random values initialized to a uniform\n * distribution.\n *\n * Values will be distributed uniformly between the configured minval and\n * maxval.\n *\n * @doc {heading: 'Initializers', namespace: 'initializers'}\n */\nexport function randomUniform(args) {\n    return new RandomUniform(args);\n}\n/**\n * Initializer that generates random values initialized to a normal\n * distribution.\n *\n * @doc {heading: 'Initializers', namespace: 'initializers'}\n */\nexport function randomNormal(args) {\n    return new RandomNormal(args);\n}\n/**\n * Initializer that generates random values initialized to a truncated normal\n * distribution.\n *\n * These values are similar to values from a `RandomNormal` except that values\n * more than two standard deviations from the mean are discarded and re-drawn.\n * This is the recommended initializer for neural network weights and filters.\n *\n * @doc {heading: 'Initializers', namespace: 'initializers'}\n */\nexport function truncatedNormal(args) {\n    return new TruncatedNormal(args);\n}\n/**\n * Initializer that generates the identity matrix.\n * Only use for square 2D matrices.\n *\n * @doc {heading: 'Initializers', namespace: 'initializers'}\n */\nexport function identity(args) {\n    return new Identity(args);\n}\n/**\n * Initializer capable of adapting its scale to the shape of weights.\n * With distribution=NORMAL, samples are drawn from a truncated normal\n * distribution centered on zero, with `stddev = sqrt(scale / n)` where n is:\n *   - number of input units in the weight tensor, if mode = FAN_IN.\n *   - number of output units, if mode = FAN_OUT.\n *   - average of the numbers of input and output units, if mode = FAN_AVG.\n * With distribution=UNIFORM,\n * samples are drawn from a uniform distribution\n * within [-limit, limit], with `limit = sqrt(3 * scale / n)`.\n *\n * @doc {heading: 'Initializers',namespace: 'initializers'}\n */\nexport function varianceScaling(config) {\n    return new VarianceScaling(config);\n}\n/**\n * Glorot uniform initializer, also called Xavier uniform initializer.\n * It draws samples from a uniform distribution within [-limit, limit]\n * where `limit` is `sqrt(6 / (fan_in + fan_out))`\n * where `fan_in` is the number of input units in the weight tensor\n * and `fan_out` is the number of output units in the weight tensor\n *\n * Reference:\n *   Glorot & Bengio, AISTATS 2010\n *       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf.\n *\n * @doc {heading: 'Initializers', namespace: 'initializers'}\n */\nexport function glorotUniform(args) {\n    return new GlorotUniform(args);\n}\n/**\n * Glorot normal initializer, also called Xavier normal initializer.\n * It draws samples from a truncated normal distribution centered on 0\n * with `stddev = sqrt(2 / (fan_in + fan_out))`\n * where `fan_in` is the number of input units in the weight tensor\n * and `fan_out` is the number of output units in the weight tensor.\n *\n * Reference:\n *   Glorot & Bengio, AISTATS 2010\n *       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf\n *\n * @doc {heading: 'Initializers', namespace: 'initializers'}\n */\nexport function glorotNormal(args) {\n    return new GlorotNormal(args);\n}\n/**\n * He normal initializer.\n *\n * It draws samples from a truncated normal distribution centered on 0\n * with `stddev = sqrt(2 / fanIn)`\n * where `fanIn` is the number of input units in the weight tensor.\n *\n * Reference:\n *     He et al., http://arxiv.org/abs/1502.01852\n *\n * @doc {heading: 'Initializers', namespace: 'initializers'}\n */\nexport function heNormal(args) {\n    return new HeNormal(args);\n}\n/**\n * He uniform initializer.\n *\n * It draws samples from a uniform distribution within [-limit, limit]\n * where `limit` is `sqrt(6 / fan_in)`\n * where `fanIn` is the number of input units in the weight tensor.\n *\n * Reference:\n *     He et al., http://arxiv.org/abs/1502.01852\n *\n * @doc {heading: 'Initializers',namespace: 'initializers'}\n */\nexport function heUniform(args) {\n    return new HeUniform(args);\n}\n/**\n * LeCun normal initializer.\n *\n * It draws samples from a truncated normal distribution centered on 0\n * with `stddev = sqrt(1 / fanIn)`\n * where `fanIn` is the number of input units in the weight tensor.\n *\n * References:\n *   [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n *   [Efficient Backprop](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf)\n *\n * @doc {heading: 'Initializers', namespace: 'initializers'}\n */\nexport function leCunNormal(args) {\n    return new LeCunNormal(args);\n}\n/**\n * LeCun uniform initializer.\n *\n * It draws samples from a uniform distribution in the interval\n * `[-limit, limit]` with `limit = sqrt(3 / fanIn)`,\n * where `fanIn` is the number of input units in the weight tensor.\n *\n * @doc {heading: 'Initializers', namespace: 'initializers'}\n */\nexport function leCunUniform(args) {\n    return new LeCunUniform(args);\n}\n/**\n * Initializer that generates a random orthogonal matrix.\n *\n * Reference:\n * [Saxe et al., http://arxiv.org/abs/1312.6120](http://arxiv.org/abs/1312.6120)\n *\n * @doc {heading: 'Initializers', namespace: 'initializers'}\n */\nexport function orthogonal(args) {\n    return new Orthogonal(args);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Exported functions.\n */\nimport { CallbackConstructorRegistry } from './base_callbacks';\nimport { Input, } from './engine/input_layer';\nimport { LayersModel } from './engine/training';\nimport { Sequential } from './models';\nexport { loadLayersModel } from './models';\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n// LayersModel and related factory methods.\n/**\n * A model is a data structure that consists of `Layers` and defines inputs\n * and outputs.\n *\n * The key difference between `tf.model` and `tf.sequential` is that\n * `tf.model` is more generic, supporting an arbitrary graph (without\n * cycles) of layers. `tf.sequential` is less generic and supports only a linear\n * stack of layers.\n *\n * When creating a `tf.LayersModel`, specify its input(s) and output(s). Layers\n * are used to wire input(s) to output(s).\n *\n * For example, the following code snippet defines a model consisting of\n * two `dense` layers, with 10 and 4 units, respectively.\n *\n * ```js\n * // Define input, which has a size of 5 (not including batch dimension).\n * const input = tf.input({shape: [5]});\n *\n * // First dense layer uses relu activation.\n * const denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\n * // Second dense layer uses softmax activation.\n * const denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});\n *\n * // Obtain the output symbolic tensor by applying the layers on the input.\n * const output = denseLayer2.apply(denseLayer1.apply(input));\n *\n * // Create the model based on the inputs.\n * const model = tf.model({inputs: input, outputs: output});\n *\n * // The model can be used for training, evaluation and prediction.\n * // For example, the following line runs prediction with the model on\n * // some fake data.\n * model.predict(tf.ones([2, 5])).print();\n * ```\n * See also:\n *   `tf.sequential`, `tf.loadLayersModel`.\n *\n * @doc {heading: 'Models', subheading: 'Creation'}\n */\nexport function model(args) {\n    return new LayersModel(args);\n}\n/**\n * Creates a `tf.Sequential` model.  A sequential model is any model where the\n * outputs of one layer are the inputs to the next layer, i.e. the model\n * topology is a simple 'stack' of layers, with no branching or skipping.\n *\n * This means that the first layer passed to a `tf.Sequential` model should have\n * a defined input shape. What that means is that it should have received an\n * `inputShape` or `batchInputShape` argument, or for some type of layers\n * (recurrent, Dense...) an `inputDim` argument.\n *\n * The key difference between `tf.model` and `tf.sequential` is that\n * `tf.sequential` is less generic, supporting only a linear stack of layers.\n * `tf.model` is more generic and supports an arbitrary graph (without\n * cycles) of layers.\n *\n * Examples:\n *\n * ```js\n * const model = tf.sequential();\n *\n * // First layer must have an input shape defined.\n * model.add(tf.layers.dense({units: 32, inputShape: [50]}));\n * // Afterwards, TF.js does automatic shape inference.\n * model.add(tf.layers.dense({units: 4}));\n *\n * // Inspect the inferred shape of the model's output, which equals\n * // `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\n * // 2nd is the output size of the model's last layer.\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * It is also possible to specify a batch size (with potentially undetermined\n * batch dimension, denoted by \"null\") for the first layer using the\n * `batchInputShape` key. The following example is equivalent to the above:\n *\n * ```js\n * const model = tf.sequential();\n *\n * // First layer must have a defined input shape\n * model.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\n * // Afterwards, TF.js does automatic shape inference.\n * model.add(tf.layers.dense({units: 4}));\n *\n * // Inspect the inferred shape of the model's output.\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * You can also use an `Array` of already-constructed `Layer`s to create\n * a `tf.Sequential` model:\n *\n * ```js\n * const model = tf.sequential({\n *   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\n *            tf.layers.dense({units: 4})]\n * });\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * @doc {heading: 'Models', subheading: 'Creation'}\n */\nexport function sequential(config) {\n    return new Sequential(config);\n}\n/**\n * Used to instantiate an input to a model as a `tf.SymbolicTensor`.\n *\n * Users should call the `input` factory function for\n * consistency with other generator functions.\n *\n * Example:\n *\n * ```js\n * // Defines a simple logistic regression model with 32 dimensional input\n * // and 3 dimensional output.\n * const x = tf.input({shape: [32]});\n * const y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);\n * const model = tf.model({inputs: x, outputs: y});\n * model.predict(tf.ones([2, 32])).print();\n * ```\n *\n * Note: `input` is only necessary when using `model`. When using\n * `sequential`, specify `inputShape` for the first layer or use `inputLayer`\n * as the first layer.\n *\n * @doc {heading: 'Models', subheading: 'Inputs'}\n */\nexport function input(config) {\n    return Input(config);\n}\nexport function registerCallbackConstructor(verbosityLevel, callbackConstructor) {\n    CallbackConstructorRegistry.registerCallbackConstructor(verbosityLevel, callbackConstructor);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { InputLayer } from './engine/input_layer';\nimport { Layer } from './engine/topology';\nimport { input } from './exports';\nimport { ELU, LeakyReLU, PReLU, ReLU, Softmax, ThresholdedReLU } from './layers/advanced_activations';\nimport { Conv1D, Conv2D, Conv2DTranspose, Conv3D, Cropping2D, SeparableConv2D, UpSampling2D, Conv3DTranspose } from './layers/convolutional';\nimport { DepthwiseConv2D } from './layers/convolutional_depthwise';\nimport { ConvLSTM2D, ConvLSTM2DCell } from './layers/convolutional_recurrent';\nimport { Activation, Dense, Dropout, Flatten, Masking, Permute, RepeatVector, Reshape, SpatialDropout1D } from './layers/core';\nimport { Embedding } from './layers/embeddings';\nimport { Add, Average, Concatenate, Dot, Maximum, Minimum, Multiply } from './layers/merge';\nimport { AlphaDropout, GaussianDropout, GaussianNoise } from './layers/noise';\nimport { BatchNormalization, LayerNormalization } from './layers/normalization';\nimport { ZeroPadding2D } from './layers/padding';\nimport { AveragePooling1D, AveragePooling2D, AveragePooling3D, GlobalAveragePooling1D, GlobalAveragePooling2D, GlobalMaxPooling1D, GlobalMaxPooling2D, MaxPooling1D, MaxPooling2D, MaxPooling3D } from './layers/pooling';\nimport { GRU, GRUCell, LSTM, LSTMCell, RNN, RNNCell, SimpleRNN, SimpleRNNCell, StackedRNNCells } from './layers/recurrent';\nimport { Bidirectional, TimeDistributed } from './layers/wrappers';\nimport { Rescaling } from './layers/preprocessing/image_preprocessing';\nimport { CenterCrop } from './layers/preprocessing/center_crop';\nimport { CategoryEncoding } from './layers/preprocessing/category_encoding';\nimport { Resizing } from './layers/preprocessing/image_resizing';\nimport { RandomWidth } from './layers/preprocessing/random_width';\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n// Input Layer.\n/**\n * An input layer is an entry point into a `tf.LayersModel`.\n *\n * `InputLayer` is generated automatically for `tf.Sequential` models by\n * specifying the `inputshape` or `batchInputShape` for the first layer.  It\n * should not be specified explicitly. However, it can be useful sometimes,\n * e.g., when constructing a sequential model from a subset of another\n * sequential model's layers. Like the code snippet below shows.\n *\n * ```js\n * // Define a model which simply adds two inputs.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));\n * model1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n * model1.summary();\n * model1.predict(tf.zeros([1, 4])).print();\n *\n * // Construct another model, reusing the second layer of `model1` while\n * // not using the first layer of `model1`. Note that you cannot add the second\n * // layer of `model` directly as the first layer of the new sequential model,\n * // because doing so will lead to an error related to the fact that the layer\n * // is not an input layer. Instead, you need to create an `inputLayer` and add\n * // it to the new sequential model before adding the reused layer.\n * const model2 = tf.sequential();\n * // Use an inputShape that matches the input shape of `model1`'s second\n * // layer.\n * model2.add(tf.layers.inputLayer({inputShape: [3]}));\n * model2.add(model1.layers[1]);\n * model2.summary();\n * model2.predict(tf.zeros([1, 3])).print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Inputs', namespace: 'layers'}\n */\nexport function inputLayer(args) {\n    return new InputLayer(args);\n}\n// Advanced Activation Layers.\n/**\n * Exponential Linear Unit (ELU).\n *\n * It follows:\n * `f(x) =  alpha * (exp(x) - 1.) for x < 0`,\n * `f(x) = x for x >= 0`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Fast and Accurate Deep Network Learning by Exponential Linear Units\n * (ELUs)](https://arxiv.org/abs/1511.07289v1)\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function elu(args) {\n    return new ELU(args);\n}\n/**\n * Rectified Linear Unit activation function.\n *\n * Input shape:\n *   Arbitrary. Use the config field `inputShape` (Array of integers, does\n *   not include the sample axis) when using this layer as the first layer\n *   in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function reLU(args) {\n    return new ReLU(args);\n}\n/**\n * Leaky version of a rectified linear unit.\n *\n * It allows a small gradient when the unit is not active:\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function leakyReLU(args) {\n    return new LeakyReLU(args);\n}\n/**\n * Parameterized version of a leaky rectified linear unit.\n *\n * It follows\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n * wherein `alpha` is a trainable weight.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function prelu(args) {\n    return new PReLU(args);\n}\n/**\n * Softmax activation layer.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function softmax(args) {\n    return new Softmax(args);\n}\n/**\n * Thresholded Rectified Linear Unit.\n *\n * It follows:\n * `f(x) = x for x > theta`,\n * `f(x) = 0 otherwise`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting\n * Features](http://arxiv.org/abs/1402.3337)\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function thresholdedReLU(args) {\n    return new ThresholdedReLU(args);\n}\n// Convolutional Layers.\n/**\n * 1D convolution layer (e.g., temporal convolution).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input over a single spatial (or temporal) dimension\n * to produce a tensor of outputs.\n *\n * If `use_bias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model, provide an\n * `inputShape` argument `Array` or `null`.\n *\n * For example, `inputShape` would be:\n * - `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors\n * - `[null, 128]` for variable-length sequences of 128-dimensional vectors.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional',  namespace: 'layers'}\n */\nexport function conv1d(args) {\n    return new Conv1D(args);\n}\n/**\n * 2D convolution layer (e.g. spatial convolution over images).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures\n * in `dataFormat='channelsLast'`.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv2d(args) {\n    return new Conv2D(args);\n}\n/**\n * Transposed convolutional layer (sometimes called Deconvolution).\n *\n * The need for transposed convolutions generally arises\n * from the desire to use a transformation going in the opposite direction of\n * a normal convolution, i.e., from something that has the shape of the output\n * of some convolution to something that has the shape of its input while\n * maintaining a connectivity pattern that is compatible with said\n * convolution.\n *\n * When using this layer as the first layer in a model, provide the\n * configuration `inputShape` (`Array` of integers, does not include the\n * sample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in\n * `dataFormat: 'channelsLast'`.\n *\n * Input shape:\n *   4D tensor with shape:\n *   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.\n *   or 4D tensor with shape\n *   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast'`.\n *\n * Output shape:\n *   4D tensor with shape:\n *   `[batch, filters, newRows, newCols]` if `dataFormat` is\n * `'channelsFirst'`. or 4D tensor with shape:\n *   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.\n *\n * References:\n *   - [A guide to convolution arithmetic for deep\n * learning](https://arxiv.org/abs/1603.07285v1)\n *   - [Deconvolutional\n * Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv2dTranspose(args) {\n    return new Conv2DTranspose(args);\n}\n/**\n * 3D convolution layer (e.g. spatial convolution over volumes).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 128, 1]` for 128x128x128 grayscale volumes\n * in `dataFormat='channelsLast'`.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv3d(args) {\n    return new Conv3D(args);\n}\nexport function conv3dTranspose(args) {\n    return new Conv3DTranspose(args);\n}\n/**\n * Depthwise separable 2D convolution.\n *\n * Separable convolution consists of first performing\n * a depthwise spatial convolution\n * (which acts on each input channel separately)\n * followed by a pointwise convolution which mixes together the resulting\n * output channels. The `depthMultiplier` argument controls how many\n * output channels are generated per input channel in the depthwise step.\n *\n * Intuitively, separable convolutions can be understood as\n * a way to factorize a convolution kernel into two smaller kernels,\n * or as an extreme version of an Inception block.\n *\n * Input shape:\n *   4D tensor with shape:\n *     `[batch, channels, rows, cols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, rows, cols, channels]` if data_format='channelsLast'.\n *\n * Output shape:\n *   4D tensor with shape:\n *     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.\n *     `rows` and `cols` values might have changed due to padding.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function separableConv2d(args) {\n    return new SeparableConv2D(args);\n}\n/**\n * Cropping layer for 2D input (e.g., image).\n *\n * This layer can crop an input\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, croppedRows, croppedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, croppedRows, croppedCols]`.\n *\n * Examples\n * ```js\n *\n * const model = tf.sequential();\n * model.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],\n *                                inputShape: [128, 128, 3]}));\n * //now output shape is [batch, 124, 124, 3]\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function cropping2D(args) {\n    return new Cropping2D(args);\n}\n/**\n * Upsampling layer for 2D inputs.\n *\n * Repeats the rows and columns of the data\n * by size[0] and size[1] respectively.\n *\n *\n * Input shape:\n *    4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *         `[batch, rows, cols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *        `[batch, channels, rows, cols]`\n *\n * Output shape:\n *     4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *        `[batch, upsampledRows, upsampledCols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *         `[batch, channels, upsampledRows, upsampledCols]`\n *\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function upSampling2d(args) {\n    return new UpSampling2D(args);\n}\n// Convolutional(depthwise) Layers.\n/**\n * Depthwise separable 2D convolution.\n *\n * Depthwise Separable convolutions consists in performing just the first step\n * in a depthwise spatial convolution (which acts on each input channel\n * separately). The `depthMultiplier` argument controls how many output channels\n * are generated per input channel in the depthwise step.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function depthwiseConv2d(args) {\n    return new DepthwiseConv2D(args);\n}\n// Basic Layers.\n/**\n * Applies an activation function to an output.\n *\n * This layer applies element-wise activation function.  Other layers, notably\n * `dense` can also apply activation functions.  Use this isolated activation\n * function to extract the values before and after the\n * activation. For instance:\n *\n * ```js\n * const input = tf.input({shape: [5]});\n * const denseLayer = tf.layers.dense({units: 1});\n * const activationLayer = tf.layers.activation({activation: 'relu6'});\n *\n * // Obtain the output symbolic tensors by applying the layers in order.\n * const denseOutput = denseLayer.apply(input);\n * const activationOutput = activationLayer.apply(denseOutput);\n *\n * // Create the model based on the inputs.\n * const model = tf.model({\n *     inputs: input,\n *     outputs: [denseOutput, activationOutput]\n * });\n *\n * // Collect both outputs and print separately.\n * const [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));\n * denseOut.print();\n * activationOut.print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function activation(args) {\n    return new Activation(args);\n}\n/**\n * Creates a dense (fully connected) layer.\n *\n * This layer implements the operation:\n *   `output = activation(dot(input, kernel) + bias)`\n *\n * `activation` is the element-wise activation function\n *   passed as the `activation` argument.\n *\n * `kernel` is a weights matrix created by the layer.\n *\n * `bias` is a bias vector created by the layer (only applicable if `useBias`\n * is `true`).\n *\n * **Input shape:**\n *\n *   nD `tf.Tensor` with shape: `(batchSize, ..., inputDim)`.\n *\n *   The most common situation would be\n *   a 2D input with shape `(batchSize, inputDim)`.\n *\n * **Output shape:**\n *\n *   nD tensor with shape: `(batchSize, ..., units)`.\n *\n *   For instance, for a 2D input with shape `(batchSize, inputDim)`,\n *   the output would have shape `(batchSize, units)`.\n *\n * Note: if the input to the layer has a rank greater than 2, then it is\n * flattened prior to the initial dot product with the kernel.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function dense(args) {\n    return new Dense(args);\n}\n/**\n * Applies\n * [dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to\n * the input.\n *\n * Dropout consists in randomly setting a fraction `rate` of input units to 0 at\n * each update during training time, which helps prevent overfitting.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function dropout(args) {\n    return new Dropout(args);\n}\n/**\n * Spatial 1D version of Dropout.\n *\n * This Layer type performs the same function as the Dropout layer, but it drops\n * entire 1D feature maps instead of individual elements. For example, if an\n * input example consists of 3 timesteps and the feature map for each timestep\n * has a size of 4, a `spatialDropout1d` layer may zero out the feature maps\n * of the 1st timesteps and 2nd timesteps completely while sparing all feature\n * elements of the 3rd timestep.\n *\n * If adjacent frames (timesteps) are strongly correlated (as is normally the\n * case in early convolution layers), regular dropout will not regularize the\n * activation and will otherwise just result in merely an effective learning\n * rate decrease. In this case, `spatialDropout1d` will help promote\n * independence among feature maps and should be used instead.\n *\n * **Arguments:**\n *   rate: A floating-point number >=0 and <=1. Fraction of the input elements\n *     to drop.\n *\n * **Input shape:**\n *   3D tensor with shape `(samples, timesteps, channels)`.\n *\n * **Output shape:**\n *   Same as the input shape.\n *\n * References:\n *   - [Efficient Object Localization Using Convolutional\n *      Networks](https://arxiv.org/abs/1411.4280)\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function spatialDropout1d(args) {\n    return new SpatialDropout1D(args);\n}\n/**\n * Flattens the input. Does not affect the batch size.\n *\n * A `Flatten` layer flattens each batch in its inputs to 1D (making the output\n * 2D).\n *\n * For example:\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const flattenLayer = tf.layers.flatten();\n * // Inspect the inferred output shape of the flatten layer, which\n * // equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\n * // flattening. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(flattenLayer.apply(input).shape));\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function flatten(args) {\n    return new Flatten(args);\n}\n/**\n * Repeats the input n times in a new dimension.\n *\n * ```js\n *  const model = tf.sequential();\n *  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));\n *  const x = tf.tensor2d([[10, 20]]);\n *  // Use the model to do inference on a data point the model hasn't seen\n *  model.predict(x).print();\n *  // output shape is now [batch, 2, 4]\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function repeatVector(args) {\n    return new RepeatVector(args);\n}\n/**\n * Reshapes an input to a certain shape.\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});\n * // Inspect the inferred output shape of the Reshape layer, which\n * // equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(reshapeLayer.apply(input).shape));\n * ```\n *\n * Input shape:\n *   Arbitrary, although all dimensions in the input shape must be fixed.\n *   Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n *\n * Output shape:\n *   [batchSize, targetShape[0], targetShape[1], ...,\n *    targetShape[targetShape.length - 1]].\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function reshape(args) {\n    return new Reshape(args);\n}\n/**\n * Permutes the dimensions of the input according to a given pattern.\n *\n * Useful for, e.g., connecting RNNs and convnets together.\n *\n * Example:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.permute({\n *   dims: [2, 1],\n *   inputShape: [10, 64]\n * }));\n * console.log(model.outputShape);\n * // Now model's output shape is [null, 64, 10], where null is the\n * // unpermuted sample (batch) dimension.\n * ```\n *\n * Input shape:\n *   Arbitrary. Use the configuration field `inputShape` when using this\n *   layer as the first layer in a model.\n *\n * Output shape:\n *   Same rank as the input shape, but with the dimensions re-ordered (i.e.,\n *   permuted) according to the `dims` configuration of this layer.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function permute(args) {\n    return new Permute(args);\n}\n/**\n * Maps positive integers (indices) into dense vectors of fixed size.\n * E.g. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\n *\n * **Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.\n *\n * **Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,\n * outputDim]`.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function embedding(args) {\n    return new Embedding(args);\n}\n// Merge Layers.\n/**\n * Layer that performs element-wise addition on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). The inputs are specified as an\n * `Array` when the `apply` method of the `Add` layer instance is called. For\n * example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const addLayer = tf.layers.add();\n * const sum = addLayer.apply([input1, input2]);\n * console.log(JSON.stringify(sum.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function add(args) {\n    return new Add(args);\n}\n/**\n * Layer that performs element-wise averaging on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const averageLayer = tf.layers.average();\n * const average = averageLayer.apply([input1, input2]);\n * console.log(JSON.stringify(average.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function average(args) {\n    return new Average(args);\n}\n/**\n * Layer that concatenates an `Array` of inputs.\n *\n * It takes a list of tensors, all of the same shape except for the\n * concatenation axis, and returns a single tensor, the concatenation\n * of all inputs. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 3]});\n * const concatLayer = tf.layers.concatenate();\n * const output = concatLayer.apply([input1, input2]);\n * console.log(JSON.stringify(output.shape));\n * // You get [null, 2, 5], with the first dimension as the undetermined batch\n * // dimension. The last dimension (5) is the result of concatenating the\n * // last dimensions of the inputs (2 and 3).\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function concatenate(args) {\n    return new Concatenate(args);\n}\n/**\n * Layer that computes the element-wise maximum of an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const maxLayer = tf.layers.maximum();\n * const max = maxLayer.apply([input1, input2]);\n * console.log(JSON.stringify(max.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function maximum(args) {\n    return new Maximum(args);\n}\n/**\n * Layer that computes the element-wise minimum of an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const minLayer = tf.layers.minimum();\n * const min = minLayer.apply([input1, input2]);\n * console.log(JSON.stringify(min.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function minimum(args) {\n    return new Minimum(args);\n}\n/**\n * Layer that multiplies (element-wise) an `Array` of inputs.\n *\n * It takes as input an Array of tensors, all of the same\n * shape, and returns a single tensor (also of the same shape).\n * For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const input3 = tf.input({shape: [2, 2]});\n * const multiplyLayer = tf.layers.multiply();\n * const product = multiplyLayer.apply([input1, input2, input3]);\n * console.log(product.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function multiply(args) {\n    return new Multiply(args);\n}\n/**\n * Layer that computes a dot product between samples in two tensors.\n *\n * E.g., if applied to a list of two tensors `a` and `b` both of shape\n * `[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,\n * where each entry at index `[i, 0]` will be the dot product between\n * `a[i, :]` and `b[i, :]`.\n *\n * Example:\n *\n * ```js\n * const dotLayer = tf.layers.dot({axes: -1});\n * const x1 = tf.tensor2d([[10, 20], [30, 40]]);\n * const x2 = tf.tensor2d([[-1, -2], [-3, -4]]);\n *\n * // Invoke the layer's apply() method in eager (imperative) mode.\n * const y = dotLayer.apply([x1, x2]);\n * y.print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function dot(args) {\n    return new Dot(args);\n}\n// Normalization Layers.\n/**\n * Batch normalization layer (Ioffe and Szegedy, 2014).\n *\n * Normalize the activations of the previous layer at each batch,\n * i.e. applies a transformation that maintains the mean activation\n * close to 0 and the activation standard deviation close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\n *   not include the sample axis) when calling the constructor of this class,\n *   if this layer is used as a first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Batch Normalization: Accelerating Deep Network Training by Reducing\n * Internal Covariate Shift](https://arxiv.org/abs/1502.03167)\n *\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nexport function batchNormalization(args) {\n    return new BatchNormalization(args);\n}\n/**\n * Layer-normalization layer (Ba et al., 2016).\n *\n * Normalizes the activations of the previous layer for each given example in a\n * batch independently, instead of across a batch like in `batchNormalization`.\n * In other words, this layer applies a transformation that maintains the mean\n * activation within each example close to 0 and activation variance close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the argument `inputShape` when using this layer as the first\n *   layer in a model.\n *\n * Output shape:\n *   Same as input.\n *\n * References:\n *   - [Layer Normalization](https://arxiv.org/abs/1607.06450)\n *\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nexport function layerNormalization(args) {\n    return new LayerNormalization(args);\n}\n// Padding Layers.\n/**\n * Zero-padding layer for 2D input (e.g., image).\n *\n * This layer can add rows and columns of zeros\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, paddedRows, paddedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, paddedRows, paddedCols]`.\n *\n * @doc {heading: 'Layers', subheading: 'Padding', namespace: 'layers'}\n */\nexport function zeroPadding2d(args) {\n    return new ZeroPadding2D(args);\n}\n// Pooling Layers.\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape: `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * `tf.avgPool1d` is an alias.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function averagePooling1d(args) {\n    return new AveragePooling1D(args);\n}\nexport function avgPool1d(args) {\n    return averagePooling1d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling1d(args) {\n    return averagePooling1d(args);\n}\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape:\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, rows, cols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, pooledRows, pooledCols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, pooledRows, pooledCols]`\n *\n * `tf.avgPool2d` is an alias.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function averagePooling2d(args) {\n    return new AveragePooling2D(args);\n}\nexport function avgPool2d(args) {\n    return averagePooling2d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling2d(args) {\n    return averagePooling2d(args);\n}\n/**\n * Average pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      4D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function averagePooling3d(args) {\n    return new AveragePooling3D(args);\n}\nexport function avgPool3d(args) {\n    return averagePooling3d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling3d(args) {\n    return averagePooling3d(args);\n}\n/**\n * Global average pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape: 2D tensor with shape: `[batchSize, features]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalAveragePooling1d(args) {\n    return new GlobalAveragePooling1D(args);\n}\n/**\n * Global average pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalAveragePooling2d(args) {\n    return new GlobalAveragePooling2D(args);\n}\n/**\n * Global max pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape: 2D tensor with shape: `[batchSize, features]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalMaxPooling1d(args) {\n    return new GlobalMaxPooling1D(args);\n}\n/**\n * Global max pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalMaxPooling2d(args) {\n    return new GlobalMaxPooling2D(args);\n}\n/**\n * Max pooling operation for temporal data.\n *\n * Input shape:  `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function maxPooling1d(args) {\n    return new MaxPooling1D(args);\n}\n/**\n * Max pooling operation for spatial data.\n *\n * Input shape\n *   - If `dataFormat === CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, rows, cols, channels]`\n *   - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *       `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=CHANNEL_FIRST`:\n *       4D tensor with shape:\n *       `[batchSize, channels, pooledRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function maxPooling2d(args) {\n    return new MaxPooling2D(args);\n}\n/**\n * Max pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      5D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function maxPooling3d(args) {\n    return new MaxPooling3D(args);\n}\n// Recurrent Layers.\n/**\n * Gated Recurrent Unit - Cho et al. 2014.\n *\n * This is an `RNN` layer consisting of one `GRUCell`. However, unlike\n * the underlying `GRUCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.gru({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `GRUCell`'s number of units.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function gru(args) {\n    return new GRU(args);\n}\n/**\n * Cell class for `GRU`.\n *\n * `GRUCell` is distinct from the `RNN` subclass `GRU` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `GRU` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.gruCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `GRUCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.gruCell({units: 4}),\n *   tf.layers.gruCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `gruCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `GRUCell`, use the\n * `tf.layers.gru`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function gruCell(args) {\n    return new GRUCell(args);\n}\n/**\n * Long-Short Term Memory layer - Hochreiter 1997.\n *\n * This is an `RNN` layer consisting of one `LSTMCell`. However, unlike\n * the underlying `LSTMCell`, the `apply` method of `LSTM` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const lstm = tf.layers.lstm({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = lstm.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `LSTMCell`'s number of units.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function lstm(args) {\n    return new LSTM(args);\n}\n/**\n * Cell class for `LSTM`.\n *\n * `LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `LSTM` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.lstmCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `LSTMCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.lstmCell({units: 4}),\n *   tf.layers.lstmCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `lstmCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `LSTMCell`, use the\n * `tf.layers.lstm`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function lstmCell(args) {\n    return new LSTMCell(args);\n}\n/**\n * Fully-connected RNN where the output is to be fed back to input.\n *\n * This is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike\n * the underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `SimpleRNNCell`'s number of units.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function simpleRNN(args) {\n    return new SimpleRNN(args);\n}\n/**\n * Cell class for `SimpleRNN`.\n *\n * `SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `SimpleRNN` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.simpleRNNCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.simpleRNNCell({units: 4}),\n *   tf.layers.simpleRNNCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `SimpleRNNCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `SimpleRNNCell`, use the\n * `tf.layers.simpleRNN`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function simpleRNNCell(args) {\n    return new SimpleRNNCell(args);\n}\n/**\n * Convolutional LSTM layer - Xingjian Shi 2015.\n *\n * This is a `ConvRNN2D` layer consisting of one `ConvLSTM2DCell`. However,\n * unlike the underlying `ConvLSTM2DCell`, the `apply` method of `ConvLSTM2D`\n * operates on a sequence of inputs. The shape of the input (not including the\n * first, batch dimension) needs to be 4-D, with the first dimension being time\n * steps. For example:\n *\n * ```js\n * const filters = 3;\n * const kernelSize = 3;\n *\n * const batchSize = 4;\n * const sequenceLength = 2;\n * const size = 5;\n * const channels = 3;\n *\n * const inputShape = [batchSize, sequenceLength, size, size, channels];\n * const input = tf.ones(inputShape);\n *\n * const layer = tf.layers.convLstm2d({filters, kernelSize});\n *\n * const output = layer.apply(input);\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function convLstm2d(args) {\n    return new ConvLSTM2D(args);\n}\n/**\n * Cell class for `ConvLSTM2D`.\n *\n * `ConvLSTM2DCell` is distinct from the `ConvRNN2D` subclass `ConvLSTM2D` in\n * that its `call` method takes the input data of only a single time step and\n * returns the cell's output at the time step, while `ConvLSTM2D` takes the\n * input data over a number of time steps. For example:\n *\n * ```js\n * const filters = 3;\n * const kernelSize = 3;\n *\n * const sequenceLength = 1;\n * const size = 5;\n * const channels = 3;\n *\n * const inputShape = [sequenceLength, size, size, channels];\n * const input = tf.ones(inputShape);\n *\n * const cell = tf.layers.convLstm2dCell({filters, kernelSize});\n *\n * cell.build(input.shape);\n *\n * const outputSize = size - kernelSize + 1;\n * const outShape = [sequenceLength, outputSize, outputSize, filters];\n *\n * const initialH = tf.zeros(outShape);\n * const initialC = tf.zeros(outShape);\n *\n * const [o, h, c] = cell.call([input, initialH, initialC], {});\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function convLstm2dCell(args) {\n    return new ConvLSTM2DCell(args);\n}\n/**\n * Base class for recurrent layers.\n *\n * Input shape:\n *   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n *\n * Output shape:\n *   - if `returnState`, an Array of tensors (i.e., `tf.Tensor`s). The first\n *     tensor is the output. The remaining tensors are the states at the\n *     last time step, each with shape `[batchSize, units]`.\n *   - if `returnSequences`, the output will have shape\n *     `[batchSize, timeSteps, units]`.\n *   - else, the output will have shape `[batchSize, units]`.\n *\n * Masking:\n *   This layer supports masking for input data with a variable number\n *   of timesteps. To introduce masks to your data,\n *   use an embedding layer with the `mask_zero` parameter\n *   set to `True`.\n *\n * Notes on using statefulness in RNNs:\n *   You can set RNN layers to be 'stateful', which means that the states\n *   computed for the samples in one batch will be reused as initial states\n *   for the samples in the next batch. This assumes a one-to-one mapping\n *   between samples in different successive batches.\n *\n *   To enable statefulness:\n *     - specify `stateful: true` in the layer constructor.\n *     - specify a fixed batch size for your model, by passing\n *       if sequential model:\n *         `batchInputShape=[...]` to the first layer in your model.\n *       else for functional model with 1 or more Input layers:\n *         `batchShape=[...]` to all the first layers in your model.\n *       This is the expected shape of your inputs *including the batch size*.\n *       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n *     - specify `shuffle=False` when calling fit().\n *\n *   To reset the states of your model, call `.resetStates()` on either\n *   a specific layer, or on your entire model.\n *\n * Note on specifying the initial state of RNNs\n *   You can specify the initial state of RNN layers symbolically by\n *   calling them with the option `initialState`. The value of\n *   `initialState` should be a tensor or list of tensors representing\n *   the initial state of the RNN layer.\n *\n *   You can specify the initial state of RNN layers numerically by\n *   calling `resetStates` with the keyword argument `states`. The value of\n *   `states` should be a numpy array or list of numpy arrays representing\n *   the initial state of the RNN layer.\n *\n * Note on passing external constants to RNNs\n *   You can pass \"external\" constants to the cell using the `constants`\n *   keyword argument of `RNN.call` method. This requires that the `cell.call`\n *   method accepts the same keyword argument `constants`. Such constants\n *   can be used to condition the cell transformation on additional static\n *   inputs (not changing over time), a.k.a. an attention mechanism.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function rnn(args) {\n    return new RNN(args);\n}\n/**\n * Wrapper allowing a stack of RNN cells to behave as a single cell.\n *\n * Used to implement efficient stacked RNNs.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function stackedRNNCells(args) {\n    return new StackedRNNCells(args);\n}\n// Wrapper Layers.\n/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */\nexport function bidirectional(args) {\n    return new Bidirectional(args);\n}\n/**\n * This wrapper applies a layer to every temporal slice of an input.\n *\n * The input should be at least 3D,  and the dimension of the index `1` will be\n * considered to be the temporal dimension.\n *\n * Consider a batch of 32 samples, where each sample is a sequence of 10 vectors\n * of 16 dimensions. The batch input shape of the layer is then `[32,  10,\n * 16]`, and the `inputShape`, not including the sample dimension, is\n * `[10, 16]`.\n *\n * You can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\n * timesteps, independently:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.dense({units: 8}),\n *   inputShape: [10, 16],\n * }));\n *\n * // Now model.outputShape = [null, 10, 8].\n * // The output will then have shape `[32, 10, 8]`.\n *\n * // In subsequent layers, there is no need for `inputShape`:\n * model.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * // Now model.outputShape = [null, 10, 32].\n * ```\n *\n * The output will then have shape `[32, 10, 32]`.\n *\n * `TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\n * instance a `Conv2D` layer.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),\n *   inputShape: [10, 299, 299, 3],\n * }));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'}\n */\nexport function timeDistributed(args) {\n    return new TimeDistributed(args);\n}\n// Aliases for pooling.\nexport const globalMaxPool1d = globalMaxPooling1d;\nexport const globalMaxPool2d = globalMaxPooling2d;\nexport const maxPool1d = maxPooling1d;\nexport const maxPool2d = maxPooling2d;\nexport { Layer, RNN, RNNCell, input /* alias for tf.input */ };\n/**\n * Apply additive zero-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * This is useful to mitigate overfitting\n * (you could see it as a form of random data augmentation).\n * Gaussian Noise (GS) is a natural choice as corruption process\n * for real valued inputs.\n *\n * # Arguments\n * stddev: float, standard deviation of the noise distribution.\n *\n * # Input shape\n * Arbitrary. Use the keyword argument `input_shape`\n * (tuple of integers, does not include the samples axis)\n * when using this layer as the first layer in a model.\n *\n * # Output shape\n * Same shape as input.\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nexport function gaussianNoise(args) {\n    return new GaussianNoise(args);\n}\n/**\n * Apply multiplicative 1-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](\n *      http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nexport function gaussianDropout(args) {\n    return new GaussianDropout(args);\n}\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nexport function alphaDropout(args) {\n    return new AlphaDropout(args);\n}\n/**\n * Masks a sequence by using a mask value to skip timesteps.\n *\n * If all features for a given sample timestep are equal to `mask_value`,\n * then the sample timestep will be masked (skipped) in all downstream layers\n * (as long as they support masking).\n *\n * If any downstream layer does not support masking yet receives such\n * an input mask, an exception will be raised.\n *\n * Arguments:\n *   - `maskValue`: Either None or mask value to skip.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * @doc {heading: 'Layers', subheading: 'Mask', namespace: 'layers'}\n */\nexport function masking(args) {\n    return new Masking(args);\n}\n/**\n * A preprocessing layer which rescales input values to a new range.\n *\n * This layer rescales every value of an input (often an image) by multiplying\n * by `scale` and adding `offset`.\n *\n * For instance:\n * 1. To rescale an input in the ``[0, 255]`` range\n * to be in the `[0, 1]` range, you would pass `scale=1/255`.\n * 2. To rescale an input in the ``[0, 255]`` range to be in the `[-1, 1]`\n * range, you would pass `scale=1./127.5, offset=-1`.\n * The rescaling is applied both during training and inference. Inputs can be\n * of integer or floating point dtype, and by default the layer will output\n * floats.\n *\n * Arguments:\n *   - `scale`: Float, the scale to apply to the inputs.\n *   - `offset`: Float, the offset to apply to the inputs.\n *\n * Input shape:\n *   Arbitrary.\n *\n * Output shape:\n *   Same as input.\n *\n * @doc {heading: 'Layers', subheading: 'Rescaling', namespace: 'layers'}\n */\nexport function rescaling(args) {\n    return new Rescaling(args);\n}\n/**\n *  A preprocessing layer which center crops images.\n *\n *   This layers crops the central portion of the images to a target size. If an\n *   image is smaller than the target size, it will be resized and cropped so as\n *   to return the largest possible window in the image that matches the target\n *   aspect ratio.\n *\n *   Input pixel values can be of any range (e.g. `[0., 1.)` or `[0, 255]`) and\n *   of integer or floating point dtype.\n *\n *   If the input height/width is even and the target height/width is odd (or\n *   inversely), the input image is left-padded by 1 pixel.\n *\n *   Arguments:\n *     `height`: Integer, the height of the output shape.\n *     `width`: Integer, the width of the output shape.\n *\n *   Input shape:\n *     3D (unbatched) or 4D (batched) tensor with shape:\n *     `(..., height, width, channels)`, in `channelsLast` format.\n *\n *   Output shape:\n *     3D (unbatched) or 4D (batched) tensor with shape:\n *     `(..., targetHeight, targetWidth, channels)`.\n *\n *\n *  @doc {heading: 'Layers', subheading: 'CenterCrop', namespace: 'layers'}\n */\nexport function centerCrop(args) {\n    return new CenterCrop(args);\n}\n/**\n * A preprocessing layer which resizes images.\n * This layer resizes an image input to a target height and width. The input\n * should be a 4D (batched) or 3D (unbatched) tensor in `\"channels_last\"`\n * format.  Input pixel values can be of any range (e.g. `[0., 1.)` or `[0,\n * 255]`) and of interger or floating point dtype. By default, the layer will\n * output floats.\n *\n * Arguments:\n *   - `height`: number, the height for the output tensor.\n *   - `width`: number, the width for the output tensor.\n *   - `interpolation`: string, the method for image resizing interpolation.\n *   - `cropToAspectRatio`: boolean, whether to keep image aspect ratio.\n *\n * Input shape:\n *   Arbitrary.\n *\n * Output shape:\n *   height, width, num channels.\n *\n * @doc {heading: 'Layers', subheading: 'Resizing', namespace: 'layers'}\n */\nexport function resizing(args) {\n    return new Resizing(args);\n}\n/**\n * A preprocessing layer which encodes integer features.\n *\n * This layer provides options for condensing data into a categorical encoding\n * when the total number of tokens are known in advance. It accepts integer\n * values as inputs, and it outputs a dense representation of those\n * inputs.\n *\n * Arguments:\n *\n * numTokens: The total number of tokens the layer should support. All\n *  inputs to the layer must integers in the range `0 <= value <\n *  numTokens`, or an error will be thrown.\n *\n * outputMode: Specification for the output of the layer.\n *  Defaults to `multiHot`. Values can be `oneHot`, `multiHot` or\n *  `count`, configuring the layer as follows:\n *\n *    oneHot: Encodes each individual element in the input into an\n *      array of `numTokens` size, containing a 1 at the element index. If\n *      the last dimension is size 1, will encode on that dimension. If the\n *      last dimension is not size 1, will append a new dimension for the\n *      encoded output.\n *\n *    multiHot: Encodes each sample in the input into a single array\n *     of `numTokens` size, containing a 1 for each vocabulary term\n *     present in the sample. Treats the last dimension as the sample\n *     dimension, if input shape is `(..., sampleLength)`, output shape\n *     will be `(..., numTokens)`.\n *\n *    count: Like `multiHot`, but the int array contains a count of\n *     the number of times the token at that index appeared in the sample.\n *\n *  For all output modes, currently only output up to rank 2 is supported.\n *   Call arguments:\n *    inputs: A 1D or 2D tensor of integer inputs.\n *    countWeights: A tensor in the same shape as `inputs` indicating the\n *    weight for each sample value when summing up in `count` mode. Not used\n *    in `multiHot` or `oneHot` modes.\n *\n *\n * @doc {heading: 'Layers', subheading: 'CategoryEncoding', namespace: 'layers'}\n */\nexport function categoryEncoding(args) {\n    return new CategoryEncoding(args);\n}\n/**\n * A preprocessing layer which randomly varies image width during training.\n *\n * This layer will randomly adjusts the width of a batch of images of a batch\n * of images by a random factor.\n *\n * The input should be a 3D (unbatched) or 4D (batched) tensor in\n * the `\"channels_last\"` image data format. Input pixel values can be of any\n * range (e.g. `[0., 1.)` or `[0, 255]`) and of integer or floating point\n * dtype. By default, the layer will output floats. By default, this layer is\n * inactive during inference. For an overview and full list of preprocessing\n * layers, see the preprocessing [guide]\n * (https://www.tensorflow.org/guide/keras/preprocessing_layers).\n *\n * Arguments:\n *\n * factor:\n *   A positive float (fraction of original width), or a tuple of size 2\n *   representing lower and upper bound for resizing vertically.\n *   When represented as a single float, this value is used for both the upper\n *   and lower bound. For instance, `factor=(0.2, 0.3)` results in an output\n *   with width changed by a random amount in the range `[20%, 30%]`.\n *   `factor=(-0.2, 0.3)` results in an output with width changed by a random\n *   amount in the range `[-20%, +30%]`. `factor=0.2` results in an output\n *   with width changed by a random amount in the range `[-20%, +20%]`.\n * interpolation:\n *   String, the interpolation method.\n *   Defaults to `bilinear`.\n *   Supports `\"bilinear\"`, `\"nearest\"`.\n *   The tf methods `\"bicubic\"`, `\"area\"`, `\"lanczos3\"`, `\"lanczos5\"`,\n *   `\"gaussian\"`, `\"mitchellcubic\"` are unimplemented in tfjs.\n * seed:\n *   Integer. Used to create a random seed.\n *\n * Input shape:\n *     3D (unbatched) or 4D (batched) tensor with shape:\n *     `(..., height, width, channels)`, in `\"channels_last\"` format.\n * Output shape:\n *     3D (unbatched) or 4D (batched) tensor with shape:\n *     `(..., height, random_width, channels)`.\n *\n *\n * @doc {heading: 'Layers', subheading: 'RandomWidth', namespace: 'layers'}\n */\nexport function randomWidth(args) {\n    return new RandomWidth(args);\n}\n//# sourceMappingURL=data:application/json;base64,","import * as losses from './losses';\nimport * as metrics from './metrics';\n/**\n * Binary accuracy metric function.\n *\n * `yTrue` and `yPred` can have 0-1 values. Example:\n * ```js\n * const x = tf.tensor2d([[1, 1, 1, 1], [0, 0, 0, 0]], [2, 4]);\n * const y = tf.tensor2d([[1, 0, 1, 0], [0, 0, 0, 1]], [2, 4]);\n * const accuracy = tf.metrics.binaryAccuracy(x, y);\n * accuracy.print();\n * ```\n *\n * `yTrue` and `yPred` can also have floating-number values between 0 and 1, in\n * which case the values will be thresholded at 0.5 to yield 0-1 values (i.e.,\n * a value >= 0.5 and <= 1.0 is interpreted as 1).\n *\n * Example:\n * ```js\n * const x = tf.tensor1d([1, 1, 1, 1, 0, 0, 0, 0]);\n * const y = tf.tensor1d([0.2, 0.4, 0.6, 0.8, 0.2, 0.3, 0.4, 0.7]);\n * const accuracy = tf.metrics.binaryAccuracy(x, y);\n * accuracy.print();\n * ```\n *\n * @param yTrue Binary Tensor of truth.\n * @param yPred Binary Tensor of prediction.\n * @return Accuracy Tensor.\n *\n * @doc {heading: 'Metrics', namespace: 'metrics'}\n */\nexport function binaryAccuracy(yTrue, yPred) {\n    return metrics.binaryAccuracy(yTrue, yPred);\n}\n/**\n * Binary crossentropy metric function.\n *\n * Example:\n * ```js\n * const x = tf.tensor2d([[0], [1], [1], [1]]);\n * const y = tf.tensor2d([[0], [0], [0.5], [1]]);\n * const crossentropy = tf.metrics.binaryCrossentropy(x, y);\n * crossentropy.print();\n * ```\n *\n * @param yTrue Binary Tensor of truth.\n * @param yPred Binary Tensor of prediction, probabilities for the `1` case.\n * @return Accuracy Tensor.\n *\n * @doc {heading: 'Metrics', namespace: 'metrics'}\n */\nexport function binaryCrossentropy(yTrue, yPred) {\n    return metrics.binaryCrossentropy(yTrue, yPred);\n}\n/**\n * Sparse categorical accuracy metric function.\n *\n * Example:\n * ```js\n *\n * const yTrue = tf.tensor1d([1, 1, 2, 2, 0]);\n * const yPred = tf.tensor2d(\n *      [[0, 1, 0], [1, 0, 0], [0, 0.4, 0.6], [0, 0.6, 0.4], [0.7, 0.3, 0]]);\n * const crossentropy = tf.metrics.sparseCategoricalAccuracy(yTrue, yPred);\n * crossentropy.print();\n * ```\n *\n * @param yTrue True labels: indices.\n * @param yPred Predicted probabilities or logits.\n * @returns Accuracy tensor.\n *\n * @doc {heading: 'Metrics', namespace: 'metrics'}\n */\nexport function sparseCategoricalAccuracy(yTrue, yPred) {\n    return metrics.sparseCategoricalAccuracy(yTrue, yPred);\n}\n/**\n * Categorical accuracy metric function.\n *\n * Example:\n * ```js\n * const x = tf.tensor2d([[0, 0, 0, 1], [0, 0, 0, 1]]);\n * const y = tf.tensor2d([[0.1, 0.8, 0.05, 0.05], [0.1, 0.05, 0.05, 0.8]]);\n * const accuracy = tf.metrics.categoricalAccuracy(x, y);\n * accuracy.print();\n * ```\n *\n * @param yTrue Binary Tensor of truth: one-hot encoding of categories.\n * @param yPred Binary Tensor of prediction: probabilities or logits for the\n *   same categories as in `yTrue`.\n * @return Accuracy Tensor.\n *\n * @doc {heading: 'Metrics', namespace: 'metrics'}\n */\nexport function categoricalAccuracy(yTrue, yPred) {\n    return metrics.categoricalAccuracy(yTrue, yPred);\n}\n/**\n * Categorical crossentropy between an output tensor and a target tensor.\n *\n * @param target A tensor of the same shape as `output`.\n * @param output A tensor resulting from a softmax (unless `fromLogits` is\n *  `true`, in which case `output` is expected to be the logits).\n * @param fromLogits Boolean, whether `output` is the result of a softmax, or is\n *   a tensor of logits.\n *\n * @doc {heading: 'Metrics', namespace: 'metrics'}\n */\nexport function categoricalCrossentropy(yTrue, yPred) {\n    return metrics.categoricalCrossentropy(yTrue, yPred);\n}\n/**\n * Computes the precision of the predictions with respect to the labels.\n *\n * Example:\n * ```js\n * const x = tf.tensor2d(\n *    [\n *      [0, 0, 0, 1],\n *      [0, 1, 0, 0],\n *      [0, 0, 0, 1],\n *      [1, 0, 0, 0],\n *      [0, 0, 1, 0]\n *    ]\n * );\n *\n * const y = tf.tensor2d(\n *    [\n *      [0, 0, 1, 0],\n *      [0, 1, 0, 0],\n *      [0, 0, 0, 1],\n *      [0, 1, 0, 0],\n *      [0, 1, 0, 0]\n *    ]\n * );\n *\n * const precision = tf.metrics.precision(x, y);\n * precision.print();\n * ```\n *\n * @param yTrue The ground truth values. Expected to contain only 0-1 values.\n * @param yPred The predicted values. Expected to contain only 0-1 values.\n * @return Precision Tensor.\n *\n * @doc {heading: 'Metrics', namespace: 'metrics'}\n */\nexport function precision(yTrue, yPred) {\n    return metrics.precision(yTrue, yPred);\n}\n/**\n * Computes the recall of the predictions with respect to the labels.\n *\n * Example:\n * ```js\n * const x = tf.tensor2d(\n *    [\n *      [0, 0, 0, 1],\n *      [0, 1, 0, 0],\n *      [0, 0, 0, 1],\n *      [1, 0, 0, 0],\n *      [0, 0, 1, 0]\n *    ]\n * );\n *\n * const y = tf.tensor2d(\n *    [\n *      [0, 0, 1, 0],\n *      [0, 1, 0, 0],\n *      [0, 0, 0, 1],\n *      [0, 1, 0, 0],\n *      [0, 1, 0, 0]\n *    ]\n * );\n *\n * const recall = tf.metrics.recall(x, y);\n * recall.print();\n * ```\n *\n * @param yTrue The ground truth values. Expected to contain only 0-1 values.\n * @param yPred The predicted values. Expected to contain only 0-1 values.\n * @return Recall Tensor.\n *\n * @doc {heading: 'Metrics', namespace: 'metrics'}\n */\nexport function recall(yTrue, yPred) {\n    return metrics.recall(yTrue, yPred);\n}\n/**\n * Loss or metric function: Cosine proximity.\n *\n * Mathematically, cosine proximity is defined as:\n *   `-sum(l2Normalize(yTrue) * l2Normalize(yPred))`,\n * wherein `l2Normalize()` normalizes the L2 norm of the input to 1 and `*`\n * represents element-wise multiplication.\n *\n * ```js\n * const yTrue = tf.tensor2d([[1, 0], [1, 0]]);\n * const yPred = tf.tensor2d([[1 / Math.sqrt(2), 1 / Math.sqrt(2)], [0, 1]]);\n * const proximity = tf.metrics.cosineProximity(yTrue, yPred);\n * proximity.print();\n * ```\n *\n * @param yTrue Truth Tensor.\n * @param yPred Prediction Tensor.\n * @return Cosine proximity Tensor.\n *\n * @doc {heading: 'Metrics', namespace: 'metrics'}\n */\nexport function cosineProximity(yTrue, yPred) {\n    return losses.cosineProximity(yTrue, yPred);\n}\n/**\n * Loss or metric function: Mean absolute error.\n *\n * Mathematically, mean absolute error is defined as:\n *   `mean(abs(yPred - yTrue))`,\n * wherein the `mean` is applied over feature dimensions.\n *\n * ```js\n * const yTrue = tf.tensor2d([[0, 1], [0, 0], [2, 3]]);\n * const yPred = tf.tensor2d([[0, 1], [0, 1], [-2, -3]]);\n * const mse = tf.metrics.meanAbsoluteError(yTrue, yPred);\n * mse.print();\n * ```\n *\n * @param yTrue Truth Tensor.\n * @param yPred Prediction Tensor.\n * @return Mean absolute error Tensor.\n *\n * @doc {heading: 'Metrics', namespace: 'metrics'}\n */\nexport function meanAbsoluteError(yTrue, yPred) {\n    return losses.meanAbsoluteError(yTrue, yPred);\n}\n/**\n * Loss or metric function: Mean absolute percentage error.\n *\n * ```js\n * const yTrue = tf.tensor2d([[0, 1], [10, 20]]);\n * const yPred = tf.tensor2d([[0, 1], [11, 24]]);\n * const mse = tf.metrics.meanAbsolutePercentageError(yTrue, yPred);\n * mse.print();\n * ```\n *\n * Aliases: `tf.metrics.MAPE`, `tf.metrics.mape`.\n *\n * @param yTrue Truth Tensor.\n * @param yPred Prediction Tensor.\n * @return Mean absolute percentage error Tensor.\n *\n * @doc {heading: 'Metrics', namespace: 'metrics'}\n */\nexport function meanAbsolutePercentageError(yTrue, yPred) {\n    return losses.meanAbsolutePercentageError(yTrue, yPred);\n}\nexport function MAPE(yTrue, yPred) {\n    return losses.meanAbsolutePercentageError(yTrue, yPred);\n}\nexport function mape(yTrue, yPred) {\n    return losses.meanAbsolutePercentageError(yTrue, yPred);\n}\n/**\n * Loss or metric function: Mean squared error.\n *\n * ```js\n * const yTrue = tf.tensor2d([[0, 1], [3, 4]]);\n * const yPred = tf.tensor2d([[0, 1], [-3, -4]]);\n * const mse = tf.metrics.meanSquaredError(yTrue, yPred);\n * mse.print();\n * ```\n *\n * Aliases: `tf.metrics.MSE`, `tf.metrics.mse`.\n *\n * @param yTrue Truth Tensor.\n * @param yPred Prediction Tensor.\n * @return Mean squared error Tensor.\n *\n * @doc {heading: 'Metrics', namespace: 'metrics'}\n */\nexport function meanSquaredError(yTrue, yPred) {\n    return losses.meanSquaredError(yTrue, yPred);\n}\nexport function MSE(yTrue, yPred) {\n    return losses.meanSquaredError(yTrue, yPred);\n}\nexport function mse(yTrue, yPred) {\n    return losses.meanSquaredError(yTrue, yPred);\n}\n/**\n * Computes R2 score.\n *\n * ```js\n * const yTrue = tf.tensor2d([[0, 1], [3, 4]]);\n * const yPred = tf.tensor2d([[0, 1], [-3, -4]]);\n * const r2Score = tf.metrics.r2Score(yTrue, yPred);\n * r2Score.print();\n * ```\n * @param yTrue Truth Tensor.\n * @param yPred Prediction Tensor.\n * @return R2 score Tensor.\n *\n * @doc {heading: 'Metrics', namespace: 'metrics'}\n */\nexport function r2Score(yTrue, yPred) {\n    return metrics.r2Score(yTrue, yPred);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport * as regularizers from './regularizers';\n// tslint:disable-next-line:max-line-length\nimport { L1L2 } from './regularizers';\n/**\n * Regularizer for L1 and L2 regularization.\n *\n * Adds a term to the loss to penalize large weights:\n * loss += sum(l1 * abs(x)) + sum(l2 * x^2)\n *\n * @doc {heading: 'Regularizers', namespace: 'regularizers'}\n */\nexport function l1l2(config) {\n    return new L1L2(config);\n}\n/**\n * Regularizer for L1 regularization.\n *\n * Adds a term to the loss to penalize large weights:\n * loss += sum(l1 * abs(x))\n * @param args l1 config.\n *\n * @doc {heading: 'Regularizers', namespace: 'regularizers'}\n */\nexport function l1(config) {\n    return regularizers.l1(config);\n}\n/**\n * Regularizer for L2 regularization.\n *\n * Adds a term to the loss to penalize large weights:\n * loss += sum(l2 * x^2)\n * @param args l2 config.\n *\n * @doc {heading: 'Regularizers', namespace: 'regularizers'}\n */\nexport function l2(config) {\n    return regularizers.l2(config);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0c19yZWd1bGFyaXplcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWxheWVycy9zcmMvZXhwb3J0c19yZWd1bGFyaXplcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0dBUUc7QUFDSCxPQUFPLEtBQUssWUFBWSxNQUFNLGdCQUFnQixDQUFDO0FBQy9DLDJDQUEyQztBQUMzQyxPQUFPLEVBQVMsSUFBSSxFQUFnQyxNQUFNLGdCQUFnQixDQUFDO0FBRTNFOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsSUFBSSxDQUFDLE1BQWlCO0lBQ3BDLE9BQU8sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxVQUFVLEVBQUUsQ0FBQyxNQUFlO0lBQ2hDLE9BQU8sWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRUQ7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLFVBQVUsRUFBRSxDQUFDLE1BQWU7SUFDaEMsT0FBTyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlXG4gKiBsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgb3IgYXRcbiAqIGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlULlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuaW1wb3J0ICogYXMgcmVndWxhcml6ZXJzIGZyb20gJy4vcmVndWxhcml6ZXJzJztcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbmltcG9ydCB7TDFBcmdzLCBMMUwyLCBMMUwyQXJncywgTDJBcmdzLCBSZWd1bGFyaXplcn0gZnJvbSAnLi9yZWd1bGFyaXplcnMnO1xuXG4vKipcbiAqIFJlZ3VsYXJpemVyIGZvciBMMSBhbmQgTDIgcmVndWxhcml6YXRpb24uXG4gKlxuICogQWRkcyBhIHRlcm0gdG8gdGhlIGxvc3MgdG8gcGVuYWxpemUgbGFyZ2Ugd2VpZ2h0czpcbiAqIGxvc3MgKz0gc3VtKGwxICogYWJzKHgpKSArIHN1bShsMiAqIHheMilcbiAqXG4gKiBAZG9jIHtoZWFkaW5nOiAnUmVndWxhcml6ZXJzJywgbmFtZXNwYWNlOiAncmVndWxhcml6ZXJzJ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGwxbDIoY29uZmlnPzogTDFMMkFyZ3MpOiBSZWd1bGFyaXplciB7XG4gIHJldHVybiBuZXcgTDFMMihjb25maWcpO1xufVxuXG4vKipcbiAqIFJlZ3VsYXJpemVyIGZvciBMMSByZWd1bGFyaXphdGlvbi5cbiAqXG4gKiBBZGRzIGEgdGVybSB0byB0aGUgbG9zcyB0byBwZW5hbGl6ZSBsYXJnZSB3ZWlnaHRzOlxuICogbG9zcyArPSBzdW0obDEgKiBhYnMoeCkpXG4gKiBAcGFyYW0gYXJncyBsMSBjb25maWcuXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ1JlZ3VsYXJpemVycycsIG5hbWVzcGFjZTogJ3JlZ3VsYXJpemVycyd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsMShjb25maWc/OiBMMUFyZ3MpOiBSZWd1bGFyaXplciB7XG4gIHJldHVybiByZWd1bGFyaXplcnMubDEoY29uZmlnKTtcbn1cblxuLyoqXG4gKiBSZWd1bGFyaXplciBmb3IgTDIgcmVndWxhcml6YXRpb24uXG4gKlxuICogQWRkcyBhIHRlcm0gdG8gdGhlIGxvc3MgdG8gcGVuYWxpemUgbGFyZ2Ugd2VpZ2h0czpcbiAqIGxvc3MgKz0gc3VtKGwyICogeF4yKVxuICogQHBhcmFtIGFyZ3MgbDIgY29uZmlnLlxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdSZWd1bGFyaXplcnMnLCBuYW1lc3BhY2U6ICdyZWd1bGFyaXplcnMnfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbDIoY29uZmlnPzogTDJBcmdzKTogUmVndWxhcml6ZXIge1xuICByZXR1cm4gcmVndWxhcml6ZXJzLmwyKGNvbmZpZyk7XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/callbacks.py */\nimport { BaseCallback } from './base_callbacks';\nimport { LayersModel } from './engine/training';\nimport { NotImplementedError } from './errors';\nimport { resolveScalarsInLogs } from './logs';\nexport class Callback extends BaseCallback {\n    constructor() {\n        super(...arguments);\n        /** Instance of `keras.models.Model`. Reference of the model being trained. */\n        this.model = null;\n    }\n    setModel(model) {\n        if (!(model instanceof LayersModel)) {\n            throw new Error('model must be a LayersModel, not some other Container');\n        }\n        this.model = model;\n    }\n}\nfunction less(currVal, prevVal) {\n    return currVal < prevVal;\n}\nfunction greater(currVal, prevVal) {\n    return currVal > prevVal;\n}\n/**\n * A Callback that stops training when a monitored quantity has stopped\n * improving.\n */\nexport class EarlyStopping extends Callback {\n    constructor(args) {\n        super();\n        if (args == null) {\n            args = {};\n        }\n        if (args.restoreBestWeights) {\n            throw new NotImplementedError('restoreBestWeights = True is not implemented in EarlyStopping yet.');\n        }\n        this.monitor = args.monitor || 'val_loss';\n        this.minDelta = Math.abs(args.minDelta || 0);\n        this.patience = args.patience || 0;\n        this.verbose = args.verbose || 0;\n        this.mode = args.mode || 'auto';\n        this.baseline = args.baseline;\n        if (['auto', 'min', 'max'].indexOf(this.mode) === -1) {\n            console.warn(`EarlyStopping mode '${this.mode}' is invalid. ` +\n                `Falling back to mode 'auto'.`);\n            this.mode = 'auto';\n        }\n        if (this.mode === 'min') {\n            this.monitorFunc = less;\n        }\n        else if (this.mode === 'max') {\n            this.monitorFunc = greater;\n        }\n        else {\n            // For mode === 'auto'.\n            if (this.monitor.indexOf('acc') !== -1) {\n                this.monitorFunc = greater;\n            }\n            else {\n                this.monitorFunc = less;\n            }\n        }\n        if (this.monitorFunc === less) {\n            this.minDelta *= -1;\n        }\n    }\n    async onTrainBegin(logs) {\n        this.wait = 0;\n        this.stoppedEpoch = 0;\n        if (this.baseline != null) {\n            this.best = this.baseline;\n        }\n        else {\n            this.best = this.monitorFunc === less ? Infinity : -Infinity;\n        }\n    }\n    async onEpochEnd(epoch, logs) {\n        await resolveScalarsInLogs(logs);\n        const current = this.getMonitorValue(logs);\n        if (current == null) {\n            return;\n        }\n        if (this.monitorFunc(current - this.minDelta, this.best)) {\n            this.best = current;\n            this.wait = 0;\n            // TODO(cais): Logic for restoreBestWeights.\n        }\n        else {\n            this.wait++;\n            if (this.wait >= this.patience) {\n                this.stoppedEpoch = epoch;\n                this.model.stopTraining = true;\n            }\n            // TODO(cais): Logic for restoreBestWeights.\n        }\n    }\n    async onTrainEnd(logs) {\n        if (this.stoppedEpoch > 0 && this.verbose) {\n            console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);\n        }\n    }\n    getMonitorValue(logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        const monitorValue = logs[this.monitor];\n        if (monitorValue == null) {\n            console.warn(`Metric for EarlyStopping ${this.monitor} is not available. ` +\n                `Available metrics are: ${Object.keys(logs)}`);\n        }\n        return monitorValue;\n    }\n}\n/**\n * Factory function for a Callback that stops training when a monitored\n * quantity has stopped improving.\n *\n * Early stopping is a type of regularization, and protects model against\n * overfitting.\n *\n * The following example based on fake data illustrates how this callback\n * can be used during `tf.LayersModel.fit()`:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense({\n *   units: 3,\n *   activation: 'softmax',\n *   kernelInitializer: 'ones',\n *   inputShape: [2]\n * }));\n * const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);\n * const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);\n * const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);\n * model.compile(\n *     {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});\n *\n * // Without the EarlyStopping callback, the val_acc value would be:\n * //   0.5, 0.5, 0.5, 0.5, ...\n * // With val_acc being monitored, training should stop after the 2nd epoch.\n * const history = await model.fit(xs, ys, {\n *   epochs: 10,\n *   validationData: [xsVal, ysVal],\n *   callbacks: tf.callbacks.earlyStopping({monitor: 'val_acc'})\n * });\n *\n * // Expect to see a length-2 array.\n * console.log(history.history.val_acc);\n * ```\n *\n * @doc {\n *   heading: 'Callbacks',\n *   namespace: 'callbacks'\n * }\n */\nexport function earlyStopping(args) {\n    return new EarlyStopping(args);\n}\nexport const callbacks = { earlyStopping };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst CUSTOM_OPS = {};\n/**\n * Register an Op for graph model executor. This allows you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object are based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function registerOp(name, opFunc) {\n    const opMapper = {\n        tfOpName: name,\n        category: 'custom',\n        inputs: [],\n        attrs: [],\n        customExecutor: opFunc\n    };\n    CUSTOM_OPS[name] = opMapper;\n}\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function getRegisteredOp(name) {\n    return CUSTOM_OPS[name];\n}\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function deregisterOp(name) {\n    delete CUSTOM_OPS[name];\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9jdXN0b21fb3AvcmVnaXN0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsTUFBTSxVQUFVLEdBQThCLEVBQUUsQ0FBQztBQUVqRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFZLEVBQUUsTUFBa0I7SUFDekQsTUFBTSxRQUFRLEdBQWE7UUFDekIsUUFBUSxFQUFFLElBQUk7UUFDZCxRQUFRLEVBQUUsUUFBUTtRQUNsQixNQUFNLEVBQUUsRUFBRTtRQUNWLEtBQUssRUFBRSxFQUFFO1FBQ1QsY0FBYyxFQUFFLE1BQU07S0FDdkIsQ0FBQztJQUVGLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUM7QUFDOUIsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUMsSUFBWTtJQUMxQyxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFZO0lBQ3ZDLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtPcEV4ZWN1dG9yLCBPcE1hcHBlcn0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jb25zdCBDVVNUT01fT1BTOiB7W2tleTogc3RyaW5nXTogT3BNYXBwZXJ9ID0ge307XG5cbi8qKlxuICogUmVnaXN0ZXIgYW4gT3AgZm9yIGdyYXBoIG1vZGVsIGV4ZWN1dG9yLiBUaGlzIGFsbG93cyB5b3UgdG8gcmVnaXN0ZXJcbiAqIFRlbnNvckZsb3cgY3VzdG9tIG9wIG9yIG92ZXJyaWRlIGV4aXN0aW5nIG9wLlxuICpcbiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBvZiByZWdpc3RlcmluZyBhIG5ldyBNYXRNdWwgT3AuXG4gKiBgYGBqc1xuICogY29uc3QgY3VzdG9tTWF0bXVsID0gKG5vZGUpID0+XG4gKiAgICB0Zi5tYXRNdWwoXG4gKiAgICAgICAgbm9kZS5pbnB1dHNbMF0sIG5vZGUuaW5wdXRzWzFdLFxuICogICAgICAgIG5vZGUuYXR0cnNbJ3RyYW5zcG9zZV9hJ10sIG5vZGUuYXR0cnNbJ3RyYW5zcG9zZV9iJ10pO1xuICpcbiAqIHRmLnJlZ2lzdGVyT3AoJ01hdE11bCcsIGN1c3RvbU1hdG11bCk7XG4gKiBgYGBcbiAqIFRoZSBpbnB1dHMgYW5kIGF0dHJzIG9mIHRoZSBub2RlIG9iamVjdCBhcmUgYmFzZWQgb24gdGhlIFRlbnNvckZsb3cgb3BcbiAqIHJlZ2lzdHJ5LlxuICpcbiAqIEBwYXJhbSBuYW1lIFRoZSBUZW5zb3JmbG93IE9wIG5hbWUuXG4gKiBAcGFyYW0gb3BGdW5jIEFuIG9wIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IGdyYXBoIG5vZGVcbiAqIGR1cmluZyBleGVjdXRpb24gYW5kIG5lZWRzIHRvIHJldHVybiBhIHRlbnNvciBvciBhIGxpc3Qgb2YgdGVuc29ycy4gVGhlIG5vZGVcbiAqIGhhcyB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gKiAgICAtIGF0dHI6IEEgbWFwIGZyb20gYXR0cmlidXRlIG5hbWUgdG8gaXRzIHZhbHVlXG4gKiAgICAtIGlucHV0czogQSBsaXN0IG9mIGlucHV0IHRlbnNvcnNcbiAqXG4gKiBAZG9jIHtoZWFkaW5nOiAnTW9kZWxzJywgc3ViaGVhZGluZzogJ09wIFJlZ2lzdHJ5J31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyT3AobmFtZTogc3RyaW5nLCBvcEZ1bmM6IE9wRXhlY3V0b3IpIHtcbiAgY29uc3Qgb3BNYXBwZXI6IE9wTWFwcGVyID0ge1xuICAgIHRmT3BOYW1lOiBuYW1lLFxuICAgIGNhdGVnb3J5OiAnY3VzdG9tJyxcbiAgICBpbnB1dHM6IFtdLFxuICAgIGF0dHJzOiBbXSxcbiAgICBjdXN0b21FeGVjdXRvcjogb3BGdW5jXG4gIH07XG5cbiAgQ1VTVE9NX09QU1tuYW1lXSA9IG9wTWFwcGVyO1xufVxuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBPcE1hcHBlciBvYmplY3QgZm9yIHRoZSByZWdpc3RlcmVkIG9wLlxuICpcbiAqIEBwYXJhbSBuYW1lIFRoZSBUZW5zb3JmbG93IE9wIG5hbWUuXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ01vZGVscycsIHN1YmhlYWRpbmc6ICdPcCBSZWdpc3RyeSd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWdpc3RlcmVkT3AobmFtZTogc3RyaW5nKTogT3BNYXBwZXIge1xuICByZXR1cm4gQ1VTVE9NX09QU1tuYW1lXTtcbn1cblxuLyoqXG4gKiBEZXJlZ2lzdGVyIHRoZSBPcCBmb3IgZ3JhcGggbW9kZWwgZXhlY3V0b3IuXG4gKlxuICogQHBhcmFtIG5hbWUgVGhlIFRlbnNvcmZsb3cgT3AgbmFtZS5cbiAqXG4gKiBAZG9jIHtoZWFkaW5nOiAnTW9kZWxzJywgc3ViaGVhZGluZzogJ09wIFJlZ2lzdHJ5J31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlcmVnaXN0ZXJPcChuYW1lOiBzdHJpbmcpIHtcbiAgZGVsZXRlIENVU1RPTV9PUFNbbmFtZV07XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { clone, util } from '@tensorflow/tfjs-core';\nexport function getParamValue(paramName, node, tensorMap, context, resourceManager) {\n    const inputParam = node.inputParams[paramName];\n    if (inputParam && inputParam.inputIndexStart !== undefined) {\n        const start = inputParam.inputIndexStart;\n        const end = inputParam.inputIndexEnd === 0 ?\n            undefined :\n            (inputParam.inputIndexEnd === undefined ? start + 1 :\n                inputParam.inputIndexEnd);\n        const shiftedStart = start < 0 ? node.inputNames.length + start : start;\n        if (inputParam.type === 'tensor') {\n            return getTensor(node.inputNames[shiftedStart], tensorMap, context, resourceManager);\n        }\n        if (inputParam.type === 'tensors') {\n            // TODO(mattSoulanille): This filters out NoOp nodes during execution, but\n            // these should really never be in the execution graph in the first place.\n            // They're necessary for ordering the graph, but should not be visible\n            // during execution. Perhaps have different sets of children, one for\n            // control dependencies and another for real dependencies.\n            const inputs = node.inputs.slice(start, end);\n            const inputNames = node.inputNames.slice(start, end)\n                .filter((_name, index) => { var _a; return ((_a = inputs[index]) === null || _a === void 0 ? void 0 : _a.op) !== 'NoOp'; });\n            return inputNames.map(name => getTensor(name, tensorMap, context, resourceManager));\n        }\n        const tensor = getTensor(node.inputNames[shiftedStart], tensorMap, context, resourceManager);\n        const data = tensor.dataSync();\n        return inputParam.type === 'number' ?\n            data[0] :\n            util.toNestedArray(tensor.shape, data);\n    }\n    const attrParam = node.attrParams[paramName];\n    return attrParam && attrParam.value;\n}\n/**\n * Retrieve the tensor from tensorsMap based on input name.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function getTensor(name, tensorsMap, context, resourceManager) {\n    const [nodeName, index] = parseNodeName(name, context);\n    if (resourceManager != null) {\n        const tensor = resourceManager.getHashTableHandleByName(nodeName);\n        if (tensor != null) {\n            return tensor;\n        }\n    }\n    const contextId = context.currentContextIds.find(contextId => {\n        return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n    });\n    return contextId !== undefined ?\n        tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n        undefined;\n}\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContext(name, tensorsMap, context) {\n    return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n/**\n * Returns the node name, outputName and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n * If the input name contains output name i.e. StringSplit:indices:0, it will\n * return ['StringSplit', 0, 'indices'].\n */\nexport function getNodeNameAndIndex(inputName, context) {\n    const [nodeName, index, outputName] = parseNodeName(inputName, context);\n    return [\n        getNodeNameWithContextId(nodeName, context && context.currentContextId),\n        index, outputName\n    ];\n}\nfunction getNodeNameWithContextId(name, contextId) {\n    return !!contextId ? `${name}-${contextId}` : name;\n}\nexport function parseNodeName(name, context) {\n    if (name === '') {\n        return ['', 0, undefined];\n    }\n    const isCacheEnabled = context != null && context.parseNodeNameCache != null;\n    if (isCacheEnabled) {\n        const cachedResult = context.parseNodeNameCache.get(name);\n        if (cachedResult != null) {\n            return cachedResult;\n        }\n    }\n    const parts = name.split(':');\n    let result;\n    if (parts.length === 1) {\n        result = [name, 0, undefined];\n    }\n    else {\n        const nodeName = parts[0];\n        const outputName = parts.length === 3 ? parts[1] : undefined;\n        const index = Number(parts[parts.length - 1]);\n        result = [nodeName, index, outputName];\n    }\n    if (isCacheEnabled) {\n        context.parseNodeNameCache.set(name, result);\n    }\n    return result;\n}\nexport function split(arr, size) {\n    const res = [];\n    for (let i = 0; i < arr.length; i += size) {\n        res.push(arr.slice(i, i + size));\n    }\n    return res;\n}\nexport function getPadding(node, tensorMap, context) {\n    let pad = getParamValue('pad', node, tensorMap, context);\n    if (pad === 'explicit') {\n        // This is 1d array, we need to convert it to 2d array\n        pad = getParamValue('explicitPaddings', node, tensorMap, context);\n        const explicitPadding = [[0, 0], [0, 0], [0, 0], [0, 0]];\n        for (let i = 0; i < 4; i++) {\n            explicitPadding[i][0] = pad[i * 2];\n            explicitPadding[i][1] = pad[i * 2 + 1];\n        }\n        return explicitPadding;\n    }\n    return pad;\n}\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor) {\n    return tensor.kept ? tensor : clone(tensor);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Add',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'AddV2',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'AddN',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'tensors',\n                'type': 'tensors'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'BiasAdd',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Sub',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'RealDiv',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Div',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'DivNoNan',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FloorDiv',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Mul',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Maximum',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Minimum',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Pow',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SquaredDifference',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Mod',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FloorMod',\n        'category': 'arithmetic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Abs',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Acos',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Asin',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Atan',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Atan2',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'y',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Ceil',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ClipByValue',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'clipValueMin',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'clipValueMax',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Complex',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'real',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'imag',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ComplexAbs',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Cos',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Cosh',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Elu',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Exp',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Floor',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Log',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Imag',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'Tout',\n                'name': 'outputType',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Neg',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Real',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'Tout',\n                'name': 'outputType',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Prelu',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'alpha',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Relu',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Relu6',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Selu',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Sigmoid',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Sin',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Sinh',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Sqrt',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Rsqrt',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Square',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Tan',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Tanh',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Sign',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Round',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Expm1',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Log1p',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Reciprocal',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Softplus',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Asinh',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Acosh',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Atanh',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Erf',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LeakyRelu',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'alpha',\n                'name': 'alpha',\n                'type': 'number',\n                'defaultValue': 0.2\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'IsNan',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'IsFinite',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'IsInf',\n        'category': 'basic_math',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'EmptyTensorList',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'elementShape',\n                'type': 'shape'\n            },\n            {\n                'start': 1,\n                'name': 'maxNumElements',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LoopCond',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'pred',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Switch',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'data',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'pred',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Merge',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'tensors',\n                'type': 'tensors'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Enter',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'frame_name',\n                'name': 'frameName',\n                'type': 'string'\n            },\n            {\n                'tfName': 'is_constant',\n                'name': 'isConstant',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Exit',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'NextIteration',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'size',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'element_shape',\n                'name': 'elementShape',\n                'type': 'shape'\n            },\n            {\n                'tfName': 'dynamic_size',\n                'name': 'dynamicSize',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'clear_after_read',\n                'name': 'clearAfterRead',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'identical_element_shapes',\n                'name': 'identicalElementShapes',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'tensor_array_name',\n                'name': 'name',\n                'type': 'string'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayWriteV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'index',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'flowIn',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayReadV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'index',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'flowIn',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayGatherV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'flowIn',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'element_shape',\n                'name': 'elementShape',\n                'type': 'shape'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayScatterV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'flowIn',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayConcatV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'flowIn',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'element_shape_except0',\n                'name': 'elementShapeExcept0',\n                'type': 'shape',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArraySplitV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'lengths',\n                'type': 'number[]'\n            },\n            {\n                'start': 3,\n                'name': 'flowIn',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArraySizeV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'flowIn',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayCloseV3',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorArrayId',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'StatelessIf',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'cond',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'end': 0,\n                'name': 'args',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'then_branch',\n                'name': 'thenBranch',\n                'type': 'func'\n            },\n            {\n                'tfName': 'else_branch',\n                'name': 'elseBranch',\n                'type': 'func'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'If',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'cond',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'end': 0,\n                'name': 'args',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'then_branch',\n                'name': 'thenBranch',\n                'type': 'func'\n            },\n            {\n                'tfName': 'else_branch',\n                'name': 'elseBranch',\n                'type': 'func'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'StatelessWhile',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'args',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'cond',\n                'name': 'cond',\n                'type': 'func'\n            },\n            {\n                'tfName': 'body',\n                'name': 'body',\n                'type': 'func'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'While',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'args',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'cond',\n                'name': 'cond',\n                'type': 'func'\n            },\n            {\n                'tfName': 'body',\n                'name': 'body',\n                'type': 'func'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListScatter',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'elementShape',\n                'type': 'shape'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListScatterV2',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'elementShape',\n                'type': 'shape'\n            },\n            {\n                'start': 3,\n                'name': 'numElements',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListGather',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'elementShape',\n                'type': 'shape'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListGetItem',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'index',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'elementShape',\n                'type': 'shape'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListSetItem',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'index',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'tensor',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListReserve',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'elementShape',\n                'type': 'shape'\n            },\n            {\n                'start': 1,\n                'name': 'numElements',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListFromTensor',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'elementShape',\n                'type': 'shape'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListStack',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'elementShape',\n                'type': 'shape'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'num_elements',\n                'name': 'numElements',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListSplit',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'elementShape',\n                'type': 'shape'\n            },\n            {\n                'start': 2,\n                'name': 'lengths',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListConcat',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_shape',\n                'name': 'elementShape',\n                'type': 'shape'\n            },\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListConcatV2',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_shape',\n                'name': 'elementShape',\n                'type': 'shape'\n            },\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListPopBack',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'elementShape',\n                'type': 'shape'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListPushBack',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'tensor',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'element_dtype',\n                'name': 'elementDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListLength',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListResize',\n        'category': 'control',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensorListId',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'size',\n                'type': 'number'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'AvgPool',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            {\n                'tfName': 'ksize',\n                'name': 'kernelSize',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'MaxPool',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            {\n                'tfName': 'ksize',\n                'name': 'kernelSize',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': [],\n                'notSupported': true\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'MaxPoolWithArgmax',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'ksize',\n                'name': 'kernelSize',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'include_batch_in_index',\n                'name': 'includeBatchInIndex',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'AvgPool3D',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            {\n                'tfName': 'ksize',\n                'name': 'kernelSize',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'MaxPool3D',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            {\n                'tfName': 'ksize',\n                'name': 'kernelSize',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Conv1D',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'stride',\n                'name': 'stride',\n                'type': 'number'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NWC'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'dilation',\n                'name': 'dilation',\n                'type': 'number',\n                'defaultValue': 1\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Conv2D',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'useCudnnOnGpu',\n                'name': 'useCudnnOnGpu',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': '_FusedConv2D',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'end': 0,\n                'name': 'args',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'num_args',\n                'name': 'numArgs',\n                'type': 'number'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'use_cudnn_on_gpu',\n                'name': 'useCudnnOnGpu',\n                'type': 'bool',\n                'defaultValue': true\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]',\n                'defaultValue': [\n                    1,\n                    1,\n                    1,\n                    1\n                ]\n            },\n            {\n                'tfName': 'fused_ops',\n                'name': 'fusedOps',\n                'type': 'string[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.0001\n            },\n            {\n                'tfName': 'leakyrelu_alpha',\n                'name': 'leakyreluAlpha',\n                'type': 'number',\n                'defaultValue': 0.2\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Conv2DBackpropInput',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 2,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            },\n            {\n                'start': 0,\n                'name': 'outputShape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'DepthwiseConv2d',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'input',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'DepthwiseConv2dNative',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'input',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FusedDepthwiseConv2dNative',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'end': 0,\n                'name': 'args',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'num_args',\n                'name': 'numArgs',\n                'type': 'number'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]',\n                'defaultValue': [\n                    1,\n                    1,\n                    1,\n                    1\n                ]\n            },\n            {\n                'tfName': 'fused_ops',\n                'name': 'fusedOps',\n                'type': 'string[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Conv3D',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Dilation2D',\n        'category': 'convolution',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'filter',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'strides',\n                'name': 'strides',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'rates',\n                'name': 'dilations',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'padding',\n                'name': 'pad',\n                'type': 'string'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Fill',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'shape',\n                'type': 'number[]'\n            },\n            {\n                'start': 1,\n                'name': 'value',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LinSpace',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'start',\n                'type': 'number'\n            },\n            {\n                'start': 1,\n                'name': 'stop',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'num',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'OneHot',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'indices',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'depth',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'onValue',\n                'type': 'number',\n                'defaultValue': 1\n            },\n            {\n                'start': 3,\n                'name': 'offValue',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'axis',\n                'name': 'axis',\n                'type': 'number',\n                'notSupported': true\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Ones',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'OnesLike',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'RandomStandardNormal',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'seed',\n                'name': 'seed',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'seed2',\n                'name': 'seed2',\n                'type': 'number',\n                'defaultValue': 0,\n                'notSupported': true\n            },\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'T',\n                'name': 'T',\n                'type': 'number',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'RandomUniform',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'minval',\n                'name': 'minval',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'maxval',\n                'name': 'maxval',\n                'type': 'number',\n                'defaultValue': 1\n            },\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'seed',\n                'name': 'seed',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'seed2',\n                'name': 'seed2',\n                'type': 'number',\n                'defaultValue': 0,\n                'notSupported': true\n            },\n            {\n                'tfName': 'T',\n                'name': 'T',\n                'type': 'number',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'RandomUniformInt',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'minval',\n                'name': 'minval',\n                'type': 'number'\n            },\n            {\n                'tfName': 'maxval',\n                'name': 'maxval',\n                'type': 'number'\n            },\n            {\n                'tfName': 'seed',\n                'name': 'seed',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'seed2',\n                'name': 'seed2',\n                'type': 'number',\n                'defaultValue': 0,\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Range',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'start',\n                'type': 'number'\n            },\n            {\n                'start': 1,\n                'name': 'stop',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'step',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'Tidx',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TruncatedNormal',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'means',\n                'name': 'mean',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'stddev',\n                'name': 'stdDev',\n                'type': 'number',\n                'defaultValue': 1\n            },\n            {\n                'tfName': 'seed',\n                'name': 'seed',\n                'type': 'number'\n            },\n            {\n                'tfName': 'seed2',\n                'name': 'seed2',\n                'type': 'number',\n                'defaultValue': 0,\n                'notSupported': true\n            },\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'T',\n                'name': 'T',\n                'type': 'number',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Zeros',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ZerosLike',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Multinomial',\n        'category': 'creation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'logits',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'numSamples',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'seed',\n                'name': 'seed',\n                'type': 'number'\n            },\n            {\n                'tfName': 'seed2',\n                'name': 'seed2',\n                'type': 'number'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'output_dtype',\n                'name': 'output_dtype',\n                'type': 'dtype'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'NonMaxSuppressionV2',\n        'category': 'dynamic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'boxes',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'scores',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'maxOutputSize',\n                'type': 'number'\n            },\n            {\n                'start': 3,\n                'name': 'iouThreshold',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'NonMaxSuppressionV3',\n        'category': 'dynamic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'boxes',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'scores',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'maxOutputSize',\n                'type': 'number'\n            },\n            {\n                'start': 3,\n                'name': 'iouThreshold',\n                'type': 'number'\n            },\n            {\n                'start': 4,\n                'name': 'scoreThreshold',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'NonMaxSuppressionV4',\n        'category': 'dynamic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'boxes',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'scores',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'maxOutputSize',\n                'type': 'number'\n            },\n            {\n                'start': 3,\n                'name': 'iouThreshold',\n                'type': 'number'\n            },\n            {\n                'start': 4,\n                'name': 'scoreThreshold',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'T_threshold',\n                'name': 'threshold',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'pad_to_max_output_size',\n                'name': 'padToMaxOutputSize',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'NonMaxSuppressionV5',\n        'category': 'dynamic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'boxes',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'scores',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'maxOutputSize',\n                'type': 'number'\n            },\n            {\n                'start': 3,\n                'name': 'iouThreshold',\n                'type': 'number'\n            },\n            {\n                'start': 4,\n                'name': 'scoreThreshold',\n                'type': 'number'\n            },\n            {\n                'start': 5,\n                'name': 'softNmsSigma',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Where',\n        'category': 'dynamic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'condition',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ListDiff',\n        'category': 'dynamic',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'y',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'LowerBound',\n        'category': 'evaluation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'sortedSequence',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'values',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TopKV2',\n        'category': 'evaluation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'k',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'sorted',\n                'name': 'sorted',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'UpperBound',\n        'category': 'evaluation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'sortedSequence',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'values',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Unique',\n        'category': 'evaluation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'UniqueV2',\n        'category': 'evaluation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhbHVhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL29wX2xpc3QvZXZhbHVhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFJSCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQWU7SUFDOUI7UUFDRSxVQUFVLEVBQUUsWUFBWTtRQUN4QixVQUFVLEVBQUUsWUFBWTtRQUN4QixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsZ0JBQWdCO2dCQUN4QixNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxRQUFRO2dCQUNoQixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLFVBQVUsRUFBRSxZQUFZO1FBQ3hCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxHQUFHO2dCQUNYLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsTUFBTSxFQUFFLE1BQU07YUFDZjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxZQUFZO1FBQ3hCLFVBQVUsRUFBRSxZQUFZO1FBQ3hCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxnQkFBZ0I7Z0JBQ3hCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLFFBQVE7UUFDcEIsVUFBVSxFQUFFLFlBQVk7UUFDeEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsVUFBVTtRQUN0QixVQUFVLEVBQUUsWUFBWTtRQUN4QixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsR0FBRztnQkFDWCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxNQUFNO2dCQUNkLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7S0FDRjtDQUNGLENBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtPcE1hcHBlcn0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QganNvbjogT3BNYXBwZXJbXSA9IFtcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdMb3dlckJvdW5kJyxcbiAgICAnY2F0ZWdvcnknOiAnZXZhbHVhdGlvbicsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAnc29ydGVkU2VxdWVuY2UnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAxLFxuICAgICAgICAnbmFtZSc6ICd2YWx1ZXMnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgJ3RmT3BOYW1lJzogJ1RvcEtWMicsXG4gICAgJ2NhdGVnb3J5JzogJ2V2YWx1YXRpb24nLFxuICAgICdpbnB1dHMnOiBbXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDAsXG4gICAgICAgICduYW1lJzogJ3gnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAxLFxuICAgICAgICAnbmFtZSc6ICdrJyxcbiAgICAgICAgJ3R5cGUnOiAnbnVtYmVyJ1xuICAgICAgfVxuICAgIF0sXG4gICAgJ2F0dHJzJzogW1xuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ3NvcnRlZCcsXG4gICAgICAgICduYW1lJzogJ3NvcnRlZCcsXG4gICAgICAgICd0eXBlJzogJ2Jvb2wnXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgJ3RmT3BOYW1lJzogJ1VwcGVyQm91bmQnLFxuICAgICdjYXRlZ29yeSc6ICdldmFsdWF0aW9uJyxcbiAgICAnaW5wdXRzJzogW1xuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAwLFxuICAgICAgICAnbmFtZSc6ICdzb3J0ZWRTZXF1ZW5jZScsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDEsXG4gICAgICAgICduYW1lJzogJ3ZhbHVlcycsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICAndGZPcE5hbWUnOiAnVW5pcXVlJyxcbiAgICAnY2F0ZWdvcnknOiAnZXZhbHVhdGlvbicsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAneCcsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICAndGZPcE5hbWUnOiAnVW5pcXVlVjInLFxuICAgICdjYXRlZ29yeSc6ICdldmFsdWF0aW9uJyxcbiAgICAnaW5wdXRzJzogW1xuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAwLFxuICAgICAgICAnbmFtZSc6ICd4JyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnYXhpcycsXG4gICAgICAgICd0eXBlJzogJ251bWJlcidcbiAgICAgIH1cbiAgICBdXG4gIH1cbl1cbjtcbiJdfQ==","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'PlaceholderWithDefault',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'default',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'shape',\n                'name': 'shape',\n                'type': 'shape'\n            },\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Placeholder',\n        'category': 'graph',\n        'attrs': [\n            {\n                'tfName': 'shape',\n                'name': 'shape',\n                'type': 'shape'\n            },\n            {\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Const',\n        'category': 'graph'\n    },\n    {\n        'tfOpName': 'Identity',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'IdentityN',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'x',\n                'type': 'tensors'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Snapshot',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Rank',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Size',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Shape',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ShapeN',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'x',\n                'type': 'tensors'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Print',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'data',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'message',\n                'name': 'message',\n                'type': 'string'\n            },\n            {\n                'tfName': 'first_n',\n                'name': 'firstN',\n                'type': 'number',\n                'notSupported': true\n            },\n            {\n                'tfName': 'summarize',\n                'name': 'summarize',\n                'type': 'number',\n                'defaultValue': 3\n            }\n        ]\n    },\n    {\n        'tfOpName': 'NoOp',\n        'category': 'graph',\n        'inputs': []\n    },\n    {\n        'tfOpName': 'StopGradient',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FakeQuantWithMinMaxVars',\n        'category': 'graph',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'min',\n                'name': 'min',\n                'type': 'number'\n            },\n            {\n                'tfName': 'max',\n                'name': 'max',\n                'type': 'number'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'HashTable',\n        'category': 'hash_table',\n        'inputs': [],\n        'attrs': [\n            {\n                'tfName': 'shared_name',\n                'name': 'sharedName',\n                'type': 'string'\n            },\n            {\n                'tfName': 'use_node_name_sharing',\n                'name': 'useNodeNameSharing',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'key_dtype',\n                'name': 'keyDType',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'value_dtype',\n                'name': 'valueDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'HashTableV2',\n        'category': 'hash_table',\n        'inputs': [],\n        'attrs': [\n            {\n                'tfName': 'shared_name',\n                'name': 'sharedName',\n                'type': 'string'\n            },\n            {\n                'tfName': 'use_node_name_sharing',\n                'name': 'useNodeNameSharing',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'key_dtype',\n                'name': 'keyDType',\n                'type': 'dtype'\n            },\n            {\n                'tfName': 'value_dtype',\n                'name': 'valueDType',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LookupTableImport',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'keys',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'values',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'Tin',\n                'name': 'tIn',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'Tout',\n                'name': 'tOut',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LookupTableImportV2',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'keys',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'values',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'Tin',\n                'name': 'tIn',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'Tout',\n                'name': 'tOut',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LookupTableFind',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'keys',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'defaultValue',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'Tin',\n                'name': 'tIn',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'Tout',\n                'name': 'tOut',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LookupTableFindV2',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'keys',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'defaultValue',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'Tin',\n                'name': 'tIn',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'Tout',\n                'name': 'tOut',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LookupTableSize',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LookupTableSizeV2',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'InitializeTable',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'keys',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'values',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'InitializeTableV2',\n        'category': 'hash_table',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tableHandle',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'keys',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'values',\n                'type': 'tensor'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'ResizeBilinear',\n        'category': 'image',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'images',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'size',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'align_corners',\n                'name': 'alignCorners',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'half_pixel_centers',\n                'name': 'halfPixelCenters',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ResizeNearestNeighbor',\n        'category': 'image',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'images',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'size',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'align_corners',\n                'name': 'alignCorners',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'half_pixel_centers',\n                'name': 'halfPixelCenters',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'CropAndResize',\n        'category': 'image',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'image',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'boxes',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'boxInd',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'cropSize',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'method',\n                'name': 'method',\n                'type': 'string'\n            },\n            {\n                'tfName': 'extrapolation_value',\n                'name': 'extrapolationValue',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ImageProjectiveTransformV3',\n        'category': 'image',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'images',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'transforms',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'outputShape',\n                'type': 'number[]'\n            },\n            {\n                'start': 3,\n                'name': 'fillValue',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'interpolation',\n                'name': 'interpolation',\n                'type': 'string'\n            },\n            {\n                'tfName': 'fill_mode',\n                'name': 'fillMode',\n                'type': 'string'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9vcF9saXN0L2ltYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUlILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBZTtJQUM5QjtRQUNFLFVBQVUsRUFBRSxnQkFBZ0I7UUFDNUIsVUFBVSxFQUFFLE9BQU87UUFDbkIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFVBQVU7YUFDbkI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxlQUFlO2dCQUN6QixNQUFNLEVBQUUsY0FBYztnQkFDdEIsTUFBTSxFQUFFLE1BQU07YUFDZjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLE1BQU0sRUFBRSxrQkFBa0I7Z0JBQzFCLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7WUFDRDtnQkFDRSxRQUFRLEVBQUUsR0FBRztnQkFDYixNQUFNLEVBQUUsT0FBTztnQkFDZixNQUFNLEVBQUUsT0FBTztnQkFDZixjQUFjLEVBQUUsSUFBSTthQUNyQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSx1QkFBdUI7UUFDbkMsVUFBVSxFQUFFLE9BQU87UUFDbkIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFVBQVU7YUFDbkI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxlQUFlO2dCQUN6QixNQUFNLEVBQUUsY0FBYztnQkFDdEIsTUFBTSxFQUFFLE1BQU07YUFDZjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLE1BQU0sRUFBRSxrQkFBa0I7Z0JBQzFCLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7WUFDRDtnQkFDRSxRQUFRLEVBQUUsR0FBRztnQkFDYixNQUFNLEVBQUUsT0FBTztnQkFDZixNQUFNLEVBQUUsT0FBTztnQkFDZixjQUFjLEVBQUUsSUFBSTthQUNyQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxlQUFlO1FBQzNCLFVBQVUsRUFBRSxPQUFPO1FBQ25CLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxPQUFPO2dCQUNmLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE9BQU87Z0JBQ2YsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsVUFBVTtnQkFDbEIsTUFBTSxFQUFFLFVBQVU7YUFDbkI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixNQUFNLEVBQUUsb0JBQW9CO2dCQUM1QixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSw0QkFBNEI7UUFDeEMsVUFBVSxFQUFFLE9BQU87UUFDbkIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFlBQVk7Z0JBQ3BCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLGFBQWE7Z0JBQ3JCLE1BQU0sRUFBRSxVQUFVO2FBQ25CO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFdBQVc7Z0JBQ25CLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7UUFDRCxPQUFPLEVBQUU7WUFDUDtnQkFDRSxRQUFRLEVBQUUsZUFBZTtnQkFDekIsTUFBTSxFQUFFLGVBQWU7Z0JBQ3ZCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO0tBQ0Y7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7T3BNYXBwZXJ9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGpzb246IE9wTWFwcGVyW10gPSBbXG4gIHtcbiAgICAndGZPcE5hbWUnOiAnUmVzaXplQmlsaW5lYXInLFxuICAgICdjYXRlZ29yeSc6ICdpbWFnZScsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAnaW1hZ2VzJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnc2l6ZScsXG4gICAgICAgICd0eXBlJzogJ251bWJlcltdJ1xuICAgICAgfVxuICAgIF0sXG4gICAgJ2F0dHJzJzogW1xuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ2FsaWduX2Nvcm5lcnMnLFxuICAgICAgICAnbmFtZSc6ICdhbGlnbkNvcm5lcnMnLFxuICAgICAgICAndHlwZSc6ICdib29sJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3RmTmFtZSc6ICdoYWxmX3BpeGVsX2NlbnRlcnMnLFxuICAgICAgICAnbmFtZSc6ICdoYWxmUGl4ZWxDZW50ZXJzJyxcbiAgICAgICAgJ3R5cGUnOiAnYm9vbCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAnVCcsXG4gICAgICAgICduYW1lJzogJ2R0eXBlJyxcbiAgICAgICAgJ3R5cGUnOiAnZHR5cGUnLFxuICAgICAgICAnbm90U3VwcG9ydGVkJzogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdSZXNpemVOZWFyZXN0TmVpZ2hib3InLFxuICAgICdjYXRlZ29yeSc6ICdpbWFnZScsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAnaW1hZ2VzJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnc2l6ZScsXG4gICAgICAgICd0eXBlJzogJ251bWJlcltdJ1xuICAgICAgfVxuICAgIF0sXG4gICAgJ2F0dHJzJzogW1xuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ2FsaWduX2Nvcm5lcnMnLFxuICAgICAgICAnbmFtZSc6ICdhbGlnbkNvcm5lcnMnLFxuICAgICAgICAndHlwZSc6ICdib29sJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3RmTmFtZSc6ICdoYWxmX3BpeGVsX2NlbnRlcnMnLFxuICAgICAgICAnbmFtZSc6ICdoYWxmUGl4ZWxDZW50ZXJzJyxcbiAgICAgICAgJ3R5cGUnOiAnYm9vbCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAnVCcsXG4gICAgICAgICduYW1lJzogJ2R0eXBlJyxcbiAgICAgICAgJ3R5cGUnOiAnZHR5cGUnLFxuICAgICAgICAnbm90U3VwcG9ydGVkJzogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdDcm9wQW5kUmVzaXplJyxcbiAgICAnY2F0ZWdvcnknOiAnaW1hZ2UnLFxuICAgICdpbnB1dHMnOiBbXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDAsXG4gICAgICAgICduYW1lJzogJ2ltYWdlJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnYm94ZXMnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAyLFxuICAgICAgICAnbmFtZSc6ICdib3hJbmQnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAzLFxuICAgICAgICAnbmFtZSc6ICdjcm9wU2l6ZScsXG4gICAgICAgICd0eXBlJzogJ251bWJlcltdJ1xuICAgICAgfVxuICAgIF0sXG4gICAgJ2F0dHJzJzogW1xuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ21ldGhvZCcsXG4gICAgICAgICduYW1lJzogJ21ldGhvZCcsXG4gICAgICAgICd0eXBlJzogJ3N0cmluZydcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAnZXh0cmFwb2xhdGlvbl92YWx1ZScsXG4gICAgICAgICduYW1lJzogJ2V4dHJhcG9sYXRpb25WYWx1ZScsXG4gICAgICAgICd0eXBlJzogJ251bWJlcidcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICAndGZPcE5hbWUnOiAnSW1hZ2VQcm9qZWN0aXZlVHJhbnNmb3JtVjMnLFxuICAgICdjYXRlZ29yeSc6ICdpbWFnZScsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAnaW1hZ2VzJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAndHJhbnNmb3JtcycsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDIsXG4gICAgICAgICduYW1lJzogJ291dHB1dFNoYXBlJyxcbiAgICAgICAgJ3R5cGUnOiAnbnVtYmVyW10nXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAzLFxuICAgICAgICAnbmFtZSc6ICdmaWxsVmFsdWUnLFxuICAgICAgICAndHlwZSc6ICdudW1iZXInXG4gICAgICB9XG4gICAgXSxcbiAgICAnYXR0cnMnOiBbXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAnaW50ZXJwb2xhdGlvbicsXG4gICAgICAgICduYW1lJzogJ2ludGVycG9sYXRpb24nLFxuICAgICAgICAndHlwZSc6ICdzdHJpbmcnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ2ZpbGxfbW9kZScsXG4gICAgICAgICduYW1lJzogJ2ZpbGxNb2RlJyxcbiAgICAgICAgJ3R5cGUnOiAnc3RyaW5nJ1xuICAgICAgfVxuICAgIF1cbiAgfVxuXTtcbiJdfQ==","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Equal',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'NotEqual',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Greater',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'GreaterEqual',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Less',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LessEqual',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LogicalAnd',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LogicalNot',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LogicalOr',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Select',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'condition',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SelectV2',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'condition',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'BitwiseAnd',\n        'category': 'logical',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'y',\n                'type': 'tensor'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': '_FusedMatMul',\n        'category': 'matrices',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'end': 0,\n                'name': 'args',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'num_args',\n                'name': 'numArgs',\n                'type': 'number'\n            },\n            {\n                'tfName': 'fused_ops',\n                'name': 'fusedOps',\n                'type': 'string[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.0001\n            },\n            {\n                'tfName': 'transpose_a',\n                'name': 'transposeA',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'transpose_b',\n                'name': 'transposeB',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'leakyrelu_alpha',\n                'name': 'leakyreluAlpha',\n                'type': 'number',\n                'defaultValue': 0.2\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'MatMul',\n        'category': 'matrices',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'transpose_a',\n                'name': 'transposeA',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'transpose_b',\n                'name': 'transposeB',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'BatchMatMul',\n        'category': 'matrices',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'adj_x',\n                'name': 'transposeA',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'adj_y',\n                'name': 'transposeB',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'BatchMatMulV2',\n        'category': 'matrices',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'b',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'adj_x',\n                'name': 'transposeA',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'adj_y',\n                'name': 'transposeB',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Transpose',\n        'category': 'matrices',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'perm',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Einsum',\n        'category': 'matrices',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'tensors',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'equation',\n                'name': 'equation',\n                'type': 'string'\n            },\n            {\n                'tfName': 'N',\n                'name': 'n',\n                'type': 'number',\n                'defaultValue': 2\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'MatrixBandPart',\n        'category': 'matrices',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'a',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'numLower',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'numUpper',\n                'type': 'tensor'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'EuclideanNorm',\n        'category': 'normalization',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool',\n                'defaultValue': false\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FusedBatchNorm',\n        'category': 'normalization',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'scale',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'offset',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'mean',\n                'type': 'tensor'\n            },\n            {\n                'start': 4,\n                'name': 'variance',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.001\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FusedBatchNormV2',\n        'category': 'normalization',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'scale',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'offset',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'mean',\n                'type': 'tensor'\n            },\n            {\n                'start': 4,\n                'name': 'variance',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.001\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FusedBatchNormV3',\n        'category': 'normalization',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'scale',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'offset',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'mean',\n                'type': 'tensor'\n            },\n            {\n                'start': 4,\n                'name': 'variance',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.001\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LRN',\n        'category': 'normalization',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'depth_radius',\n                'name': 'radius',\n                'type': 'number',\n                'defaultValue': 5\n            },\n            {\n                'tfName': 'bias',\n                'name': 'bias',\n                'type': 'number',\n                'defaultValue': 1\n            },\n            {\n                'tfName': 'alpha',\n                'name': 'alpha',\n                'type': 'number',\n                'defaultValue': 1\n            },\n            {\n                'tfName': 'beta',\n                'name': 'beta',\n                'type': 'number',\n                'defaultValue': 0.5\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Softmax',\n        'category': 'normalization',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LogSoftmax',\n        'category': 'normalization',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Bincount',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'size',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'weights',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'DenseBincount',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'size',\n                'type': 'number'\n            },\n            {\n                'start': 2,\n                'name': 'weights',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'binary_output',\n                'name': 'binaryOutput',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Max',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Mean',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Min',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Sum',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'All',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Any',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ArgMax',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ArgMin',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Prod',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Cumprod',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'exclusive',\n                'name': 'exclusive',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'reverse',\n                'name': 'reverse',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Cumsum',\n        'category': 'reduction',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'exclusive',\n                'name': 'exclusive',\n                'type': 'bool'\n            },\n            {\n                'tfName': 'reverse',\n                'name': 'reverse',\n                'type': 'bool'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'ConcatV2',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'end': -1,\n                'name': 'tensors',\n                'type': 'tensors'\n            },\n            {\n                'start': -1,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'N',\n                'name': 'n',\n                'type': 'number',\n                'defaultValue': 2\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Concat',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 1,\n                'end': 0,\n                'name': 'tensors',\n                'type': 'tensors'\n            },\n            {\n                'start': 0,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'N',\n                'name': 'n',\n                'type': 'number',\n                'defaultValue': 2\n            }\n        ]\n    },\n    {\n        'tfOpName': 'GatherV2',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'axis',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'batch_dims',\n                'name': 'batchDims',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Gather',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'validate_indices',\n                'name': 'validateIndices',\n                'type': 'bool',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Reverse',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'dims',\n                'type': 'bool[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ReverseV2',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Slice',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'begin',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'size',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'StridedSlice',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'begin',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'end',\n                'type': 'number[]'\n            },\n            {\n                'start': 3,\n                'name': 'strides',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'begin_mask',\n                'name': 'beginMask',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'end_mask',\n                'name': 'endMask',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'new_axis_mask',\n                'name': 'newAxisMask',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'ellipsis_mask',\n                'name': 'ellipsisMask',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'shrink_axis_mask',\n                'name': 'shrinkAxisMask',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Pack',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'end': 0,\n                'name': 'tensors',\n                'type': 'tensors'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'axis',\n                'name': 'axis',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Unpack',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'axis',\n                'name': 'axis',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'num',\n                'name': 'num',\n                'type': 'number',\n                'defaultValue': 0,\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Tile',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'reps',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Split',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'axis',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'start': 1,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'num_split',\n                'name': 'numOrSizeSplits',\n                'type': 'number',\n                'defaultValue': 1\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SplitV',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'numOrSizeSplits',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'axis',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ScatterNd',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'indices',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'values',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'GatherNd',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SparseToDense',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'sparseIndices',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'outputShape',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'sparseValues',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'defaultValue',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'validate_indices',\n                'name': 'validateIndices',\n                'type': 'bool',\n                'defaultValue': false,\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorScatterUpdate',\n        'category': 'slice_join',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'tensor',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'values',\n                'type': 'tensor'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'SparseFillEmptyRows',\n        'category': 'sparse',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'indices',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'values',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'denseShape',\n                'type': 'tensor'\n            },\n            {\n                'start': 3,\n                'name': 'defaultValue',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SparseReshape',\n        'category': 'sparse',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'inputIndices',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'inputShape',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'newShape',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SparseSegmentMean',\n        'category': 'sparse',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'data',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'segmentIds',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SparseSegmentSum',\n        'category': 'sparse',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'data',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'indices',\n                'type': 'tensor'\n            },\n            {\n                'start': 2,\n                'name': 'segmentIds',\n                'type': 'tensor'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhcnNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvb3BfbGlzdC9zcGFyc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFlO0lBQzlCO1FBQ0UsVUFBVSxFQUFFLHFCQUFxQjtRQUNqQyxVQUFVLEVBQUUsUUFBUTtRQUNwQixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsU0FBUztnQkFDakIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsY0FBYztnQkFDdEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsZUFBZTtRQUMzQixVQUFVLEVBQUUsUUFBUTtRQUNwQixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsY0FBYztnQkFDdEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsVUFBVTtnQkFDbEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxHQUFHO2dCQUNiLE1BQU0sRUFBRSxPQUFPO2dCQUNmLE1BQU0sRUFBRSxPQUFPO2dCQUNmLGNBQWMsRUFBRSxJQUFJO2FBQ3JCO1NBQ0Y7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLG1CQUFtQjtRQUMvQixVQUFVLEVBQUUsUUFBUTtRQUNwQixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsTUFBTTtnQkFDZCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxrQkFBa0I7UUFDOUIsVUFBVSxFQUFFLFFBQVE7UUFDcEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsU0FBUztnQkFDakIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge09wTWFwcGVyfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBqc29uOiBPcE1hcHBlcltdID0gW1xuICB7XG4gICAgJ3RmT3BOYW1lJzogJ1NwYXJzZUZpbGxFbXB0eVJvd3MnLFxuICAgICdjYXRlZ29yeSc6ICdzcGFyc2UnLFxuICAgICdpbnB1dHMnOiBbXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDAsXG4gICAgICAgICduYW1lJzogJ2luZGljZXMnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAxLFxuICAgICAgICAnbmFtZSc6ICd2YWx1ZXMnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAyLFxuICAgICAgICAnbmFtZSc6ICdkZW5zZVNoYXBlJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMyxcbiAgICAgICAgJ25hbWUnOiAnZGVmYXVsdFZhbHVlJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdTcGFyc2VSZXNoYXBlJyxcbiAgICAnY2F0ZWdvcnknOiAnc3BhcnNlJyxcbiAgICAnaW5wdXRzJzogW1xuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAwLFxuICAgICAgICAnbmFtZSc6ICdpbnB1dEluZGljZXMnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAxLFxuICAgICAgICAnbmFtZSc6ICdpbnB1dFNoYXBlJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMixcbiAgICAgICAgJ25hbWUnOiAnbmV3U2hhcGUnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9XG4gICAgXSxcbiAgICAnYXR0cnMnOiBbXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAnVCcsXG4gICAgICAgICduYW1lJzogJ2R0eXBlJyxcbiAgICAgICAgJ3R5cGUnOiAnZHR5cGUnLFxuICAgICAgICAnbm90U3VwcG9ydGVkJzogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdTcGFyc2VTZWdtZW50TWVhbicsXG4gICAgJ2NhdGVnb3J5JzogJ3NwYXJzZScsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAnZGF0YScsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDEsXG4gICAgICAgICduYW1lJzogJ2luZGljZXMnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAyLFxuICAgICAgICAnbmFtZSc6ICdzZWdtZW50SWRzJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdTcGFyc2VTZWdtZW50U3VtJyxcbiAgICAnY2F0ZWdvcnknOiAnc3BhcnNlJyxcbiAgICAnaW5wdXRzJzogW1xuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAwLFxuICAgICAgICAnbmFtZSc6ICdkYXRhJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnaW5kaWNlcycsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDIsXG4gICAgICAgICduYW1lJzogJ3NlZ21lbnRJZHMnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9XG4gICAgXVxuICB9XG5dO1xuIl19","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'FFT',\n        'category': 'spectral',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'IFFT',\n        'category': 'spectral',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'RFFT',\n        'category': 'spectral',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'fft_length',\n                'type': 'number',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'IRFFT',\n        'category': 'spectral',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'fft_length',\n                'type': 'number',\n                'notSupported': true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY3RyYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9vcF9saXN0L3NwZWN0cmFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUlILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBZTtJQUM5QjtRQUNFLFVBQVUsRUFBRSxLQUFLO1FBQ2pCLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxHQUFHO2dCQUNYLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLE1BQU07UUFDbEIsVUFBVSxFQUFFLFVBQVU7UUFDdEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsTUFBTTtRQUNsQixVQUFVLEVBQUUsVUFBVTtRQUN0QixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsR0FBRztnQkFDWCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsY0FBYyxFQUFFLElBQUk7YUFDckI7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsT0FBTztRQUNuQixVQUFVLEVBQUUsVUFBVTtRQUN0QixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsR0FBRztnQkFDWCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsY0FBYyxFQUFFLElBQUk7YUFDckI7U0FDRjtLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge09wTWFwcGVyfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBqc29uOiBPcE1hcHBlcltdID0gW1xuICB7XG4gICAgJ3RmT3BOYW1lJzogJ0ZGVCcsXG4gICAgJ2NhdGVnb3J5JzogJ3NwZWN0cmFsJyxcbiAgICAnaW5wdXRzJzogW1xuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAwLFxuICAgICAgICAnbmFtZSc6ICd4JyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdJRkZUJyxcbiAgICAnY2F0ZWdvcnknOiAnc3BlY3RyYWwnLFxuICAgICdpbnB1dHMnOiBbXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDAsXG4gICAgICAgICduYW1lJzogJ3gnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgJ3RmT3BOYW1lJzogJ1JGRlQnLFxuICAgICdjYXRlZ29yeSc6ICdzcGVjdHJhbCcsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAneCcsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDEsXG4gICAgICAgICduYW1lJzogJ2ZmdF9sZW5ndGgnLFxuICAgICAgICAndHlwZSc6ICdudW1iZXInLFxuICAgICAgICAnbm90U3VwcG9ydGVkJzogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgICd0Zk9wTmFtZSc6ICdJUkZGVCcsXG4gICAgJ2NhdGVnb3J5JzogJ3NwZWN0cmFsJyxcbiAgICAnaW5wdXRzJzogW1xuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAwLFxuICAgICAgICAnbmFtZSc6ICd4JyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnZmZ0X2xlbmd0aCcsXG4gICAgICAgICd0eXBlJzogJ251bWJlcicsXG4gICAgICAgICdub3RTdXBwb3J0ZWQnOiB0cnVlXG4gICAgICB9XG4gICAgXVxuICB9XG5dO1xuIl19","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'StaticRegexReplace',\n        'category': 'string',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'input',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'pattern',\n                'name': 'pattern',\n                'type': 'string'\n            },\n            {\n                'tfName': 'rewrite',\n                'name': 'rewrite',\n                'type': 'string'\n            },\n            {\n                'tfName': 'replace_global',\n                'name': 'replaceGlobal',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'StringNGrams',\n        'category': 'string',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'data',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'dataSplits',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'separator',\n                'name': 'separator',\n                'type': 'string'\n            },\n            {\n                'tfName': 'ngram_widths',\n                'name': 'nGramWidths',\n                'type': 'number[]'\n            },\n            {\n                'tfName': 'left_pad',\n                'name': 'leftPad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'right_pad',\n                'name': 'rightPad',\n                'type': 'string'\n            },\n            {\n                'tfName': 'pad_width',\n                'name': 'padWidth',\n                'type': 'number'\n            },\n            {\n                'tfName': 'preserve_short_sequences',\n                'name': 'preserveShortSequences',\n                'type': 'bool'\n            }\n        ],\n        'outputs': [\n            'ngrams',\n            'ngrams_splits'\n        ]\n    },\n    {\n        'tfOpName': 'StringSplit',\n        'category': 'string',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'input',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'delimiter',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'skip_empty',\n                'name': 'skipEmpty',\n                'type': 'bool'\n            }\n        ],\n        'outputs': [\n            'indices',\n            'values',\n            'shape'\n        ]\n    },\n    {\n        'tfOpName': 'StringToHashBucketFast',\n        'category': 'string',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'input',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'num_buckets',\n                'name': 'numBuckets',\n                'type': 'number'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvb3BfbGlzdC9zdHJpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFlO0lBQzlCO1FBQ0UsVUFBVSxFQUFFLG9CQUFvQjtRQUNoQyxVQUFVLEVBQUUsUUFBUTtRQUNwQixRQUFRLEVBQUU7WUFDUjtnQkFDQSxPQUFPLEVBQUUsQ0FBQztnQkFDUixNQUFNLEVBQUUsT0FBTztnQkFDZixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO1FBQ0QsT0FBTyxFQUFFO1lBQ1A7Z0JBQ0UsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxTQUFTO2dCQUNuQixNQUFNLEVBQUUsU0FBUztnQkFDakIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixNQUFNLEVBQUUsZUFBZTtnQkFDdkIsTUFBTSxFQUFFLE1BQU07YUFDZjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxjQUFjO1FBQzFCLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxNQUFNO2dCQUNkLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFlBQVk7Z0JBQ3BCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7UUFDRCxPQUFPLEVBQUU7WUFDUDtnQkFDRSxRQUFRLEVBQUUsV0FBVztnQkFDckIsTUFBTSxFQUFFLFdBQVc7Z0JBQ25CLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLE1BQU0sRUFBRSxhQUFhO2dCQUNyQixNQUFNLEVBQUUsVUFBVTthQUNuQjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxVQUFVO2dCQUNwQixNQUFNLEVBQUUsU0FBUztnQkFDakIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUsV0FBVztnQkFDckIsTUFBTSxFQUFFLFVBQVU7Z0JBQ2xCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLFFBQVEsRUFBRSwwQkFBMEI7Z0JBQ3BDLE1BQU0sRUFBRSx3QkFBd0I7Z0JBQ2hDLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7U0FDRjtRQUNELFNBQVMsRUFBRTtZQUNULFFBQVE7WUFDUixlQUFlO1NBQ2hCO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxhQUFhO1FBQ3pCLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxPQUFPO2dCQUNmLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFdBQVc7Z0JBQ25CLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7UUFDRCxPQUFPLEVBQUU7WUFDUDtnQkFDRSxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsTUFBTSxFQUFFLFdBQVc7Z0JBQ25CLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7U0FDRjtRQUNELFNBQVMsRUFBRTtZQUNULFNBQVM7WUFDVCxRQUFRO1lBQ1IsT0FBTztTQUNSO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSx3QkFBd0I7UUFDcEMsVUFBVSxFQUFFLFFBQVE7UUFDcEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE9BQU87Z0JBQ2YsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxhQUFhO2dCQUN2QixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0NBQ0YsQ0FDQSIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge09wTWFwcGVyfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBqc29uOiBPcE1hcHBlcltdID0gW1xuICB7XG4gICAgJ3RmT3BOYW1lJzogJ1N0YXRpY1JlZ2V4UmVwbGFjZScsXG4gICAgJ2NhdGVnb3J5JzogJ3N0cmluZycsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICdzdGFydCc6IDAsXG4gICAgICAgICduYW1lJzogJ2lucHV0JyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfVxuICAgIF0sXG4gICAgJ2F0dHJzJzogW1xuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ3BhdHRlcm4nLFxuICAgICAgICAnbmFtZSc6ICdwYXR0ZXJuJyxcbiAgICAgICAgJ3R5cGUnOiAnc3RyaW5nJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3RmTmFtZSc6ICdyZXdyaXRlJyxcbiAgICAgICAgJ25hbWUnOiAncmV3cml0ZScsXG4gICAgICAgICd0eXBlJzogJ3N0cmluZydcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAncmVwbGFjZV9nbG9iYWwnLFxuICAgICAgICAnbmFtZSc6ICdyZXBsYWNlR2xvYmFsJyxcbiAgICAgICAgJ3R5cGUnOiAnYm9vbCdcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICAndGZPcE5hbWUnOiAnU3RyaW5nTkdyYW1zJyxcbiAgICAnY2F0ZWdvcnknOiAnc3RyaW5nJyxcbiAgICAnaW5wdXRzJzogW1xuICAgICAge1xuICAgICAgICAnc3RhcnQnOiAwLFxuICAgICAgICAnbmFtZSc6ICdkYXRhJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnZGF0YVNwbGl0cycsXG4gICAgICAgICd0eXBlJzogJ3RlbnNvcidcbiAgICAgIH1cbiAgICBdLFxuICAgICdhdHRycyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3RmTmFtZSc6ICdzZXBhcmF0b3InLFxuICAgICAgICAnbmFtZSc6ICdzZXBhcmF0b3InLFxuICAgICAgICAndHlwZSc6ICdzdHJpbmcnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ25ncmFtX3dpZHRocycsXG4gICAgICAgICduYW1lJzogJ25HcmFtV2lkdGhzJyxcbiAgICAgICAgJ3R5cGUnOiAnbnVtYmVyW10nXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ2xlZnRfcGFkJyxcbiAgICAgICAgJ25hbWUnOiAnbGVmdFBhZCcsXG4gICAgICAgICd0eXBlJzogJ3N0cmluZydcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAncmlnaHRfcGFkJyxcbiAgICAgICAgJ25hbWUnOiAncmlnaHRQYWQnLFxuICAgICAgICAndHlwZSc6ICdzdHJpbmcnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ3BhZF93aWR0aCcsXG4gICAgICAgICduYW1lJzogJ3BhZFdpZHRoJyxcbiAgICAgICAgJ3R5cGUnOiAnbnVtYmVyJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3RmTmFtZSc6ICdwcmVzZXJ2ZV9zaG9ydF9zZXF1ZW5jZXMnLFxuICAgICAgICAnbmFtZSc6ICdwcmVzZXJ2ZVNob3J0U2VxdWVuY2VzJyxcbiAgICAgICAgJ3R5cGUnOiAnYm9vbCdcbiAgICAgIH1cbiAgICBdLFxuICAgICdvdXRwdXRzJzogW1xuICAgICAgJ25ncmFtcycsXG4gICAgICAnbmdyYW1zX3NwbGl0cydcbiAgICBdXG4gIH0sXG4gIHtcbiAgICAndGZPcE5hbWUnOiAnU3RyaW5nU3BsaXQnLFxuICAgICdjYXRlZ29yeSc6ICdzdHJpbmcnLFxuICAgICdpbnB1dHMnOiBbXG4gICAgICB7XG4gICAgICAgICdzdGFydCc6IDAsXG4gICAgICAgICduYW1lJzogJ2lucHV0JyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMSxcbiAgICAgICAgJ25hbWUnOiAnZGVsaW1pdGVyJyxcbiAgICAgICAgJ3R5cGUnOiAndGVuc29yJ1xuICAgICAgfVxuICAgIF0sXG4gICAgJ2F0dHJzJzogW1xuICAgICAge1xuICAgICAgICAndGZOYW1lJzogJ3NraXBfZW1wdHknLFxuICAgICAgICAnbmFtZSc6ICdza2lwRW1wdHknLFxuICAgICAgICAndHlwZSc6ICdib29sJ1xuICAgICAgfVxuICAgIF0sXG4gICAgJ291dHB1dHMnOiBbXG4gICAgICAnaW5kaWNlcycsXG4gICAgICAndmFsdWVzJyxcbiAgICAgICdzaGFwZSdcbiAgICBdXG4gIH0sXG4gIHtcbiAgICAndGZPcE5hbWUnOiAnU3RyaW5nVG9IYXNoQnVja2V0RmFzdCcsXG4gICAgJ2NhdGVnb3J5JzogJ3N0cmluZycsXG4gICAgJ2lucHV0cyc6IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0YXJ0JzogMCxcbiAgICAgICAgJ25hbWUnOiAnaW5wdXQnLFxuICAgICAgICAndHlwZSc6ICd0ZW5zb3InXG4gICAgICB9XG4gICAgXSxcbiAgICAnYXR0cnMnOiBbXG4gICAgICB7XG4gICAgICAgICd0Zk5hbWUnOiAnbnVtX2J1Y2tldHMnLFxuICAgICAgICAnbmFtZSc6ICdudW1CdWNrZXRzJyxcbiAgICAgICAgJ3R5cGUnOiAnbnVtYmVyJ1xuICAgICAgfVxuICAgIF1cbiAgfVxuXVxuO1xuIl19","/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Cast',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'SrcT',\n                'name': 'sdtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'DstT',\n                'name': 'dtype',\n                'type': 'dtype'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'ExpandDims',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'axis',\n                'type': 'number'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'MirrorPad',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'padding',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'mode',\n                'name': 'mode',\n                'type': 'string'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Pad',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'padding',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'constant_value',\n                'name': 'constantValue',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ]\n    },\n    {\n        'tfOpName': 'PadV2',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'padding',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'constantValue',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Reshape',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'EnsureShape',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Squeeze',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'axis',\n                'tfDeprecatedName': 'squeeze_dims',\n                'name': 'axis',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'SpaceToBatchND',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'blockShape',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'paddings',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'BatchToSpaceND',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'blockShape',\n                'type': 'number[]'\n            },\n            {\n                'start': 2,\n                'name': 'crops',\n                'type': 'number[]'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'DepthToSpace',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': [\n            {\n                'tfName': 'block_size',\n                'name': 'blockSize',\n                'type': 'number'\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'BroadcastTo',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 'x',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 'shape',\n                'type': 'number[]'\n            }\n        ],\n        'attrs': []\n    },\n    {\n        'tfOpName': 'BroadcastArgs',\n        'category': 'transformation',\n        'inputs': [\n            {\n                'start': 0,\n                'name': 's0',\n                'type': 'tensor'\n            },\n            {\n                'start': 1,\n                'name': 's1',\n                'type': 'tensor'\n            }\n        ],\n        'attrs': []\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport * as tensorflow from '../data/compiled_api';\nimport { getRegisteredOp } from './custom_op/register';\nimport { getNodeNameAndIndex } from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as sparse from './op_list/sparse';\nimport * as spectral from './op_list/spectral';\nimport * as string from './op_list/string';\nimport * as transformation from './op_list/transformation';\nexport class OperationMapper {\n    // Singleton instance for the mapper\n    static get Instance() {\n        return this._instance || (this._instance = new this());\n    }\n    // Loads the op mapping from the JSON file.\n    constructor() {\n        const ops = [\n            arithmetic, basicMath, control, convolution, creation, dynamic,\n            evaluation, graph, hashTable, image, logical, matrices, normalization,\n            reduction, sliceJoin, sparse, spectral, string, transformation\n        ];\n        const mappersJson = [].concat(...ops.map(op => op.json));\n        this.opMappers = mappersJson.reduce((map, mapper) => {\n            map[mapper.tfOpName] = mapper;\n            return map;\n        }, {});\n    }\n    // Converts the model inference graph from Tensorflow GraphDef to local\n    // representation for TensorFlow.js API\n    transformGraph(graph, signature = {}) {\n        const tfNodes = graph.node;\n        const placeholders = [];\n        const weights = [];\n        const initNodes = [];\n        const nodes = tfNodes.reduce((map, node) => {\n            map[node.name] = this.mapNode(node);\n            if (node.op.startsWith('Placeholder')) {\n                placeholders.push(map[node.name]);\n            }\n            else if (node.op === 'Const') {\n                weights.push(map[node.name]);\n            }\n            else if (node.input == null || node.input.length === 0) {\n                initNodes.push(map[node.name]);\n            }\n            return map;\n        }, {});\n        let inputs = [];\n        const outputs = [];\n        let inputNodeNameToKey = {};\n        let outputNodeNameToKey = {};\n        if (signature != null) {\n            inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n            outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n        }\n        const allNodes = Object.keys(nodes);\n        allNodes.forEach(key => {\n            const node = nodes[key];\n            node.inputNames.forEach((name, index) => {\n                const [nodeName, , outputName] = getNodeNameAndIndex(name);\n                const inputNode = nodes[nodeName];\n                if (inputNode.outputs != null) {\n                    const outputIndex = inputNode.outputs.indexOf(outputName);\n                    if (outputIndex !== -1) {\n                        const inputName = `${nodeName}:${outputIndex}`;\n                        // update the input name to use the mapped output index directly.\n                        node.inputNames[index] = inputName;\n                    }\n                }\n                node.inputs.push(inputNode);\n                inputNode.children.push(node);\n            });\n        });\n        // if signature has not outputs set, add any node that does not have\n        // outputs.\n        if (Object.keys(outputNodeNameToKey).length === 0) {\n            allNodes.forEach(key => {\n                const node = nodes[key];\n                if (node.children.length === 0) {\n                    outputs.push(node);\n                }\n            });\n        }\n        else {\n            Object.keys(outputNodeNameToKey).forEach(name => {\n                const [nodeName,] = getNodeNameAndIndex(name);\n                const node = nodes[nodeName];\n                if (node != null) {\n                    node.signatureKey = outputNodeNameToKey[name];\n                    outputs.push(node);\n                }\n            });\n        }\n        if (Object.keys(inputNodeNameToKey).length > 0) {\n            Object.keys(inputNodeNameToKey).forEach(name => {\n                const [nodeName,] = getNodeNameAndIndex(name);\n                const node = nodes[nodeName];\n                if (node) {\n                    node.signatureKey = inputNodeNameToKey[name];\n                    inputs.push(node);\n                }\n            });\n        }\n        else {\n            inputs = placeholders;\n        }\n        let functions = {};\n        if (graph.library != null && graph.library.function != null) {\n            functions = graph.library.function.reduce((functions, func) => {\n                functions[func.signature.name] = this.mapFunction(func);\n                return functions;\n            }, {});\n        }\n        const result = { nodes, inputs, outputs, weights, placeholders, signature, functions };\n        if (initNodes.length > 0) {\n            result.initNodes = initNodes;\n        }\n        return result;\n    }\n    mapSignatureEntries(entries) {\n        return Object.keys(entries || {})\n            .reduce((prev, curr) => {\n            prev[entries[curr].name] = curr;\n            return prev;\n        }, {});\n    }\n    mapNode(node) {\n        // Unsupported ops will cause an error at run-time (not parse time), since\n        // they may not be used by the actual execution subgraph.\n        const mapper = getRegisteredOp(node.op) || this.opMappers[node.op] || {};\n        if (node.attr == null) {\n            node.attr = {};\n        }\n        const newNode = {\n            name: node.name,\n            op: node.op,\n            category: mapper.category,\n            inputNames: (node.input ||\n                []).map(input => input.startsWith('^') ? input.slice(1) : input),\n            inputs: [],\n            children: [],\n            inputParams: {},\n            attrParams: {},\n            rawAttrs: node.attr,\n            outputs: mapper.outputs\n        };\n        if (mapper.inputs != null) {\n            newNode.inputParams =\n                mapper.inputs.reduce((map, param) => {\n                    map[param.name] = {\n                        type: param.type,\n                        inputIndexStart: param.start,\n                        inputIndexEnd: param.end\n                    };\n                    return map;\n                }, {});\n        }\n        if (mapper.attrs != null) {\n            newNode.attrParams =\n                mapper.attrs.reduce((map, param) => {\n                    const type = param.type;\n                    let value = undefined;\n                    switch (param.type) {\n                        case 'string':\n                            value = getStringParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'string[]':\n                            value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'number':\n                            value = getNumberParam(node.attr, param.tfName, (param.defaultValue || 0));\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'number[]':\n                            value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'bool':\n                            value = getBoolParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'bool[]':\n                            value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'shape':\n                            value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'shape[]':\n                            value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'dtype':\n                            value = getDtypeParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'dtype[]':\n                            value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'func':\n                            value = getFuncParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getFuncParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'tensor':\n                        case 'tensors':\n                            break;\n                        default:\n                            throw new Error(`Unsupported param type: ${param.type} for op: ${node.op}`);\n                    }\n                    map[param.name] = { value, type };\n                    return map;\n                }, {});\n        }\n        return newNode;\n    }\n    // map the TFunctionDef to TFJS graph object\n    mapFunction(functionDef) {\n        const tfNodes = functionDef.nodeDef;\n        const placeholders = [];\n        const weights = [];\n        let nodes = {};\n        if (tfNodes != null) {\n            nodes = tfNodes.reduce((map, node) => {\n                map[node.name] = this.mapNode(node);\n                if (node.op === 'Const') {\n                    weights.push(map[node.name]);\n                }\n                return map;\n            }, {});\n        }\n        const inputs = [];\n        const outputs = [];\n        functionDef.signature.inputArg.forEach(arg => {\n            const [nodeName,] = getNodeNameAndIndex(arg.name);\n            const node = {\n                name: nodeName,\n                op: 'Placeholder',\n                inputs: [],\n                inputNames: [],\n                category: 'graph',\n                inputParams: {},\n                attrParams: { dtype: { value: parseDtypeParam(arg.type), type: 'dtype' } },\n                children: []\n            };\n            node.signatureKey = arg.name;\n            inputs.push(node);\n            nodes[nodeName] = node;\n        });\n        const allNodes = Object.keys(nodes);\n        allNodes.forEach(key => {\n            const node = nodes[key];\n            node.inputNames.forEach((name, index) => {\n                const [nodeName, , outputName] = getNodeNameAndIndex(name);\n                const inputNode = nodes[nodeName];\n                if (inputNode.outputs != null) {\n                    const outputIndex = inputNode.outputs.indexOf(outputName);\n                    if (outputIndex !== -1) {\n                        const inputName = `${nodeName}:${outputIndex}`;\n                        // update the input name to use the mapped output index directly.\n                        node.inputNames[index] = inputName;\n                    }\n                }\n                node.inputs.push(inputNode);\n                inputNode.children.push(node);\n            });\n        });\n        const returnNodeMap = functionDef.ret;\n        functionDef.signature.outputArg.forEach(output => {\n            const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n            const node = nodes[nodeName];\n            if (node != null) {\n                node.defaultOutput = index;\n                outputs.push(node);\n            }\n        });\n        const signature = this.mapArgsToSignature(functionDef);\n        return { nodes, inputs, outputs, weights, placeholders, signature };\n    }\n    mapArgsToSignature(functionDef) {\n        return {\n            methodName: functionDef.signature.name,\n            inputs: functionDef.signature.inputArg.reduce((map, arg) => {\n                map[arg.name] = this.mapArgToTensorInfo(arg);\n                return map;\n            }, {}),\n            outputs: functionDef.signature.outputArg.reduce((map, arg) => {\n                map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n                return map;\n            }, {}),\n        };\n    }\n    mapArgToTensorInfo(arg, nameMap) {\n        let name = arg.name;\n        if (nameMap != null) {\n            name = nameMap[name];\n        }\n        return { name, dtype: arg.type };\n    }\n}\nexport function decodeBase64(text) {\n    const global = env().global;\n    if (typeof global.atob !== 'undefined') {\n        return global.atob(text);\n    }\n    else if (typeof Buffer !== 'undefined') {\n        return new Buffer(text, 'base64').toString();\n    }\n    else {\n        throw new Error('Unable to decode base64 in this environment. ' +\n            'Missing built-in atob() or Buffer()');\n    }\n}\nexport function parseStringParam(s, keepCase) {\n    const value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n    return keepCase ? value : value.toLowerCase();\n}\nexport function getStringParam(attrs, name, def, keepCase = false) {\n    const param = attrs[name];\n    if (param != null) {\n        return parseStringParam(param.s, keepCase);\n    }\n    return def;\n}\nexport function getBoolParam(attrs, name, def) {\n    const param = attrs[name];\n    return param ? param.b : def;\n}\nexport function getNumberParam(attrs, name, def) {\n    const param = attrs[name] || {};\n    const value = param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n    return (typeof value === 'number') ? value : parseInt(value, 10);\n}\nexport function parseDtypeParam(value) {\n    if (typeof (value) === 'string') {\n        // tslint:disable-next-line:no-any\n        value = tensorflow.DataType[value];\n    }\n    switch (value) {\n        case tensorflow.DataType.DT_FLOAT:\n        case tensorflow.DataType.DT_HALF:\n            return 'float32';\n        case tensorflow.DataType.DT_INT32:\n        case tensorflow.DataType.DT_INT64:\n        case tensorflow.DataType.DT_INT8:\n        case tensorflow.DataType.DT_UINT8:\n            return 'int32';\n        case tensorflow.DataType.DT_BOOL:\n            return 'bool';\n        case tensorflow.DataType.DT_DOUBLE:\n            return 'float32';\n        case tensorflow.DataType.DT_STRING:\n            return 'string';\n        case tensorflow.DataType.DT_COMPLEX64:\n        case tensorflow.DataType.DT_COMPLEX128:\n            return 'complex64';\n        default:\n            // Unknown dtype error will happen at runtime (instead of parse time),\n            // since these nodes might not be used by the actual subgraph execution.\n            return null;\n    }\n}\nexport function getFuncParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.func) {\n        return param.func.name;\n    }\n    return def;\n}\nexport function getDtypeParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.type) {\n        return parseDtypeParam(param.type);\n    }\n    return def;\n}\nexport function getDtypeArrayParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.list && param.list.type) {\n        return param.list.type.map(v => parseDtypeParam(v));\n    }\n    return def;\n}\nexport function parseTensorShapeParam(shape) {\n    if (shape.unknownRank) {\n        return undefined;\n    }\n    if (shape.dim != null) {\n        return shape.dim.map(dim => (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n    }\n    return [];\n}\nexport function getTensorShapeParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.shape) {\n        return parseTensorShapeParam(param.shape);\n    }\n    return def;\n}\nexport function getNumericArrayParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param) {\n        return ((param.list.f && param.list.f.length ? param.list.f :\n            param.list.i) ||\n            [])\n            .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n    }\n    return def;\n}\nexport function getStringArrayParam(attrs, name, def, keepCase = false) {\n    const param = attrs[name];\n    if (param && param.list && param.list.s) {\n        return param.list.s.map((v) => {\n            return parseStringParam(v, keepCase);\n        });\n    }\n    return def;\n}\nexport function getTensorShapeArrayParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.list && param.list.shape) {\n        return param.list.shape.map((v) => {\n            return parseTensorShapeParam(v);\n        });\n    }\n    return def;\n}\nexport function getBoolArrayParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.list && param.list.b) {\n        return param.list.b;\n    }\n    return def;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getTensor } from '../executors/utils';\nimport { getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam } from '../operation_mapper';\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl {\n    constructor(node, tensorMap, context) {\n        this.node = node;\n        this.tensorMap = tensorMap;\n        this.context = context;\n        this.inputs = [];\n        this.attrs = {};\n        this.inputs = node.inputNames.map(name => this.getInput(name));\n        if (node.rawAttrs != null) {\n            this.attrs = Object.keys(node.rawAttrs)\n                .reduce((attrs, key) => {\n                attrs[key] = this.getAttr(key);\n                return attrs;\n            }, {});\n        }\n    }\n    /**\n     * Return the value of the attribute or input param.\n     * @param name String: name of attribute or input param.\n     */\n    getInput(name) {\n        return getTensor(name, this.tensorMap, this.context);\n    }\n    /**\n     * Return the value of the attribute or input param.\n     * @param name String: name of attribute or input param.\n     */\n    getAttr(name, defaultValue) {\n        const value = this.node.rawAttrs[name];\n        if (value.tensor != null) {\n            return getTensor(name, this.tensorMap, this.context);\n        }\n        if (value.i != null || value.f != null) {\n            return getNumberParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.s != null) {\n            return getStringParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.b != null) {\n            return getBoolParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.shape != null) {\n            return getTensorShapeParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.type != null) {\n            return getDtypeParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.list != null) {\n            if (value.list.i != null || value.list.f != null) {\n                return getNumericArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.s != null) {\n                return getStringArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.shape != null) {\n                return getTensorShapeArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.b != null) {\n                return getBoolArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.type != null) {\n                return getDtypeArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n        }\n        return defaultValue;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {\n    // constant shape means unknown rank\n    if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n        return;\n    }\n    util.assert(shapeA.length === shapeB.length, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n    for (let i = 0; i < shapeA.length; i++) {\n        const dim0 = shapeA[i];\n        const dim1 = shapeB[i];\n        util.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n    }\n}\nexport function fullDefinedShape(elementShape) {\n    if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n        return false;\n    }\n    return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(listElementShape, tensors, elementShape) {\n    let partialShape = mergeElementShape(listElementShape, elementShape);\n    const notfullDefinedShape = !fullDefinedShape(partialShape);\n    if (notfullDefinedShape && tensors.length === 0) {\n        throw new Error(`Tried to calculate elements of an empty list` +\n            ` with non-fully-defined elementShape: ${partialShape}`);\n    }\n    if (notfullDefinedShape) {\n        tensors.forEach(tensor => {\n            partialShape = mergeElementShape(tensor.shape, partialShape);\n        });\n    }\n    if (!fullDefinedShape(partialShape)) {\n        throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n    }\n    return partialShape;\n}\nexport function mergeElementShape(elementShapeA, elementShapeB) {\n    if (typeof elementShapeA === 'number') {\n        return elementShapeB;\n    }\n    if (typeof elementShapeB === 'number') {\n        return elementShapeA;\n    }\n    if (elementShapeA.length !== elementShapeB.length) {\n        throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${elementShapeB}`);\n    }\n    const result = [];\n    for (let i = 0; i < elementShapeA.length; ++i) {\n        const dim0 = elementShapeA[i];\n        const dim1 = elementShapeB[i];\n        if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n            throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${elementShapeB}`);\n        }\n        result[i] = dim0 >= 0 ? dim0 : dim1;\n    }\n    return result;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n    constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {\n        this.name = name;\n        this.dtype = dtype;\n        this.maxSize = maxSize;\n        this.elementShape = elementShape;\n        this.identicalElementShapes = identicalElementShapes;\n        this.dynamicSize = dynamicSize;\n        this.clearAfterRead = clearAfterRead;\n        this.tensors = [];\n        this.closed_ = false;\n        this.idTensor = scalar(0);\n        keep(this.idTensor);\n    }\n    get id() {\n        return this.idTensor.id;\n    }\n    get closed() {\n        return this.closed_;\n    }\n    /**\n     * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n     */\n    clearAndClose(keepIds) {\n        this.tensors.forEach(tensor => {\n            if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n                tensor.tensor.dispose();\n            }\n        });\n        this.tensors = [];\n        this.closed_ = true;\n        this.idTensor.dispose();\n    }\n    size() {\n        return this.tensors.length;\n    }\n    /**\n     * Read the value at location index in the TensorArray.\n     * @param index Number the index to read from.\n     */\n    read(index) {\n        if (this.closed_) {\n            throw new Error(`TensorArray ${this.name} has already been closed.`);\n        }\n        if (index < 0 || index >= this.size()) {\n            throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);\n        }\n        const tensorWithState = this.tensors[index];\n        if (tensorWithState.cleared) {\n            throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` +\n                `(perhaps try setting clear_after_read = false?).`);\n        }\n        if (this.clearAfterRead) {\n            tensorWithState.cleared = true;\n        }\n        tensorWithState.read = true;\n        return tensorWithState.tensor;\n    }\n    /**\n     * Helper method to read multiple tensors from the specified indices.\n     */\n    readMany(indices) {\n        return indices.map(index => this.read(index));\n    }\n    /**\n     * Write value into the index of the TensorArray.\n     * @param index number the index to write to.\n     * @param tensor\n     */\n    write(index, tensor) {\n        if (this.closed_) {\n            throw new Error(`TensorArray ${this.name} has already been closed.`);\n        }\n        if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n            throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);\n        }\n        const t = this.tensors[index] || {};\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n        }\n        // Set the shape for the first time write to unknow shape tensor array\n        if (this.size() === 0 &&\n            (this.elementShape == null || this.elementShape.length === 0)) {\n            this.elementShape = tensor.shape;\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);\n        if (t.read) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);\n        }\n        if (t.written) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);\n        }\n        t.tensor = tensor;\n        keep(tensor);\n        t.written = true;\n        this.tensors[index] = t;\n    }\n    /**\n     * Helper method to write multiple tensors to the specified indices.\n     */\n    writeMany(indices, tensors) {\n        if (indices.length !== tensors.length) {\n            throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` +\n                `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);\n        }\n        indices.forEach((i, index) => this.write(i, tensors[index]));\n    }\n    /**\n     * Return selected values in the TensorArray as a packed Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size(). If not specified returns\n     *    all tensors in the original order.\n     * @param [dtype]\n     */\n    gather(indices, dtype) {\n        if (!!dtype && dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);\n        }\n        if (!indices) {\n            indices = [];\n            for (let i = 0; i < this.size(); i++) {\n                indices.push(i);\n            }\n        }\n        else {\n            indices = indices.slice(0, this.size());\n        }\n        if (indices.length === 0) {\n            return tensor([], [0].concat(this.elementShape));\n        }\n        // Read all the PersistentTensors into a vector to keep track of\n        // their memory.\n        const tensors = this.readMany(indices);\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n        return stack(tensors, 0);\n    }\n    /**\n     * Return the values in the TensorArray as a concatenated Tensor.\n     */\n    concat(dtype) {\n        if (!!dtype && dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);\n        }\n        if (this.size() === 0) {\n            return tensor([], [0].concat(this.elementShape));\n        }\n        const indices = [];\n        for (let i = 0; i < this.size(); i++) {\n            indices.push(i);\n        }\n        // Collect all the tensors from the tensors array.\n        const tensors = this.readMany(indices);\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n        return concat(tensors, 0);\n    }\n    /**\n     * Scatter the values of a Tensor in specific indices of a TensorArray.\n     * @param indices number[] values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size().\n     * @param tensor Tensor input tensor.\n     */\n    scatter(indices, tensor) {\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n        }\n        if (indices.length !== tensor.shape[0]) {\n            throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n        }\n        const maxIndex = Math.max(...indices);\n        if (!this.dynamicSize && maxIndex >= this.maxSize) {\n            throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n        }\n        this.writeMany(indices, unstack(tensor, 0));\n    }\n    /**\n     * Split the values of a Tensor into the TensorArray.\n     * @param length number[] with the lengths to use when splitting value along\n     *    its first dimension.\n     * @param tensor Tensor, the tensor to split.\n     */\n    split(length, tensor) {\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n        }\n        let totalLength = 0;\n        const cumulativeLengths = length.map(len => {\n            totalLength += len;\n            return totalLength;\n        });\n        if (totalLength !== tensor.shape[0]) {\n            throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n        }\n        if (!this.dynamicSize && length.length !== this.maxSize) {\n            throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` +\n                'and the TensorArray is not marked as dynamically resizeable');\n        }\n        const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n        const tensors = [];\n        tidy(() => {\n            tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n            for (let i = 0; i < length.length; ++i) {\n                const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n                const indices = [0, previousLength, 0];\n                const sizes = [1, length[i], elementPerRow];\n                tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n            }\n            return tensors;\n        });\n        const indices = [];\n        for (let i = 0; i < length.length; i++) {\n            indices[i] = i;\n        }\n        this.writeMany(indices, tensors);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\nexport class TensorList {\n    get id() {\n        return this.idTensor.id;\n    }\n    /**\n     *\n     * @param tensors list of tensors\n     * @param elementShape shape of each tensor, this can be a single number (any\n     * shape is allowed) or partial shape (dim = -1).\n     * @param elementDtype data type of each tensor\n     * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n     *   meaning that the size of `tensors` is unbounded.\n     */\n    constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {\n        this.tensors = tensors;\n        this.elementShape = elementShape;\n        this.elementDtype = elementDtype;\n        if (tensors != null) {\n            tensors.forEach(tensor => {\n                if (elementDtype !== tensor.dtype) {\n                    throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);\n                }\n                assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n                keep(tensor);\n            });\n        }\n        this.idTensor = scalar(0);\n        this.maxNumElements = maxNumElements;\n        keep(this.idTensor);\n    }\n    /**\n     * Get a new TensorList containing a copy of the underlying tensor container.\n     */\n    copy() {\n        return new TensorList([...this.tensors], this.elementShape, this.elementDtype);\n    }\n    /**\n     * Dispose the tensors and idTensor and clear the tensor list.\n     */\n    clearAndClose(keepIds) {\n        this.tensors.forEach(tensor => {\n            if (keepIds == null || !keepIds.has(tensor.id)) {\n                tensor.dispose();\n            }\n        });\n        this.tensors.length = 0;\n        this.idTensor.dispose();\n    }\n    /**\n     * The size of the tensors in the tensor list.\n     */\n    size() {\n        return this.tensors.length;\n    }\n    /**\n     * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n     * tf.Tensor.\n     * @param elementShape shape of each tensor\n     * @param elementDtype data type of each tensor\n     * @param numElements the number of elements to stack\n     */\n    stack(elementShape, elementDtype, numElements = -1) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (numElements !== -1 && this.tensors.length !== numElements) {\n            throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);\n        }\n        assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        return tidy(() => {\n            const reshapedTensors = this.tensors.map(tensor => reshape(tensor, outputElementShape));\n            return stack(reshapedTensors, 0);\n        });\n    }\n    /**\n     * Pop a tensor from the end of the list.\n     * @param elementShape shape of the tensor\n     * @param elementDtype data type of the tensor\n     */\n    popBack(elementShape, elementDtype) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (this.size() === 0) {\n            throw new Error('Trying to pop from an empty list.');\n        }\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        const tensor = this.tensors.pop();\n        tensor.kept = false;\n        assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n        return reshape(tensor, outputElementShape);\n    }\n    /**\n     * Push a tensor to the end of the list.\n     * @param tensor Tensor to be pushed.\n     */\n    pushBack(tensor) {\n        if (tensor.dtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n        if (this.maxNumElements === this.size()) {\n            throw new Error(`Trying to push element into a full list.`);\n        }\n        keep(tensor);\n        this.tensors.push(tensor);\n    }\n    /**\n     * Update the size of the list.\n     * @param size the new size of the list.\n     */\n    resize(size) {\n        if (size < 0) {\n            throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);\n        }\n        if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n            throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);\n        }\n        const destTensorList = new TensorList([], this.elementShape, this.elementDtype, this.maxNumElements);\n        destTensorList.tensors.length = size;\n        for (let i = 0; i < Math.min(this.tensors.length, size); ++i) {\n            destTensorList.tensors[i] = this.tensors[i];\n        }\n        return destTensorList;\n    }\n    /**\n     * Retrieve the element at the provided index\n     * @param elementShape shape of the tensor\n     * @param elementDtype dtype of the tensor\n     * @param elementIndex index of the tensor\n     */\n    getItem(elementIndex, elementShape, elementDtype) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (elementIndex < 0 || elementIndex > this.tensors.length) {\n            throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);\n        }\n        if (this.tensors[elementIndex] == null) {\n            throw new Error(`element at index ${elementIndex} is null.`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        return reshape(this.tensors[elementIndex], outputElementShape);\n    }\n    /**\n     * Set the tensor at the index\n     * @param elementIndex index of the tensor\n     * @param tensor the tensor to be inserted into the list\n     */\n    setItem(elementIndex, tensor) {\n        if (tensor.dtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n        }\n        if (elementIndex < 0 ||\n            this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n            throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n        // dispose the previous value if it is replacing.\n        if (this.tensors[elementIndex] != null) {\n            this.tensors[elementIndex].kept = false;\n        }\n        this.tensors[elementIndex] = tensor;\n    }\n    /**\n     * Return selected values in the TensorList as a stacked Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param indices indices of tensors to gather\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n    gather(indices, elementDtype, elementShape) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n        // When indices is greater than the size of the list, indices beyond the\n        // size of the list are ignored.\n        indices = indices.slice(0, this.size());\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        if (indices.length === 0) {\n            return tensor([], [0].concat(outputElementShape));\n        }\n        return tidy(() => {\n            const tensors = indices.map(i => reshape(this.tensors[i], outputElementShape));\n            return stack(tensors, 0);\n        });\n    }\n    /**\n     * Return the values in the TensorList as a concatenated Tensor.\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n    concat(elementDtype, elementShape) {\n        if (!!elementDtype && elementDtype !== this.elementDtype) {\n            throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        if (this.size() === 0) {\n            return tensor([], [0].concat(outputElementShape));\n        }\n        return tidy(() => {\n            const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n            return concat(tensors, 0);\n        });\n    }\n}\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(tensor, elementShape, elementDtype) {\n    const dtype = tensor.dtype;\n    if (tensor.shape.length < 1) {\n        throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n    }\n    if (tensor.dtype !== elementDtype) {\n        throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);\n    }\n    const tensorElementShape = tensor.shape.slice(1);\n    assertShapesMatchAllowUndefinedSize(tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n    const tensorList = unstack(tensor);\n    return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n * @param maxNumElements the maximum number of elements in th list\n */\nexport function reserve(elementShape, elementDtype, numElements, maxNumElements) {\n    return new TensorList([], elementShape, elementDtype, maxNumElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(tensor, indices, elementShape, numElements) {\n    if (indices.length !== tensor.shape[0]) {\n        throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n    }\n    const maxIndex = Math.max(...indices);\n    if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n        throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n    }\n    const list = new TensorList([], elementShape, tensor.dtype, numElements);\n    const tensors = unstack(tensor, 0);\n    indices.forEach((value, index) => {\n        list.setItem(value, tensors[index]);\n    });\n    return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(tensor, length, elementShape) {\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n        totalLength += len;\n        return totalLength;\n    });\n    if (totalLength !== tensor.shape[0]) {\n        throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n    const shapeWithoutFirstDim = tensor.shape.slice(1);\n    const outputElementShape = mergeElementShape(shapeWithoutFirstDim, elementShape);\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors = tidy(() => {\n        const tensors = [];\n        tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n        for (let i = 0; i < length.length; ++i) {\n            const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n            const indices = [0, previousLength, 0];\n            const sizes = [1, length[i], elementPerRow];\n            tensors[i] = reshape(slice(tensor, indices, sizes), outputElementShape);\n        }\n        tensor.dispose();\n        return tensors;\n    });\n    const list = new TensorList([], elementShape, tensor.dtype, length.length);\n    for (let i = 0; i < tensors.length; i++) {\n        list.setItem(i, tensors[i]);\n    }\n    return list;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from '../../executor/tensor_array';\nimport { fromTensor, reserve, scatter, split } from '../../executor/tensor_list';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = async (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'If':\n        case 'StatelessIf': {\n            const thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n            const elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n            const cond = getParamValue('cond', node, tensorMap, context);\n            const args = getParamValue('args', node, tensorMap, context);\n            const condValue = await cond.data();\n            if (condValue[0]) {\n                return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n            }\n            else {\n                return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n            }\n        }\n        case 'While':\n        case 'StatelessWhile': {\n            const bodyFunc = getParamValue('body', node, tensorMap, context);\n            const condFunc = getParamValue('cond', node, tensorMap, context);\n            const args = getParamValue('args', node, tensorMap, context);\n            // Calculate the condition of the loop\n            const condResult = (await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));\n            const argIds = args.map(tensor => tensor.id);\n            let condValue = await condResult[0].data();\n            // Dispose the intermediate tensors for condition function\n            condResult.forEach(tensor => {\n                if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n                    tensor.dispose();\n                }\n            });\n            let result = args;\n            while (condValue[0]) {\n                // Record the previous result for intermediate tensor tracking\n                const origResult = result;\n                // Execution the body of the loop\n                result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n                const resultIds = result.map(tensor => tensor.id);\n                // Dispose the intermediate tensor for body function that is not global\n                // kept, not input/output of the body function\n                origResult.forEach(tensor => {\n                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n                        resultIds.indexOf(tensor.id) === -1) {\n                        tensor.dispose();\n                    }\n                });\n                // Recalcuate the condition of the loop using the latest results.\n                const condResult = (await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap));\n                condValue = await condResult[0].data();\n                // Dispose the intermediate tensors for condition function\n                condResult.forEach(tensor => {\n                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n                        resultIds.indexOf(tensor.id) === -1) {\n                        tensor.dispose();\n                    }\n                });\n            }\n            return result;\n        }\n        case 'LoopCond': {\n            const pred = getParamValue('pred', node, tensorMap, context);\n            return [cloneTensor(pred)];\n        }\n        case 'Switch': {\n            const pred = getParamValue('pred', node, tensorMap, context);\n            let data = getParamValue('data', node, tensorMap, context);\n            if (!data.kept) {\n                data = cloneTensor(data);\n            }\n            // Outputs nodes :0 => false, :1 => true\n            return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n        }\n        case 'Merge': {\n            const inputName = node.inputNames.find(name => getTensor(name, tensorMap, context) !== undefined);\n            if (inputName) {\n                const data = getTensor(inputName, tensorMap, context);\n                return [cloneTensor(data)];\n            }\n            return undefined;\n        }\n        case 'Enter': {\n            const frameId = getParamValue('frameName', node, tensorMap, context);\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.enterFrame(frameId);\n            return [cloneTensor(data)];\n        }\n        case 'Exit': {\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.exitFrame();\n            return [cloneTensor(data)];\n        }\n        case 'NextIteration': {\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.nextIteration();\n            return [cloneTensor(data)];\n        }\n        case 'TensorArrayV3': {\n            const size = getParamValue('size', node, tensorMap, context);\n            const dtype = getParamValue('dtype', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n            const clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n            const identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n            const name = getParamValue('name', node, tensorMap, context);\n            const tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n            context.addTensorArray(tensorArray);\n            return [tensorArray.idTensor, scalar(1.0)];\n        }\n        case 'TensorArrayWriteV3': {\n            const id = getParamValue('tensorArrayId', node, tensorMap, context);\n            const index = getParamValue('index', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const writeTensorArray = context.getTensorArray(id.id);\n            writeTensorArray.write(index, writeTensor);\n            return [writeTensorArray.idTensor];\n        }\n        case 'TensorArrayReadV3': {\n            const readId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const readIndex = getParamValue('index', node, tensorMap, context);\n            const readTensorArray = context.getTensorArray(readId.id);\n            return [readTensorArray.read(readIndex)];\n        }\n        case 'TensorArrayGatherV3': {\n            const gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const gatherIndices = getParamValue('indices', node, tensorMap, context);\n            const gatherDtype = getParamValue('dtype', node, tensorMap, context);\n            const gatherTensorArray = context.getTensorArray(gatherId.id);\n            return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n        }\n        case 'TensorArrayScatterV3': {\n            const scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const scatterIndices = getParamValue('indices', node, tensorMap, context);\n            const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            const scatterTensorArray = context.getTensorArray(scatterId.id);\n            scatterTensorArray.scatter(scatterIndices, scatterTensor);\n            return [scatterTensorArray.idTensor];\n        }\n        case 'TensorArrayConcatV3': {\n            const concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const concatTensorArray = context.getTensorArray(concatId.id);\n            const concatDtype = getParamValue('dtype', node, tensorMap, context);\n            return [concatTensorArray.concat(concatDtype)];\n        }\n        case 'TensorArraySplitV3': {\n            const splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const splitTensor = getParamValue('tensor', node, tensorMap, context);\n            const lengths = getParamValue('lengths', node, tensorMap, context);\n            const splitTensorArray = context.getTensorArray(splitId.id);\n            splitTensorArray.split(lengths, splitTensor);\n            return [splitTensorArray.idTensor];\n        }\n        case 'TensorArraySizeV3': {\n            const sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const sizeTensorArray = context.getTensorArray(sizeId.id);\n            return [scalar(sizeTensorArray.size(), 'int32')];\n        }\n        case 'TensorArrayCloseV3': {\n            const closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const closeTensorArray = context.getTensorArray(closeId.id);\n            closeTensorArray.clearAndClose();\n            return [closeTensorArray.idTensor];\n        }\n        case 'TensorListSetItem': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const index = getParamValue('index', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            tensorList.setItem(index, writeTensor);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListGetItem': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const readIndex = getParamValue('index', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDType = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.getItem(readIndex, elementShape, elementDType)];\n        }\n        case 'TensorListScatterV2':\n        case 'TensorListScatter': {\n            const scatterIndices = getParamValue('indices', node, tensorMap, context);\n            const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const numElements = getParamValue('numElements', node, tensorMap, context);\n            const tensorList = scatter(scatterTensor, scatterIndices, elementShape, numElements);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListReserve':\n        case 'EmptyTensorList': {\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            let numElementsParam;\n            if (node.op === 'TensorListReserve') {\n                numElementsParam = 'numElements';\n            }\n            else {\n                numElementsParam = 'maxNumElements';\n            }\n            const numElements = getParamValue(numElementsParam, node, tensorMap, context);\n            const maxNumElements = node.op === 'TensorListReserve' ? -1 : numElements;\n            const tensorList = reserve(elementShape, elementDtype, numElements, maxNumElements);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListGather': {\n            const gatherId = getParamValue('tensorListId', node, tensorMap, context);\n            const gatherIndices = getParamValue('indices', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(gatherId.id);\n            return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n        }\n        case 'TensorListStack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const numElements = getParamValue('numElements', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.stack(elementShape, elementDtype, numElements)];\n        }\n        case 'TensorListFromTensor': {\n            const tensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = fromTensor(tensor, elementShape, elementDtype);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListConcat':\n        case 'TensorListConcatV2': {\n            const concatId = getParamValue('tensorListId', node, tensorMap, context);\n            const tensorList = context.getTensorList(concatId.id);\n            const concatDtype = getParamValue('dtype', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            return [tensorList.concat(concatDtype, elementShape)];\n        }\n        case 'TensorListPushBack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            tensorList.pushBack(writeTensor);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListPopBack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDType = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.popBack(elementShape, elementDType)];\n        }\n        case 'TensorListSplit': {\n            const splitTensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const lengths = getParamValue('lengths', node, tensorMap, context);\n            const tensorList = split(splitTensor, lengths, elementShape);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListLength': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [scalar(tensorList.size(), 'int32')];\n        }\n        case 'TensorListResize': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            const srcTensorList = context.getTensorList(idTensor.id);\n            const destTensorList = srcTensorList.resize(size);\n            context.addTensorList(destTensorList);\n            return [destTensorList.idTensor];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'control';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getPadding, getParamValue } from './utils';\nfunction fusedConvAndDepthWiseParams(node, tensorMap, context) {\n    const [extraOp, activationFunc] = getParamValue('fusedOps', node, tensorMap, context);\n    const isBiasAdd = extraOp === 'biasadd';\n    const noBiasAdd = !isBiasAdd;\n    const isPrelu = activationFunc === 'prelu';\n    const isBatchNorm = extraOp === 'fusedbatchnorm';\n    const numArgs = getParamValue('numArgs', node, tensorMap, context);\n    if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n            throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n                'must have two extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && isBiasAdd && numArgs !== 1) {\n            throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n                'one extra argument: bias.');\n        }\n    }\n    if (isBatchNorm) {\n        throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n    }\n    const stride = getParamValue('strides', node, tensorMap, context);\n    const pad = getPadding(node, tensorMap, context);\n    const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n        .toUpperCase();\n    const dilations = getParamValue('dilations', node, tensorMap, context);\n    let [biasArg, preluArg] = getParamValue('args', node, tensorMap, context);\n    if (noBiasAdd) {\n        preluArg = biasArg;\n        biasArg = undefined;\n    }\n    const leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n    return {\n        stride,\n        pad,\n        dataFormat,\n        dilations,\n        biasArg,\n        preluArg,\n        activationFunc,\n        leakyreluAlpha\n    };\n}\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Conv1D': {\n            const stride = getParamValue('stride', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilation = getParamValue('dilation', node, tensorMap, context);\n            return [ops.conv1d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];\n        }\n        case 'Conv2D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            return [ops.conv2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n            const { stride, pad, dataFormat, dilations, biasArg, preluArg, activationFunc, leakyreluAlpha } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n            return [ops.fused.conv2d({\n                    x: getParamValue('x', node, tensorMap, context),\n                    filter: getParamValue('filter', node, tensorMap, context),\n                    strides: [stride[1], stride[2]],\n                    pad: pad,\n                    dataFormat: dataFormat,\n                    dilations: [dilations[1], dilations[2]],\n                    bias: biasArg,\n                    activation: activationFunc,\n                    preluActivationWeights: preluArg,\n                    leakyreluAlpha\n                })];\n        }\n        case 'FusedDepthwiseConv2dNative': {\n            const { stride, pad, dataFormat, dilations, biasArg, preluArg, activationFunc, leakyreluAlpha, } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n            return [ops.fused.depthwiseConv2d({\n                    x: getParamValue('x', node, tensorMap, context),\n                    filter: getParamValue('filter', node, tensorMap, context),\n                    strides: [stride[1], stride[2]],\n                    pad: pad,\n                    dataFormat: dataFormat,\n                    dilations: [dilations[1], dilations[2]],\n                    bias: biasArg,\n                    activation: activationFunc,\n                    preluActivationWeights: preluArg,\n                    leakyreluAlpha\n                })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n            const shape = getParamValue('outputShape', node, tensorMap, context);\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            return [ops.conv2dTranspose(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            return [ops.depthwiseConv2d(getParamValue('input', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            return [ops.conv3d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2], stride[3]], pad, dataFormat, [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [ops.avgPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n        }\n        case 'MaxPool': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [ops.maxPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n        }\n        case 'MaxPoolWithArgmax': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            const includeBatchInIndex = getParamValue('includeBatchInIndex', node, tensorMap, context);\n            const { result, indexes } = ops.maxPoolWithArgmax(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad, includeBatchInIndex);\n            return [result, indexes];\n        }\n        case 'AvgPool3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [ops.avgPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n        }\n        case 'MaxPool3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [ops.maxPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n        }\n        case 'Dilation2D': {\n            const strides = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            // strides: [1, stride_height, stride_width, 1].\n            const strideHeight = strides[1];\n            const strideWidth = strides[2];\n            // dilations: [1, dilation_height, dilation_width, 1].\n            const dilationHeight = dilations[1];\n            const dilationWidth = dilations[2];\n            return [ops.dilation2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [strideHeight, strideWidth], pad, [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'convolution';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nfunction nmsParams(node, tensorMap, context) {\n    const boxes = getParamValue('boxes', node, tensorMap, context);\n    const scores = getParamValue('scores', node, tensorMap, context);\n    const maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n    const iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n    const scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n    const softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n    return {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n    };\n}\nexport const executeOp = async (node, tensorMap, context, resourceManager, ops = tfOps) => {\n    switch (node.op) {\n        case 'NonMaxSuppressionV5': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = nmsParams(node, tensorMap, context);\n            const result = await ops.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n            return [result.selectedIndices, result.selectedScores];\n        }\n        case 'NonMaxSuppressionV4': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);\n            const padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n            const result = await ops.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n            return [result.selectedIndices, result.validOutputs];\n        }\n        case 'NonMaxSuppressionV3':\n        case 'NonMaxSuppressionV2': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);\n            return [await ops.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];\n        }\n        case 'Where': {\n            const condition = ops.cast(getParamValue('condition', node, tensorMap, context), 'bool');\n            const result = [await ops.whereAsync(condition)];\n            condition.dispose();\n            return result;\n        }\n        case 'ListDiff': {\n            return ops.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context));\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'dynamic';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n    get id() {\n        return this.handle.id;\n    }\n    /**\n     * Constructor of HashTable. Creates a hash table.\n     *\n     * @param keyDType `dtype` of the table keys.\n     * @param valueDType `dtype` of the table values.\n     */\n    constructor(keyDType, valueDType) {\n        this.keyDType = keyDType;\n        this.valueDType = valueDType;\n        this.handle = scalar(0);\n        // tslint:disable-next-line: no-any\n        this.tensorMap = new Map();\n        keep(this.handle);\n    }\n    /**\n     * Dispose the tensors and handle and clear the hashtable.\n     */\n    clearAndClose() {\n        this.tensorMap.forEach(value => value.dispose());\n        this.tensorMap.clear();\n        this.handle.dispose();\n    }\n    /**\n     * The number of items in the hash table.\n     */\n    size() {\n        return this.tensorMap.size;\n    }\n    /**\n     * The number of items in the hash table as a rank-0 tensor.\n     */\n    tensorSize() {\n        return tfOps.scalar(this.size(), 'int32');\n    }\n    /**\n     * Replaces the contents of the table with the specified keys and values.\n     * @param keys Keys to store in the hashtable.\n     * @param values Values to store in the hashtable.\n     */\n    async import(keys, values) {\n        this.checkKeyAndValueTensor(keys, values);\n        // We only store the primitive values of the keys, this allows lookup\n        // to be O(1).\n        const $keys = await keys.data();\n        // Clear the hashTable before inserting new values.\n        this.tensorMap.forEach(value => value.dispose());\n        this.tensorMap.clear();\n        return tidy(() => {\n            const $values = unstack(values);\n            const keysLength = $keys.length;\n            const valuesLength = $values.length;\n            util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` +\n                `${keysLength} elements, the values has ${valuesLength} ` +\n                `elements.`);\n            for (let i = 0; i < keysLength; i++) {\n                const key = $keys[i];\n                const value = $values[i];\n                keep(value);\n                this.tensorMap.set(key, value);\n            }\n            return this.handle;\n        });\n    }\n    /**\n     * Looks up keys in a hash table, outputs the corresponding values.\n     *\n     * Performs batch lookups, for every element in the key tensor, `find`\n     * stacks the corresponding value into the return tensor.\n     *\n     * If an element is not present in the table, the given `defaultValue` is\n     * used.\n     *\n     * @param keys Keys to look up. Must have the same type as the keys of the\n     *     table.\n     * @param defaultValue The scalar `defaultValue` is the value output for keys\n     *     not present in the table. It must also be of the same type as the\n     *     table values.\n     */\n    async find(keys, defaultValue) {\n        this.checkKeyAndValueTensor(keys, defaultValue);\n        const $keys = await keys.data();\n        return tidy(() => {\n            const result = [];\n            for (let i = 0; i < $keys.length; i++) {\n                const key = $keys[i];\n                const value = this.findWithDefault(key, defaultValue);\n                result.push(value);\n            }\n            return stack(result);\n        });\n    }\n    // tslint:disable-next-line: no-any\n    findWithDefault(key, defaultValue) {\n        const result = this.tensorMap.get(key);\n        return result != null ? result : defaultValue;\n    }\n    checkKeyAndValueTensor(key, value) {\n        if (key.dtype !== this.keyDType) {\n            throw new Error(`Expect key dtype ${this.keyDType}, but got ` +\n                `${key.dtype}`);\n        }\n        if (value.dtype !== this.valueDType) {\n            throw new Error(`Expect value dtype ${this.valueDType}, but got ` +\n                `${value.dtype}`);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as ragged from './executors/ragged_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(node, tensorMap, context, resourceManager, tidy = tfc.tidy) {\n    const value = ((node, tensorMap, context) => {\n        switch (node.category) {\n            case 'arithmetic':\n                return tidy(() => arithmetic.executeOp(node, tensorMap, context));\n            case 'basic_math':\n                return tidy(() => basicMath.executeOp(node, tensorMap, context));\n            case 'control':\n                return control.executeOp(node, tensorMap, context);\n            case 'convolution':\n                return tidy(() => convolution.executeOp(node, tensorMap, context));\n            case 'creation':\n                return tidy(() => creation.executeOp(node, tensorMap, context));\n            case 'dynamic':\n                return dynamic.executeOp(node, tensorMap, context);\n            case 'evaluation':\n                return tidy(() => evaluation.executeOp(node, tensorMap, context));\n            case 'image':\n                return tidy(() => image.executeOp(node, tensorMap, context));\n            case 'graph':\n                return tidy(() => graph.executeOp(node, tensorMap, context));\n            case 'logical':\n                return tidy(() => logical.executeOp(node, tensorMap, context));\n            case 'matrices':\n                return tidy(() => matrices.executeOp(node, tensorMap, context));\n            case 'normalization':\n                return tidy(() => normalization.executeOp(node, tensorMap, context));\n            case 'ragged':\n                return tidy(() => ragged.executeOp(node, tensorMap, context));\n            case 'reduction':\n                return tidy(() => reduction.executeOp(node, tensorMap, context));\n            case 'slice_join':\n                return tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n            case 'sparse':\n                return tidy(() => sparse.executeOp(node, tensorMap, context));\n            case 'spectral':\n                return tidy(() => spectral.executeOp(node, tensorMap, context));\n            case 'string':\n                return tidy(() => string.executeOp(node, tensorMap, context));\n            case 'transformation':\n                return tidy(() => transformation.executeOp(node, tensorMap, context));\n            case 'hash_table':\n                return hashTable.executeOp(node, tensorMap, context, resourceManager);\n            case 'custom':\n                const opMapper = getRegisteredOp(node.op);\n                if (opMapper && opMapper.customExecutor) {\n                    return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n                }\n                else {\n                    throw TypeError(`Custom op ${node.op} is not registered.`);\n                }\n            default:\n                throw TypeError(`Unknown op '${node.op}'. File an issue at ` +\n                    `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                    `, or register a custom execution with tf.registerOp()`);\n        }\n    })(node, tensorMap, context);\n    if (tfc.util.isPromise(value)) {\n        return value.then((data) => [].concat(data));\n    }\n    return [].concat(value);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uX2V4ZWN1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvb3BlcmF0aW9uX2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sS0FBSyxHQUFHLE1BQU0sdUJBQXVCLENBQUM7QUFNN0MsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQzFELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNyRCxPQUFPLEtBQUssVUFBVSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlELE9BQU8sS0FBSyxTQUFTLE1BQU0saUNBQWlDLENBQUM7QUFDN0QsT0FBTyxLQUFLLE9BQU8sTUFBTSw4QkFBOEIsQ0FBQztBQUN4RCxPQUFPLEtBQUssV0FBVyxNQUFNLGtDQUFrQyxDQUFDO0FBQ2hFLE9BQU8sS0FBSyxRQUFRLE1BQU0sK0JBQStCLENBQUM7QUFDMUQsT0FBTyxLQUFLLE9BQU8sTUFBTSw4QkFBOEIsQ0FBQztBQUN4RCxPQUFPLEtBQUssVUFBVSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlELE9BQU8sS0FBSyxLQUFLLE1BQU0sNEJBQTRCLENBQUM7QUFDcEQsT0FBTyxLQUFLLFNBQVMsTUFBTSxpQ0FBaUMsQ0FBQztBQUM3RCxPQUFPLEtBQUssS0FBSyxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sS0FBSyxPQUFPLE1BQU0sOEJBQThCLENBQUM7QUFDeEQsT0FBTyxLQUFLLFFBQVEsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRCxPQUFPLEtBQUssYUFBYSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3BFLE9BQU8sS0FBSyxNQUFNLE1BQU0sNkJBQTZCLENBQUM7QUFDdEQsT0FBTyxLQUFLLFNBQVMsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RCxPQUFPLEtBQUss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SSxhQUFhLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO2lCQUNsRDtxQkFBTTtvQkFDTCxNQUFNLFNBQVMsQ0FBQyxhQUFhLElBQUksQ0FBQyxFQUFFLHFCQUFxQixDQUFDLENBQUM7aUJBQzVEO1lBQ0g7Z0JBQ0UsTUFBTSxTQUFTLENBQ1gsZUFBZSxJQUFJLENBQUMsRUFBRSxzQkFBc0I7b0JBQzVDLDREQUE0RDtvQkFDNUQsdURBQXVELENBQUMsQ0FBQztTQUNoRTtJQUNILENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDakMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUM3QixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUM5QztJQUNELE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQgKiBhcyB0ZmMgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuaW1wb3J0IHtOYW1lZFRlbnNvcnNNYXB9IGZyb20gJy4uL2RhdGEvdHlwZXMnO1xuaW1wb3J0IHtFeGVjdXRpb25Db250ZXh0fSBmcm9tICcuLi9leGVjdXRvci9leGVjdXRpb25fY29udGV4dCc7XG5pbXBvcnQge1Jlc291cmNlTWFuYWdlcn0gZnJvbSAnLi4vZXhlY3V0b3IvcmVzb3VyY2VfbWFuYWdlcic7XG5cbmltcG9ydCB7Tm9kZVZhbHVlSW1wbH0gZnJvbSAnLi9jdXN0b21fb3Avbm9kZV92YWx1ZV9pbXBsJztcbmltcG9ydCB7Z2V0UmVnaXN0ZXJlZE9wfSBmcm9tICcuL2N1c3RvbV9vcC9yZWdpc3Rlcic7XG5pbXBvcnQgKiBhcyBhcml0aG1ldGljIGZyb20gJy4vZXhlY3V0b3JzL2FyaXRobWV0aWNfZXhlY3V0b3InO1xuaW1wb3J0ICogYXMgYmFzaWNNYXRoIGZyb20gJy4vZXhlY3V0b3JzL2Jhc2ljX21hdGhfZXhlY3V0b3InO1xuaW1wb3J0ICogYXMgY29udHJvbCBmcm9tICcuL2V4ZWN1dG9ycy9jb250cm9sX2V4ZWN1dG9yJztcbmltcG9ydCAqIGFzIGNvbnZvbHV0aW9uIGZyb20gJy4vZXhlY3V0b3JzL2NvbnZvbHV0aW9uX2V4ZWN1dG9yJztcbmltcG9ydCAqIGFzIGNyZWF0aW9uIGZyb20gJy4vZXhlY3V0b3JzL2NyZWF0aW9uX2V4ZWN1dG9yJztcbmltcG9ydCAqIGFzIGR5bmFtaWMgZnJvbSAnLi9leGVjdXRvcnMvZHluYW1pY19leGVjdXRvcic7XG5pbXBvcnQgKiBhcyBldmFsdWF0aW9uIGZyb20gJy4vZXhlY3V0b3JzL2V2YWx1YXRpb25fZXhlY3V0b3InO1xuaW1wb3J0ICogYXMgZ3JhcGggZnJvbSAnLi9leGVjdXRvcnMvZ3JhcGhfZXhlY3V0b3InO1xuaW1wb3J0ICogYXMgaGFzaFRhYmxlIGZyb20gJy4vZXhlY3V0b3JzL2hhc2hfdGFibGVfZXhlY3V0b3InO1xuaW1wb3J0ICogYXMgaW1hZ2UgZnJvbSAnLi9leGVjdXRvcnMvaW1hZ2VfZXhlY3V0b3InO1xuaW1wb3J0ICogYXMgbG9naWNhbCBmcm9tICcuL2V4ZWN1dG9ycy9sb2dpY2FsX2V4ZWN1dG9yJztcbmltcG9ydCAqIGFzIG1hdHJpY2VzIGZyb20gJy4vZXhlY3V0b3JzL21hdHJpY2VzX2V4ZWN1dG9yJztcbmltcG9ydCAqIGFzIG5vcm1hbGl6YXRpb24gZnJvbSAnLi9leGVjdXRvcnMvbm9ybWFsaXphdGlvbl9leGVjdXRvcic7XG5pbXBvcnQgKiBhcyByYWdnZWQgZnJvbSAnLi9leGVjdXRvcnMvcmFnZ2VkX2V4ZWN1dG9yJztcbmltcG9ydCAqIGFzIHJlZHVjdGlvbiBmcm9tICcuL2V4ZWN1dG9ycy9yZWR1Y3Rpb25fZXhlY3V0b3InO1xuaW1wb3J0ICogYXMgc2xpY2VKb2luIGZyb20gJy4vZXhlY3V0b3JzL3NsaWNlX2pvaW5fZXhlY3V0b3InO1xuaW1wb3J0ICogYXMgc3BhcnNlIGZyb20gJy4vZXhlY3V0b3JzL3NwYXJzZV9leGVjdXRvcic7XG5pbXBvcnQgKiBhcyBzcGVjdHJhbCBmcm9tICcuL2V4ZWN1dG9ycy9zcGVjdHJhbF9leGVjdXRvcic7XG5pbXBvcnQgKiBhcyBzdHJpbmcgZnJvbSAnLi9leGVjdXRvcnMvc3RyaW5nX2V4ZWN1dG9yJztcbmltcG9ydCAqIGFzIHRyYW5zZm9ybWF0aW9uIGZyb20gJy4vZXhlY3V0b3JzL3RyYW5zZm9ybWF0aW9uX2V4ZWN1dG9yJztcbmltcG9ydCB7Tm9kZX0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIG9wIGRlZmluZWQgYnkgdGhlIG5vZGUgb2JqZWN0LlxuICogQHBhcmFtIG5vZGVcbiAqIEBwYXJhbSB0ZW5zb3JNYXAgY29udGFpbnMgdGVuc29ycyBmb3IgZXhlY3V0ZWQgbm9kZXMgYW5kIHdlaWdodHNcbiAqIEBwYXJhbSBjb250ZXh0IGNvbnRhaW5zIHRlbnNvcnMgYW5kIGluZm9ybWF0aW9uIGZvciBydW5uaW5nIHRoZSBjdXJyZW50IG5vZGUuXG4gKiBAcGFyYW0gcmVzb3VyY2VNYW5hZ2VyIE9wdGlvbmFsLiBDb250YWlucyBnbG9iYWwgcmVzb3VyY2VzIG9mIHRoZSBtb2RlbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVPcChcbiAgICBub2RlOiBOb2RlLCB0ZW5zb3JNYXA6IE5hbWVkVGVuc29yc01hcCwgY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCxcbiAgICByZXNvdXJjZU1hbmFnZXI/OiBSZXNvdXJjZU1hbmFnZXIsIHRpZHkgPSB0ZmMudGlkeSk6IHRmYy5UZW5zb3JbXXxcbiAgICBQcm9taXNlPHRmYy5UZW5zb3JbXT4ge1xuICBjb25zdCB2YWx1ZSA9XG4gICAgICAoKG5vZGU6IE5vZGUsIHRlbnNvck1hcDogTmFtZWRUZW5zb3JzTWFwLCBjb250ZXh0OiBFeGVjdXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgIHN3aXRjaCAobm9kZS5jYXRlZ29yeSkge1xuICAgICAgICAgIGNhc2UgJ2FyaXRobWV0aWMnOlxuICAgICAgICAgICAgcmV0dXJuIHRpZHkoKCkgPT4gYXJpdGhtZXRpYy5leGVjdXRlT3Aobm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSk7XG4gICAgICAgICAgY2FzZSAnYmFzaWNfbWF0aCc6XG4gICAgICAgICAgICByZXR1cm4gdGlkeSgoKSA9PiBiYXNpY01hdGguZXhlY3V0ZU9wKG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkpO1xuICAgICAgICAgIGNhc2UgJ2NvbnRyb2wnOlxuICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2wuZXhlY3V0ZU9wKG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCk7XG4gICAgICAgICAgY2FzZSAnY29udm9sdXRpb24nOlxuICAgICAgICAgICAgcmV0dXJuIHRpZHkoKCkgPT4gY29udm9sdXRpb24uZXhlY3V0ZU9wKG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkpO1xuICAgICAgICAgIGNhc2UgJ2NyZWF0aW9uJzpcbiAgICAgICAgICAgIHJldHVybiB0aWR5KCgpID0+IGNyZWF0aW9uLmV4ZWN1dGVPcChub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpKTtcbiAgICAgICAgICBjYXNlICdkeW5hbWljJzpcbiAgICAgICAgICAgIHJldHVybiBkeW5hbWljLmV4ZWN1dGVPcChub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpO1xuICAgICAgICAgIGNhc2UgJ2V2YWx1YXRpb24nOlxuICAgICAgICAgICAgcmV0dXJuIHRpZHkoKCkgPT4gZXZhbHVhdGlvbi5leGVjdXRlT3Aobm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSk7XG4gICAgICAgICAgY2FzZSAnaW1hZ2UnOlxuICAgICAgICAgICAgcmV0dXJuIHRpZHkoKCkgPT4gaW1hZ2UuZXhlY3V0ZU9wKG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkpO1xuICAgICAgICAgIGNhc2UgJ2dyYXBoJzpcbiAgICAgICAgICAgIHJldHVybiB0aWR5KCgpID0+IGdyYXBoLmV4ZWN1dGVPcChub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpKTtcbiAgICAgICAgICBjYXNlICdsb2dpY2FsJzpcbiAgICAgICAgICAgIHJldHVybiB0aWR5KCgpID0+IGxvZ2ljYWwuZXhlY3V0ZU9wKG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkpO1xuICAgICAgICAgIGNhc2UgJ21hdHJpY2VzJzpcbiAgICAgICAgICAgIHJldHVybiB0aWR5KCgpID0+IG1hdHJpY2VzLmV4ZWN1dGVPcChub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpKTtcbiAgICAgICAgICBjYXNlICdub3JtYWxpemF0aW9uJzpcbiAgICAgICAgICAgIHJldHVybiB0aWR5KFxuICAgICAgICAgICAgICAgICgpID0+IG5vcm1hbGl6YXRpb24uZXhlY3V0ZU9wKG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkpO1xuICAgICAgICAgIGNhc2UgJ3JhZ2dlZCc6XG4gICAgICAgICAgICByZXR1cm4gdGlkeSgoKSA9PiByYWdnZWQuZXhlY3V0ZU9wKG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkpO1xuICAgICAgICAgIGNhc2UgJ3JlZHVjdGlvbic6XG4gICAgICAgICAgICByZXR1cm4gdGlkeSgoKSA9PiByZWR1Y3Rpb24uZXhlY3V0ZU9wKG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkpO1xuICAgICAgICAgIGNhc2UgJ3NsaWNlX2pvaW4nOlxuICAgICAgICAgICAgcmV0dXJuIHRpZHkoKCkgPT4gc2xpY2VKb2luLmV4ZWN1dGVPcChub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpKTtcbiAgICAgICAgICBjYXNlICdzcGFyc2UnOlxuICAgICAgICAgICAgcmV0dXJuIHRpZHkoKCkgPT4gc3BhcnNlLmV4ZWN1dGVPcChub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpKTtcbiAgICAgICAgICBjYXNlICdzcGVjdHJhbCc6XG4gICAgICAgICAgICByZXR1cm4gdGlkeSgoKSA9PiBzcGVjdHJhbC5leGVjdXRlT3Aobm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSk7XG4gICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgIHJldHVybiB0aWR5KCgpID0+IHN0cmluZy5leGVjdXRlT3Aobm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSk7XG4gICAgICAgICAgY2FzZSAndHJhbnNmb3JtYXRpb24nOlxuICAgICAgICAgICAgcmV0dXJuIHRpZHkoXG4gICAgICAgICAgICAgICAgKCkgPT4gdHJhbnNmb3JtYXRpb24uZXhlY3V0ZU9wKG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkpO1xuICAgICAgICAgIGNhc2UgJ2hhc2hfdGFibGUnOlxuICAgICAgICAgICAgcmV0dXJuIGhhc2hUYWJsZS5leGVjdXRlT3AoXG4gICAgICAgICAgICAgICAgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0LCByZXNvdXJjZU1hbmFnZXIpO1xuICAgICAgICAgIGNhc2UgJ2N1c3RvbSc6XG4gICAgICAgICAgICBjb25zdCBvcE1hcHBlciA9IGdldFJlZ2lzdGVyZWRPcChub2RlLm9wKTtcbiAgICAgICAgICAgIGlmIChvcE1hcHBlciAmJiBvcE1hcHBlci5jdXN0b21FeGVjdXRvcikge1xuICAgICAgICAgICAgICByZXR1cm4gb3BNYXBwZXIuY3VzdG9tRXhlY3V0b3IoXG4gICAgICAgICAgICAgICAgICBuZXcgTm9kZVZhbHVlSW1wbChub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihgQ3VzdG9tIG9wICR7bm9kZS5vcH0gaXMgbm90IHJlZ2lzdGVyZWQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5rbm93biBvcCAnJHtub2RlLm9wfScuIEZpbGUgYW4gaXNzdWUgYXQgYCArXG4gICAgICAgICAgICAgICAgYGh0dHBzOi8vZ2l0aHViLmNvbS90ZW5zb3JmbG93L3RmanMvaXNzdWVzIHNvIHdlIGNhbiBhZGQgaXRgICtcbiAgICAgICAgICAgICAgICBgLCBvciByZWdpc3RlciBhIGN1c3RvbSBleGVjdXRpb24gd2l0aCB0Zi5yZWdpc3Rlck9wKClgKTtcbiAgICAgICAgfVxuICAgICAgfSkobm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KTtcbiAgaWYgKHRmYy51dGlsLmlzUHJvbWlzZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUudGhlbigoZGF0YSkgPT4gW10uY29uY2F0KGRhdGEpKTtcbiAgfVxuICByZXR1cm4gW10uY29uY2F0KHZhbHVlKTtcbn1cbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'BiasAdd':\n        case 'AddV2':\n        case 'Add': {\n            return [ops.add(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'AddN': {\n            return [ops.addN(getParamValue('tensors', node, tensorMap, context))];\n        }\n        case 'FloorMod':\n        case 'Mod':\n            return [ops.mod(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        case 'Mul':\n            return [ops.mul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        case 'RealDiv':\n        case 'Div': {\n            return [ops.div(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'DivNoNan': {\n            return [ops.divNoNan(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'FloorDiv': {\n            return [ops.floorDiv(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Sub': {\n            return [ops.sub(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Minimum': {\n            return [ops.minimum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Maximum': {\n            return [ops.maximum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Pow': {\n            return [ops.pow(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'SquaredDifference': {\n            return [ops.squaredDifference(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'arithmetic';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Abs':\n        case 'ComplexAbs':\n            return [ops.abs(getParamValue('x', node, tensorMap, context))];\n        case 'Acos':\n            return [ops.acos(getParamValue('x', node, tensorMap, context))];\n        case 'Acosh':\n            return [ops.acosh(getParamValue('x', node, tensorMap, context))];\n        case 'Asin':\n            return [ops.asin(getParamValue('x', node, tensorMap, context))];\n        case 'Asinh':\n            return [ops.asinh(getParamValue('x', node, tensorMap, context))];\n        case 'Atan':\n            return [ops.atan(getParamValue('x', node, tensorMap, context))];\n        case 'Atan2':\n            return [ops.atan2(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context))];\n        case 'Atanh':\n            return [ops.atanh(getParamValue('x', node, tensorMap, context))];\n        case 'Ceil':\n            return [ops.ceil(getParamValue('x', node, tensorMap, context))];\n        case 'Complex':\n            return [ops.complex(getParamValue('real', node, tensorMap, context), getParamValue('imag', node, tensorMap, context))];\n        case 'Cos':\n            return [ops.cos(getParamValue('x', node, tensorMap, context))];\n        case 'Cosh':\n            return [ops.cosh(getParamValue('x', node, tensorMap, context))];\n        case 'Elu':\n            return [ops.elu(getParamValue('x', node, tensorMap, context))];\n        case 'Erf':\n            return [ops.erf(getParamValue('x', node, tensorMap, context))];\n        case 'Exp':\n            return [ops.exp(getParamValue('x', node, tensorMap, context))];\n        case 'Expm1': {\n            return [ops.expm1(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Floor':\n            return [ops.floor(getParamValue('x', node, tensorMap, context))];\n        case 'Log':\n            return [ops.log(getParamValue('x', node, tensorMap, context))];\n        case 'Log1p': {\n            return [ops.log1p(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Imag':\n            return [ops.imag(getParamValue('x', node, tensorMap, context))];\n        case 'Neg':\n            return [ops.neg(getParamValue('x', node, tensorMap, context))];\n        case 'Reciprocal': {\n            return [ops.reciprocal(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Real':\n            return [ops.real(getParamValue('x', node, tensorMap, context))];\n        case 'Relu':\n            return [ops.relu(getParamValue('x', node, tensorMap, context))];\n        case 'Round': {\n            return [ops.round(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Selu':\n            return [ops.selu(getParamValue('x', node, tensorMap, context))];\n        case 'Sigmoid':\n            return [ops.sigmoid(getParamValue('x', node, tensorMap, context))];\n        case 'Sin':\n            return [ops.sin(getParamValue('x', node, tensorMap, context))];\n        case 'Sign': {\n            return [ops.sign(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Sinh': {\n            return [ops.sinh(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Softplus': {\n            return [ops.softplus(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Sqrt': {\n            return [ops.sqrt(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Square': {\n            return [ops.square(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Tanh': {\n            return [ops.tanh(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Tan':\n            return [ops.tan(getParamValue('x', node, tensorMap, context))];\n        case 'ClipByValue':\n            return [ops.clipByValue(getParamValue('x', node, tensorMap, context), getParamValue('clipValueMin', node, tensorMap, context), getParamValue('clipValueMax', node, tensorMap, context))];\n        case 'Relu6':\n            return [ops.relu6(getParamValue('x', node, tensorMap, context))];\n        case 'Rsqrt':\n            return [ops.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n        case 'LeakyRelu':\n            return [ops.leakyRelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n        case 'Prelu':\n            return [ops.prelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n        case 'IsNan':\n            return [ops.isNaN(getTensor(node.inputNames[0], tensorMap, context))];\n        case 'IsInf':\n            return [ops.isInf(getTensor(node.inputNames[0], tensorMap, context))];\n        case 'IsFinite':\n            return [ops.isFinite(getTensor(node.inputNames[0], tensorMap, context))];\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'basic_math';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Fill': {\n            const shape = getParamValue('shape', node, tensorMap, context);\n            const dtype = getParamValue('dtype', node, tensorMap, context);\n            const value = getParamValue('value', node, tensorMap, context);\n            return [ops.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n            const start = getParamValue('start', node, tensorMap, context);\n            const stop = getParamValue('stop', node, tensorMap, context);\n            const num = getParamValue('num', node, tensorMap, context);\n            return [ops.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n            const logits = getParamValue('logits', node, tensorMap, context);\n            const numSamples = getParamValue('numSamples', node, tensorMap, context);\n            const seed = getParamValue('seed', node, tensorMap, context);\n            return [ops.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n            const indices = getParamValue('indices', node, tensorMap, context);\n            const depth = getParamValue('depth', node, tensorMap, context);\n            const onValue = getParamValue('onValue', node, tensorMap, context);\n            const offValue = getParamValue('offValue', node, tensorMap, context);\n            const dtype = getParamValue('dtype', node, tensorMap, context);\n            return [ops.oneHot(indices, depth, onValue, offValue, dtype)];\n        }\n        case 'Ones': {\n            return [ops.ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'OnesLike': {\n            return [ops.onesLike(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'RandomStandardNormal': {\n            return [ops.randomStandardNormal(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context), getParamValue('seed', node, tensorMap, context))];\n        }\n        case 'RandomUniform': {\n            return [ops.randomUniform(\n                // tslint:disable-next-line:no-any\n                getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'RandomUniformInt': {\n            return [ops.randomUniformInt(getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('seed', node, tensorMap, context))];\n        }\n        case 'Range': {\n            const start = getParamValue('start', node, tensorMap, context);\n            const stop = getParamValue('stop', node, tensorMap, context);\n            const step = getParamValue('step', node, tensorMap, context);\n            return [ops.range(start, stop, step, getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'TruncatedNormal': {\n            const shape = getParamValue('shape', node, tensorMap, context);\n            const mean = getParamValue('mean', node, tensorMap, context);\n            const stdDev = getParamValue('stdDev', node, tensorMap, context);\n            const seed = getParamValue('seed', node, tensorMap, context);\n            return [ops.truncatedNormal(shape, mean, stdDev, getParamValue('dtype', node, tensorMap, context), seed)];\n        }\n        case 'Zeros': {\n            return [ops.zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'ZerosLike': {\n            return [ops.zerosLike(getParamValue('x', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'creation';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'LowerBound': {\n            const sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            return [ops.lowerBound(sortedSequence, values)];\n        }\n        case 'TopKV2': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const k = getParamValue('k', node, tensorMap, context);\n            const sorted = getParamValue('sorted', node, tensorMap, context);\n            const result = ops.topk(x, k, sorted);\n            return [result.values, result.indices];\n        }\n        case 'UpperBound': {\n            const sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            return [ops.upperBound(sortedSequence, values)];\n        }\n        case 'Unique': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const result = ops.unique(x);\n            return [result.values, result.indices];\n        }\n        case 'UniqueV2': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const result = ops.unique(x, axis);\n            return [result.values, result.indices];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'evaluation';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhbHVhdGlvbl9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL2V4ZWN1dG9ycy9ldmFsdWF0aW9uX2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILGlEQUFpRDtBQUNqRCxPQUFPLEtBQUssS0FBSyxNQUFNLGtEQUFrRCxDQUFDO0FBTTFFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFdEMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUNsQixDQUFDLElBQVUsRUFBRSxTQUEwQixFQUFFLE9BQXlCLEVBQ2pFLEdBQUcsR0FBRyxLQUFLLEVBQ0MsRUFBRTtJQUNULFFBQVEsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLEtBQUssWUFBWSxDQUFDLENBQUM7WUFDakIsTUFBTSxjQUFjLEdBQ2hCLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDbEQsQ0FBQztZQUNYLE1BQU0sTUFBTSxHQUNSLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUNoRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUNqRDtRQUNELEtBQUssUUFBUSxDQUFDLENBQUM7WUFDYixNQUFNLENBQUMsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDakUsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ2pFLE1BQU0sTUFBTSxHQUNSLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVksQ0FBQztZQUNqRSxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsS0FBSyxZQUFZLENBQUMsQ0FBQztZQUNqQixNQUFNLGNBQWMsR0FDaEIsYUFBYSxDQUFDLGdCQUFnQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUNsRCxDQUFDO1lBQ1gsTUFBTSxNQUFNLEdBQ1IsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ2hFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsS0FBSyxRQUFRLENBQUMsQ0FBQztZQUNiLE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUNqRSxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4QztRQUNELEtBQUssVUFBVSxDQUFDLENBQUM7WUFDZixNQUFNLENBQUMsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDakUsTUFBTSxJQUFJLEdBQ04sYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQzlELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ25DLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4QztRQUNEO1lBQ0UsTUFBTSxTQUFTLENBQUMsYUFBYSxJQUFJLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0tBQzlEO0FBQ0gsQ0FBQyxDQUFDO0FBRVYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWltcG9ydHMtZnJvbS1kaXN0XG5pbXBvcnQgKiBhcyB0Zk9wcyBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUvZGlzdC9vcHMvb3BzX2Zvcl9jb252ZXJ0ZXInO1xuXG5pbXBvcnQge05hbWVkVGVuc29yc01hcH0gZnJvbSAnLi4vLi4vZGF0YS90eXBlcyc7XG5pbXBvcnQge0V4ZWN1dGlvbkNvbnRleHR9IGZyb20gJy4uLy4uL2V4ZWN1dG9yL2V4ZWN1dGlvbl9jb250ZXh0JztcbmltcG9ydCB7SW50ZXJuYWxPcEV4ZWN1dG9yLCBOb2RlfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7Z2V0UGFyYW1WYWx1ZX0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlT3A6IEludGVybmFsT3BFeGVjdXRvciA9XG4gICAgKG5vZGU6IE5vZGUsIHRlbnNvck1hcDogTmFtZWRUZW5zb3JzTWFwLCBjb250ZXh0OiBFeGVjdXRpb25Db250ZXh0LFxuICAgICBvcHMgPSB0Zk9wcyk6XG4gICAgICAgIFRlbnNvcltdID0+IHtcbiAgICAgICAgICBzd2l0Y2ggKG5vZGUub3ApIHtcbiAgICAgICAgICAgIGNhc2UgJ0xvd2VyQm91bmQnOiB7XG4gICAgICAgICAgICAgIGNvbnN0IHNvcnRlZFNlcXVlbmNlID1cbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3NvcnRlZFNlcXVlbmNlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgVGVuc29yO1xuICAgICAgICAgICAgICBjb25zdCB2YWx1ZXMgPVxuICAgICAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgndmFsdWVzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICAgICAgICAgIHJldHVybiBbb3BzLmxvd2VyQm91bmQoc29ydGVkU2VxdWVuY2UsIHZhbHVlcyldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnVG9wS1YyJzoge1xuICAgICAgICAgICAgICBjb25zdCB4ID0gZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgICAgICAgICBjb25zdCBrID0gZ2V0UGFyYW1WYWx1ZSgnaycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyO1xuICAgICAgICAgICAgICBjb25zdCBzb3J0ZWQgPVxuICAgICAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnc29ydGVkJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBib29sZWFuO1xuICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBvcHMudG9wayh4LCBrLCBzb3J0ZWQpO1xuICAgICAgICAgICAgICByZXR1cm4gW3Jlc3VsdC52YWx1ZXMsIHJlc3VsdC5pbmRpY2VzXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ1VwcGVyQm91bmQnOiB7XG4gICAgICAgICAgICAgIGNvbnN0IHNvcnRlZFNlcXVlbmNlID1cbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3NvcnRlZFNlcXVlbmNlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgVGVuc29yO1xuICAgICAgICAgICAgICBjb25zdCB2YWx1ZXMgPVxuICAgICAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgndmFsdWVzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICAgICAgICAgIHJldHVybiBbb3BzLnVwcGVyQm91bmQoc29ydGVkU2VxdWVuY2UsIHZhbHVlcyldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnVW5pcXVlJzoge1xuICAgICAgICAgICAgICBjb25zdCB4ID0gZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBvcHMudW5pcXVlKHgpO1xuICAgICAgICAgICAgICByZXR1cm4gW3Jlc3VsdC52YWx1ZXMsIHJlc3VsdC5pbmRpY2VzXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ1VuaXF1ZVYyJzoge1xuICAgICAgICAgICAgICBjb25zdCB4ID0gZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgICAgICAgICBjb25zdCBheGlzID1cbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2F4aXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcjtcbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gb3BzLnVuaXF1ZSh4LCBheGlzKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFtyZXN1bHQudmFsdWVzLCByZXN1bHQuaW5kaWNlc107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoYE5vZGUgdHlwZSAke25vZGUub3B9IGlzIG5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuZXhwb3J0IGNvbnN0IENBVEVHT1JZID0gJ2V2YWx1YXRpb24nO1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'ResizeBilinear': {\n            const images = getParamValue('images', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            const alignCorners = getParamValue('alignCorners', node, tensorMap, context);\n            const halfPixelCenters = getParamValue('halfPixelCenters', node, tensorMap, context);\n            return [ops.image.resizeBilinear(images, [size[0], size[1]], alignCorners, halfPixelCenters)];\n        }\n        case 'ResizeNearestNeighbor': {\n            const images = getParamValue('images', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            const alignCorners = getParamValue('alignCorners', node, tensorMap, context);\n            const halfPixelCenters = getParamValue('halfPixelCenters', node, tensorMap, context);\n            return [ops.image.resizeNearestNeighbor(images, [size[0], size[1]], alignCorners, halfPixelCenters)];\n        }\n        case 'CropAndResize': {\n            const image = getParamValue('image', node, tensorMap, context);\n            const boxes = getParamValue('boxes', node, tensorMap, context);\n            const boxInd = getParamValue('boxInd', node, tensorMap, context);\n            const cropSize = getParamValue('cropSize', node, tensorMap, context);\n            const method = getParamValue('method', node, tensorMap, context);\n            const extrapolationValue = getParamValue('extrapolationValue', node, tensorMap, context);\n            return [ops.image.cropAndResize(image, boxes, boxInd, cropSize, method, extrapolationValue)];\n        }\n        case 'ImageProjectiveTransformV3': {\n            const images = getParamValue('images', node, tensorMap, context);\n            const transforms = getParamValue('transforms', node, tensorMap, context);\n            const outputShape = getParamValue('outputShape', node, tensorMap, context);\n            const fillValue = getParamValue('fillValue', node, tensorMap, context);\n            const interpolation = getParamValue('interpolation', node, tensorMap, context);\n            const fillMode = getParamValue('fillMode', node, tensorMap, context);\n            return [ops.image.transform(images, transforms, interpolation.toLowerCase(), fillMode.toLowerCase(), fillValue, outputShape)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'image';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Const': {\n            return tensorMap[node.name];\n        }\n        case 'PlaceholderWithDefault':\n            const def = getParamValue('default', node, tensorMap, context);\n            return [getTensor(node.name, tensorMap, context) || def];\n        case 'Placeholder':\n            return [getTensor(node.name, tensorMap, context)];\n        case 'Identity':\n        case 'StopGradient':\n        case 'FakeQuantWithMinMaxVars': { // This op is currently ignored.\n            const data = getParamValue('x', node, tensorMap, context);\n            return [cloneTensor(data)];\n        }\n        case 'IdentityN':\n            return getParamValue('x', node, tensorMap, context)\n                .map((t) => cloneTensor(t));\n        case 'Snapshot':\n            const snapshot = getParamValue('x', node, tensorMap, context);\n            return [cloneTensor(snapshot)];\n        case 'Shape':\n            return [ops.tensor1d(getParamValue('x', node, tensorMap, context).shape, 'int32')];\n        case 'ShapeN':\n            return getParamValue('x', node, tensorMap, context)\n                .map((t) => ops.tensor1d(t.shape));\n        case 'Size':\n            return [ops.scalar(getParamValue('x', node, tensorMap, context).size, 'int32')];\n        case 'Rank':\n            return [ops.scalar(getParamValue('x', node, tensorMap, context).rank, 'int32')];\n        case 'NoOp':\n            return [ops.scalar(1)];\n        case 'Print':\n            const input = getParamValue('x', node, tensorMap, context);\n            const data = getParamValue('data', node, tensorMap, context);\n            const message = getParamValue('message', node, tensorMap, context);\n            const summarize = getParamValue('summarize', node, tensorMap, context);\n            console.warn('The graph has a tf.print() operation,' +\n                'usually used for debugging, which slows down performance.');\n            console.log(message);\n            for (let i = 0; i < data.length; i++) {\n                console.log(Array.prototype.slice.call(data[i].dataSync())\n                    .slice(0, summarize));\n            }\n            return [input];\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'graph';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhfZXhlY3V0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9leGVjdXRvcnMvZ3JhcGhfZXhlY3V0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBR0gsaURBQWlEO0FBQ2pELE9BQU8sS0FBSyxLQUFLLE1BQU0sa0RBQWtELENBQUM7QUFNMUUsT0FBTyxFQUFDLFdBQVcsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRTlELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FDbEIsQ0FBQyxJQUFVLEVBQUUsU0FBMEIsRUFDdEMsT0FBeUIsRUFBRSxHQUFHLEdBQUcsS0FBSyxFQUFZLEVBQUU7SUFDbkQsUUFBUSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsS0FBSyxPQUFPLENBQUMsQ0FBQztZQUNaLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QjtRQUNELEtBQUssd0JBQXdCO1lBQzNCLE1BQU0sR0FBRyxHQUNMLGFBQWEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUNqRSxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQzNELEtBQUssYUFBYTtZQUNoQixPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDcEQsS0FBSyxVQUFVLENBQUM7UUFDaEIsS0FBSyxjQUFjLENBQUM7UUFDcEIsS0FBSyx5QkFBeUIsQ0FBQyxDQUFDLEVBQUcsZ0NBQWdDO1lBQ2pFLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxHQUFHLEVB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LE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1pbXBvcnRzLWZyb20tZGlzdFxuaW1wb3J0ICogYXMgdGZPcHMgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlL2Rpc3Qvb3BzL29wc19mb3JfY29udmVydGVyJztcblxuaW1wb3J0IHtOYW1lZFRlbnNvcnNNYXB9IGZyb20gJy4uLy4uL2RhdGEvdHlwZXMnO1xuaW1wb3J0IHtFeGVjdXRpb25Db250ZXh0fSBmcm9tICcuLi8uLi9leGVjdXRvci9leGVjdXRpb25fY29udGV4dCc7XG5pbXBvcnQge0ludGVybmFsT3BFeGVjdXRvciwgTm9kZX0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQge2Nsb25lVGVuc29yLCBnZXRQYXJhbVZhbHVlLCBnZXRUZW5zb3J9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgZXhlY3V0ZU9wOiBJbnRlcm5hbE9wRXhlY3V0b3IgPVxuICAgIChub2RlOiBOb2RlLCB0ZW5zb3JNYXA6IE5hbWVkVGVuc29yc01hcCxcbiAgICAgY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCwgb3BzID0gdGZPcHMpOiBUZW5zb3JbXSA9PiB7XG4gICAgICBzd2l0Y2ggKG5vZGUub3ApIHtcbiAgICAgICAgY2FzZSAnQ29uc3QnOiB7XG4gICAgICAgICAgcmV0dXJuIHRlbnNvck1hcFtub2RlLm5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1BsYWNlaG9sZGVyV2l0aERlZmF1bHQnOlxuICAgICAgICAgIGNvbnN0IGRlZiA9XG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2RlZmF1bHQnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgICAgICByZXR1cm4gW2dldFRlbnNvcihub2RlLm5hbWUsIHRlbnNvck1hcCwgY29udGV4dCkgfHwgZGVmXTtcbiAgICAgICAgY2FzZSAnUGxhY2Vob2xkZXInOlxuICAgICAgICAgIHJldHVybiBbZ2V0VGVuc29yKG5vZGUubmFtZSwgdGVuc29yTWFwLCBjb250ZXh0KV07XG4gICAgICAgIGNhc2UgJ0lkZW50aXR5JzpcbiAgICAgICAgY2FzZSAnU3RvcEdyYWRpZW50JzpcbiAgICAgICAgY2FzZSAnRmFrZVF1YW50V2l0aE1pbk1heFZhcnMnOiB7ICAvLyBUaGlzIG9wIGlzIGN1cnJlbnRseSBpZ25vcmVkLlxuICAgICAgICAgIGNvbnN0IGRhdGEgPSBnZXRQYXJhbVZhbHVlKCd4Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICAgICAgcmV0dXJuIFtjbG9uZVRlbnNvcihkYXRhKV07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnSWRlbnRpdHlOJzpcbiAgICAgICAgICByZXR1cm4gKGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcltdKVxuICAgICAgICAgICAgICAubWFwKCh0OiBUZW5zb3IpID0+IGNsb25lVGVuc29yKHQpKTtcbiAgICAgICAgY2FzZSAnU25hcHNob3QnOlxuICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID1cbiAgICAgICAgICAgICAgKGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcik7XG4gICAgICAgICAgcmV0dXJuIFtjbG9uZVRlbnNvcihzbmFwc2hvdCldO1xuICAgICAgICBjYXNlICdTaGFwZSc6XG4gICAgICAgICAgcmV0dXJuIFtvcHMudGVuc29yMWQoXG4gICAgICAgICAgICAgIChnZXRQYXJhbVZhbHVlKCd4Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpLnNoYXBlLFxuICAgICAgICAgICAgICAnaW50MzInKV07XG4gICAgICAgIGNhc2UgJ1NoYXBlTic6XG4gICAgICAgICAgcmV0dXJuIChnZXRQYXJhbVZhbHVlKCd4Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3JbXSlcbiAgICAgICAgICAgICAgLm1hcCgodDogVGVuc29yKSA9PiBvcHMudGVuc29yMWQodC5zaGFwZSkpO1xuICAgICAgICBjYXNlICdTaXplJzpcbiAgICAgICAgICByZXR1cm4gW29wcy5zY2FsYXIoXG4gICAgICAgICAgICAgIChnZXRQYXJhbVZhbHVlKCd4Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpLnNpemUsXG4gICAgICAgICAgICAgICdpbnQzMicpXTtcbiAgICAgICAgY2FzZSAnUmFuayc6XG4gICAgICAgICAgcmV0dXJuIFtvcHMuc2NhbGFyKFxuICAgICAgICAgICAgICAoZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yKS5yYW5rLFxuICAgICAgICAgICAgICAnaW50MzInKV07XG4gICAgICAgIGNhc2UgJ05vT3AnOlxuICAgICAgICAgIHJldHVybiBbb3BzLnNjYWxhcigxKV07XG4gICAgICAgIGNhc2UgJ1ByaW50JzpcbiAgICAgICAgICBjb25zdCBpbnB1dCA9IGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgICAgICBjb25zdCBkYXRhID1cbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnZGF0YScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yW107XG4gICAgICAgICAgY29uc3QgbWVzc2FnZSA9XG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ21lc3NhZ2UnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIHN0cmluZztcbiAgICAgICAgICBjb25zdCBzdW1tYXJpemUgPVxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzdW1tYXJpemUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcjtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICdUaGUgZ3JhcGggaGFzIGEgdGYucHJpbnQoKSBvcGVyYXRpb24sJyArXG4gICAgICAgICAgICAgICd1c3VhbGx5IHVzZWQgZm9yIGRlYnVnZ2luZywgd2hpY2ggc2xvd3MgZG93biBwZXJmb3JtYW5jZS4nKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRhdGFbaV0uZGF0YVN5bmMoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMCwgc3VtbWFyaXplKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBbaW5wdXRdO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgVHlwZUVycm9yKGBOb2RlIHR5cGUgJHtub2RlLm9wfSBpcyBub3QgaW1wbGVtZW50ZWRgKTtcbiAgICAgIH1cbiAgICB9O1xuXG5leHBvcnQgY29uc3QgQ0FURUdPUlkgPSAnZ3JhcGgnO1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Equal': {\n            return [ops.equal(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'NotEqual': {\n            return [ops.notEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Greater': {\n            return [ops.greater(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'GreaterEqual': {\n            return [ops.greaterEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Less': {\n            return [ops.less(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'LessEqual': {\n            return [ops.lessEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'LogicalAnd': {\n            return [ops.logicalAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'LogicalNot': {\n            return [ops.logicalNot(getParamValue('a', node, tensorMap, context))];\n        }\n        case 'LogicalOr': {\n            return [ops.logicalOr(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Select':\n        case 'SelectV2': {\n            return [ops.where(getParamValue('condition', node, tensorMap, context), getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'BitwiseAnd': {\n            return [ops.bitwiseAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'logical';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'BatchMatMul':\n        case 'BatchMatMulV2':\n        case 'MatMul':\n            return [ops.matMul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context), getParamValue('transposeA', node, tensorMap, context), getParamValue('transposeB', node, tensorMap, context))];\n        case 'Einsum':\n            return [ops.einsum(getParamValue('equation', node, tensorMap, context), ...getParamValue('tensors', node, tensorMap, context))];\n        case 'Transpose':\n            return [ops.transpose(getParamValue('x', node, tensorMap, context), getParamValue('perm', node, tensorMap, context))];\n        case '_FusedMatMul':\n            const [extraOp, activationFunc] = getParamValue('fusedOps', node, tensorMap, context);\n            const isBiasAdd = extraOp === 'biasadd';\n            const isPrelu = activationFunc === 'prelu';\n            const numArgs = getParamValue('numArgs', node, tensorMap, context);\n            const leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n            if (isBiasAdd) {\n                if (isPrelu && numArgs !== 2) {\n                    throw new Error('Fused MatMul with BiasAdd and Prelu must have two ' +\n                        'extra arguments: bias and alpha.');\n                }\n                if (!isPrelu && numArgs !== 1) {\n                    throw new Error('Fused MatMul with BiasAdd must have one extra argument: bias.');\n                }\n            }\n            const [biasArg, preluArg] = getParamValue('args', node, tensorMap, context);\n            return [ops.fused.matMul({\n                    a: getParamValue('a', node, tensorMap, context),\n                    b: getParamValue('b', node, tensorMap, context),\n                    transposeA: getParamValue('transposeA', node, tensorMap, context),\n                    transposeB: getParamValue('transposeB', node, tensorMap, context),\n                    bias: biasArg,\n                    activation: activationFunc,\n                    preluActivationWeights: preluArg,\n                    leakyreluAlpha\n                })];\n        case 'MatrixBandPart':\n            return [ops.linalg.bandPart(getParamValue('a', node, tensorMap, context), getParamValue('numLower', node, tensorMap, context), getParamValue('numUpper', node, tensorMap, context))];\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'matrices';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'EuclideanNorm':\n            return [ops.euclideanNorm(getParamValue('x', node, tensorMap, context), getParamValue('axis', node, tensorMap, context), getParamValue('keepDims', node, tensorMap, context))];\n        case 'FusedBatchNorm':\n        case 'FusedBatchNormV2': {\n            return [ops.batchNorm(getParamValue('x', node, tensorMap, context), getParamValue('mean', node, tensorMap, context), getParamValue('variance', node, tensorMap, context), getParamValue('offset', node, tensorMap, context), getParamValue('scale', node, tensorMap, context), getParamValue('epsilon', node, tensorMap, context))];\n        }\n        case 'FusedBatchNormV3': {\n            return [ops.batchNorm(getParamValue('x', node, tensorMap, context), getParamValue('mean', node, tensorMap, context), getParamValue('variance', node, tensorMap, context), getParamValue('offset', node, tensorMap, context), getParamValue('scale', node, tensorMap, context), getParamValue('epsilon', node, tensorMap, context))];\n        }\n        case 'LRN': {\n            return [ops.localResponseNormalization(getParamValue('x', node, tensorMap, context), getParamValue('radius', node, tensorMap, context), getParamValue('bias', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context), getParamValue('beta', node, tensorMap, context))];\n        }\n        case 'Softmax': {\n            return [ops.softmax(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'LogSoftmax': {\n            return [ops.logSoftmax(getParamValue('x', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'normalization';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsaXphdGlvbl9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL2V4ZWN1dG9ycy9ub3JtYWxpemF0aW9uX2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILGlEQUFpRDtBQUNqRCxPQUFPLEtBQUssS0FBSyxNQUFNLGtEQUFrRCxDQUFDO0FBTTFFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFdEMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUNsQixDQUFDLElBQVUsRUFBRSxTQUEwQixFQUN0QyxPQUF5QixFQUFFLEdBQUcsR0FBRyxLQUFLLEVBQVksRUFBRTtJQUNuRCxRQUFRLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZixLQUFLLGVBQWU7WUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQ3JCLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDdEQsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxFQUMzRCxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLEtBQUssZ0JBQWdCLENBQUM7UUFDdEIsS0FBSyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUNqQixhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQ3RELGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDekQsYUFBYSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUM3RCxhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzNELGFBQWEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDMUQsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDLENBQUMsQ0FBQztTQUNwRTtRQUNELEtBQUssa0JBQWtCLENBQUMsQ0FBQztZQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FDakIsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUN0RCxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQ3pELGFBQWEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDN0QsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUMzRCxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzFELGFBQWEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQyxDQUFDLENBQUM7U0FDcEU7UUFDRCxLQUFLLEtBQUssQ0FBQyxDQUFDO1lBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FDbEMsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDL0IsRUFDWixhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzNELGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDekQsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUMxRCxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQ2pFO1FBQ0QsS0FBSyxTQUFTLENBQUMsQ0FBQztZQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUNmLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQyxDQUFDLENBQUM7U0FDOUQ7UUFDRCxLQUFLLFlBQVksQ0FBQyxDQUFDO1lBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUNsQixhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0Q7WUFDRSxNQUFNLFNBQVMsQ0FBQyxhQUFhLElBQUksQ0FBQyxFQUFFLHFCQUFxQixDQUFDLENBQUM7S0FDOUQ7QUFDSCxDQUFDLENBQUM7QUFFTixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvciwgVGVuc29yM0QsIFRlbnNvcjREfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1pbXBvcnRzLWZyb20tZGlzdFxuaW1wb3J0ICogYXMgdGZPcHMgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlL2Rpc3Qvb3BzL29wc19mb3JfY29udmVydGVyJztcblxuaW1wb3J0IHtOYW1lZFRlbnNvcnNNYXB9IGZyb20gJy4uLy4uL2RhdGEvdHlwZXMnO1xuaW1wb3J0IHtFeGVjdXRpb25Db250ZXh0fSBmcm9tICcuLi8uLi9leGVjdXRvci9leGVjdXRpb25fY29udGV4dCc7XG5pbXBvcnQge0ludGVybmFsT3BFeGVjdXRvciwgTm9kZX0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQge2dldFBhcmFtVmFsdWV9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgZXhlY3V0ZU9wOiBJbnRlcm5hbE9wRXhlY3V0b3IgPVxuICAgIChub2RlOiBOb2RlLCB0ZW5zb3JNYXA6IE5hbWVkVGVuc29yc01hcCxcbiAgICAgY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCwgb3BzID0gdGZPcHMpOiBUZW5zb3JbXSA9PiB7XG4gICAgICBzd2l0Y2ggKG5vZGUub3ApIHtcbiAgICAgICAgY2FzZSAnRXVjbGlkZWFuTm9ybSc6XG4gICAgICAgICAgcmV0dXJuIFtvcHMuZXVjbGlkZWFuTm9ybShcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdheGlzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXJbXSxcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgna2VlcERpbXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIGJvb2xlYW4pXTtcbiAgICAgICAgY2FzZSAnRnVzZWRCYXRjaE5vcm0nOlxuICAgICAgICBjYXNlICdGdXNlZEJhdGNoTm9ybVYyJzoge1xuICAgICAgICAgIHJldHVybiBbb3BzLmJhdGNoTm9ybShcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdtZWFuJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3ZhcmlhbmNlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ29mZnNldCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzY2FsZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdlcHNpbG9uJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXIpXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdGdXNlZEJhdGNoTm9ybVYzJzoge1xuICAgICAgICAgIHJldHVybiBbb3BzLmJhdGNoTm9ybShcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdtZWFuJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3ZhcmlhbmNlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ29mZnNldCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzY2FsZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdlcHNpbG9uJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXIpXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdMUk4nOiB7XG4gICAgICAgICAgcmV0dXJuIFtvcHMubG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb24oXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjNEIHxcbiAgICAgICAgICAgICAgICAgIFRlbnNvcjRELFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdyYWRpdXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnYmlhcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdhbHBoYScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdiZXRhJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXIpXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdTb2Z0bWF4Jzoge1xuICAgICAgICAgIHJldHVybiBbb3BzLnNvZnRtYXgoXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcildO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0xvZ1NvZnRtYXgnOiB7XG4gICAgICAgICAgcmV0dXJuIFtvcHMubG9nU29mdG1heChcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yKV07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoYE5vZGUgdHlwZSAke25vZGUub3B9IGlzIG5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgfVxuICAgIH07XG5cbmV4cG9ydCBjb25zdCBDQVRFR09SWSA9ICdub3JtYWxpemF0aW9uJztcbiJdfQ==","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'RaggedGather': {\n            const { outputNestedSplits, outputDenseValues, } = ops.raggedGather(getParamValue('paramsNestedSplits', node, tensorMap, context), getParamValue('paramsDenseValues', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('outputRaggedRank', node, tensorMap, context));\n            return outputNestedSplits.concat(outputDenseValues);\n        }\n        case 'RaggedRange': {\n            const { rtNestedSplits, rtDenseValues } = ops.raggedRange(getParamValue('starts', node, tensorMap, context), getParamValue('limits', node, tensorMap, context), getParamValue('splits', node, tensorMap, context));\n            return [rtNestedSplits, rtDenseValues];\n        }\n        case 'RaggedTensorToTensor': {\n            return [ops.raggedTensorToTensor(getParamValue('shape', node, tensorMap, context), getParamValue('values', node, tensorMap, context), getParamValue('defaultValue', node, tensorMap, context), getParamValue('rowPartitionTensors', node, tensorMap, context), getParamValue('rowPartitionTypes', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'ragged';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFnZ2VkX2V4ZWN1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvZXhlY3V0b3JzL3JhZ2dlZF9leGVjdXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxpREFBaUQ7QUFDakQsT0FBTyxLQUFLLEtBQUssTUFBTSxrREFBa0QsQ0FBQztBQU0xRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRXRDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FDbEIsQ0FBQyxJQUFVLEVBQUUsU0FBMEIsRUFBRSxPQUF5QixFQUNqRSxHQUFHLEdBQUcsS0FBSyxFQUFZLEVBQUU7SUFDeEIsUUFBUSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsS0FBSyxjQUFjLENBQUMsQ0FBQztZQUNuQixNQUFNLEVBQ0osa0JBQWtCLEVBQ2xCLGlCQUFpQixHQUNsQixHQUNHLEdBQUcsQ0FBQyxZQUFZLENBQ1osYUFBYSxDQUNULG9CQUFvQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUN0QyxFQUNaLGFBQWEsQ0FDVCxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUM1RCxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzVELGFBQWEsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDaEQsQ0FBQyxDQUFDO1lBQ3BCLE9BQU8sa0JBQWtCLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDckQ7UUFDRCxLQUFLLGFBQWEsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sRUFBQyxjQUFjLEVBQUUsYUFBYSxFQUFDLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FDbkQsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUMzRCxhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzNELGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQyxDQUFDO1lBQ2pFLE9BQU8sQ0FBQyxjQUFjLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDeEM7UUFDRCxLQUFLLHNCQUFzQixDQUFDLENBQUM7WUFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FDNUIsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUMxRCxhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLEVBQzdELGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDakUsYUFBYSxDQUFDLHFCQUFxQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUNqRCxFQUNaLGFBQWEsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDL0MsQ0FBQyxDQUFDLENBQUM7U0FDcEI7UUFDRDtZQUNFLE1BQU0sU0FBUyxDQUFDLGFBQWEsSUFBSSxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQztLQUM5RDtBQUNILENBQUMsQ0FBQztBQUVOLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7VGVuc29yLCBUZW5zb3IxRH0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8taW1wb3J0cy1mcm9tLWRpc3RcbmltcG9ydCAqIGFzIHRmT3BzIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L29wcy9vcHNfZm9yX2NvbnZlcnRlcic7XG5cbmltcG9ydCB7TmFtZWRUZW5zb3JzTWFwfSBmcm9tICcuLi8uLi9kYXRhL3R5cGVzJztcbmltcG9ydCB7RXhlY3V0aW9uQ29udGV4dH0gZnJvbSAnLi4vLi4vZXhlY3V0b3IvZXhlY3V0aW9uX2NvbnRleHQnO1xuaW1wb3J0IHtJbnRlcm5hbE9wRXhlY3V0b3IsIE5vZGV9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHtnZXRQYXJhbVZhbHVlfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVPcDogSW50ZXJuYWxPcEV4ZWN1dG9yID1cbiAgICAobm9kZTogTm9kZSwgdGVuc29yTWFwOiBOYW1lZFRlbnNvcnNNYXAsIGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQsXG4gICAgIG9wcyA9IHRmT3BzKTogVGVuc29yW10gPT4ge1xuICAgICAgc3dpdGNoIChub2RlLm9wKSB7XG4gICAgICAgIGNhc2UgJ1JhZ2dlZEdhdGhlcic6IHtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBvdXRwdXROZXN0ZWRTcGxpdHMsXG4gICAgICAgICAgICBvdXRwdXREZW5zZVZhbHVlcyxcbiAgICAgICAgICB9ID1cbiAgICAgICAgICAgICAgb3BzLnJhZ2dlZEdhdGhlcihcbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgJ3BhcmFtc05lc3RlZFNwbGl0cycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXNcbiAgICAgICAgICAgICAgICAgICAgICBUZW5zb3JbXSxcbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgJ3BhcmFtc0RlbnNlVmFsdWVzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpbmRpY2VzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdvdXRwdXRSYWdnZWRSYW5rJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgICAgIG51bWJlcik7XG4gICAgICAgICAgcmV0dXJuIG91dHB1dE5lc3RlZFNwbGl0cy5jb25jYXQob3V0cHV0RGVuc2VWYWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1JhZ2dlZFJhbmdlJzoge1xuICAgICAgICAgIGNvbnN0IHtydE5lc3RlZFNwbGl0cywgcnREZW5zZVZhbHVlc30gPSBvcHMucmFnZ2VkUmFuZ2UoXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3N0YXJ0cycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdsaW1pdHMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnc3BsaXRzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpO1xuICAgICAgICAgIHJldHVybiBbcnROZXN0ZWRTcGxpdHMsIHJ0RGVuc2VWYWx1ZXNdO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1JhZ2dlZFRlbnNvclRvVGVuc29yJzoge1xuICAgICAgICAgIHJldHVybiBbb3BzLnJhZ2dlZFRlbnNvclRvVGVuc29yKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzaGFwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd2YWx1ZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjFELFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdkZWZhdWx0VmFsdWUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgncm93UGFydGl0aW9uVGVuc29ycycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXNcbiAgICAgICAgICAgICAgICAgIFRlbnNvcltdLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdyb3dQYXJ0aXRpb25UeXBlcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXNcbiAgICAgICAgICAgICAgICAgIHN0cmluZ1tdKV07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoYE5vZGUgdHlwZSAke25vZGUub3B9IGlzIG5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgfVxuICAgIH07XG5cbmV4cG9ydCBjb25zdCBDQVRFR09SWSA9ICdyYWdnZWQnO1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Max': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [ops.max(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Mean': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [ops.mean(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Min': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [ops.min(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Sum': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [ops.sum(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'All': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [ops.all(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Any': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [ops.any(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'ArgMax': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [ops.argMax(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'ArgMin': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [ops.argMin(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'Prod': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [ops.prod(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Cumprod': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const exclusive = getParamValue('exclusive', node, tensorMap, context);\n            const reverse = getParamValue('reverse', node, tensorMap, context);\n            return [ops.cumprod(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];\n        }\n        case 'Cumsum': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const exclusive = getParamValue('exclusive', node, tensorMap, context);\n            const reverse = getParamValue('reverse', node, tensorMap, context);\n            return [ops.cumsum(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];\n        }\n        case 'Bincount':\n            const x = getParamValue('x', node, tensorMap, context);\n            const weights = getParamValue('weights', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            return [ops.bincount(x, weights, size)];\n        case 'DenseBincount': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const weights = getParamValue('weights', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            const binaryOutput = getParamValue('binaryOutput', node, tensorMap, context);\n            return [ops.denseBincount(x, weights, size, binaryOutput)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'reduction';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tidy, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'ConcatV2':\n        case 'Concat': {\n            const n = getParamValue('n', node, tensorMap, context);\n            const axis = getParamValue('axis', node, tensorMap, context);\n            let inputs = getParamValue('tensors', node, tensorMap, context);\n            inputs = inputs.slice(0, n);\n            return [ops.concat(inputs, axis)];\n        }\n        case 'Gather': {\n            const input = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [ops.gather(input, ops.cast(indices, 'int32'), 0)];\n        }\n        case 'GatherV2': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const batchDims = getParamValue('batchDims', node, tensorMap, context);\n            const input = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [ops.gather(input, ops.cast(indices, 'int32'), axis, batchDims)];\n        }\n        case 'Reverse': {\n            const dims = getParamValue('dims', node, tensorMap, context);\n            const axis = [];\n            for (let i = 0; i < dims.length; i++) {\n                if (dims[i]) {\n                    axis.push(i);\n                }\n            }\n            const input = getParamValue('x', node, tensorMap, context);\n            return [ops.reverse(input, axis)];\n        }\n        case 'ReverseV2': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const input = getParamValue('x', node, tensorMap, context);\n            return [ops.reverse(input, axis)];\n        }\n        case 'Slice': {\n            // tslint:disable-next-line:no-any\n            const begin = getParamValue('begin', node, tensorMap, context);\n            // tslint:disable-next-line:no-any\n            const size = getParamValue('size', node, tensorMap, context);\n            return [ops.slice(getParamValue('x', node, tensorMap, context), begin, size)];\n        }\n        case 'StridedSlice': {\n            const begin = getParamValue('begin', node, tensorMap, context);\n            const end = getParamValue('end', node, tensorMap, context);\n            const strides = getParamValue('strides', node, tensorMap, context);\n            const beginMask = getParamValue('beginMask', node, tensorMap, context);\n            const endMask = getParamValue('endMask', node, tensorMap, context);\n            const ellipsisMask = getParamValue('ellipsisMask', node, tensorMap, context);\n            const newAxisMask = getParamValue('newAxisMask', node, tensorMap, context);\n            const shrinkAxisMask = getParamValue('shrinkAxisMask', node, tensorMap, context);\n            const tensor = getParamValue('x', node, tensorMap, context);\n            return [ops.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];\n        }\n        case 'Pack': {\n            return tidy(() => {\n                const axis = getParamValue('axis', node, tensorMap, context);\n                const tensors = getParamValue('tensors', node, tensorMap, context);\n                // Reshape the tensors to the first tensor's shape if they don't\n                // match.\n                const shape = tensors[0].shape;\n                const squeezedShape = ops.squeeze(tensors[0]).shape;\n                const mapped = tensors.map(tensor => {\n                    const sameShape = util.arraysEqual(tensor.shape, shape);\n                    if (!sameShape &&\n                        !util.arraysEqual(ops.squeeze(tensor).shape, squeezedShape)) {\n                        throw new Error('the input tensors shape does not match');\n                    }\n                    return sameShape ? tensor : ops.reshape(tensor, shape);\n                });\n                return [ops.stack(mapped, axis)];\n            });\n        }\n        case 'Unpack': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const tensor = getParamValue('tensor', node, tensorMap, context);\n            return ops.unstack(tensor, axis);\n        }\n        case 'Tile': {\n            const reps = getParamValue('reps', node, tensorMap, context);\n            return [ops.tile(getParamValue('x', node, tensorMap, context), reps)];\n        }\n        case 'Split':\n        case 'SplitV': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);\n            const tensor = getParamValue('x', node, tensorMap, context);\n            return ops.split(tensor, numOrSizeSplits, axis);\n        }\n        case 'ScatterNd': {\n            const indices = getParamValue('indices', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            const shape = getParamValue('shape', node, tensorMap, context);\n            return [ops.scatterND(indices, values, shape)];\n        }\n        case 'GatherNd': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [ops.gatherND(x, indices)];\n        }\n        case 'SparseToDense': {\n            const indices = getParamValue('sparseIndices', node, tensorMap, context);\n            const shape = getParamValue('outputShape', node, tensorMap, context);\n            const sparseValues = getParamValue('sparseValues', node, tensorMap, context);\n            const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n            return [ops.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ?\n                    defaultValue :\n                    ops.cast(defaultValue, sparseValues.dtype))];\n        }\n        case 'TensorScatterUpdate': {\n            const indices = getParamValue('indices', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            const tensor = getParamValue('tensor', node, tensorMap, context);\n            return [ops.tensorScatterUpdate(tensor, indices, values)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'slice_join';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'SparseFillEmptyRows': {\n            const { outputIndices, outputValues, emptyRowIndicator, reverseIndexMap } = ops.sparse.sparseFillEmptyRows(getParamValue('indices', node, tensorMap, context), getParamValue('values', node, tensorMap, context), getParamValue('denseShape', node, tensorMap, context), getParamValue('defaultValue', node, tensorMap, context));\n            return [\n                outputIndices, outputValues, emptyRowIndicator, reverseIndexMap\n            ];\n        }\n        case 'SparseReshape': {\n            const { outputIndices, outputShape } = ops.sparse.sparseReshape(getParamValue('inputIndices', node, tensorMap, context), getParamValue('inputShape', node, tensorMap, context), getParamValue('newShape', node, tensorMap, context));\n            return [outputIndices, outputShape];\n        }\n        case 'SparseSegmentMean': {\n            const outputData = ops.sparse.sparseSegmentMean(getParamValue('data', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('segmentIds', node, tensorMap, context));\n            return [outputData];\n        }\n        case 'SparseSegmentSum': {\n            const outputData = ops.sparse.sparseSegmentSum(getParamValue('data', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('segmentIds', node, tensorMap, context));\n            return [outputData];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'sparse';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhcnNlX2V4ZWN1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvZXhlY3V0b3JzL3NwYXJzZV9leGVjdXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxpREFBaUQ7QUFDakQsT0FBTyxLQUFLLEtBQUssTUFBTSxrREFBa0QsQ0FBQztBQU0xRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRXRDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FDbEIsQ0FBQyxJQUFVLEVBQUUsU0FBMEIsRUFDdEMsT0FBeUIsRUFBRSxHQUFHLEdBQUcsS0FBSyxFQUFZLEVBQUU7SUFDbkQsUUFBUSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsS0FBSyxxQkFBcUIsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sRUFDSixhQUFhLEVBQ2IsWUFBWSxFQUNaLGlCQUFpQixFQUNqQixlQUFlLEVBQ2hCLEdBQ0csR0FBRyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FDMUIsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDckMsRUFDWixhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLEVBQzdELGFBQWEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQ3hDLEVBQ1osYUFBYSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDNUMsQ0FBQyxDQUFDO1lBQ3BCLE9BQU87Z0JBQ0wsYUFBYSxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxlQUFlO2FBQ2hFLENBQUM7U0FDSDtRQUNELEtBQUssZUFBZSxDQUFDLENBQUM7WUFDcEIsTUFBTSxFQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FDekQsYUFBYSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDMUMsRUFDWixhQUFhLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLEVBQ2pFLGFBQWEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQyxDQUFDO1lBQ3JFLE9BQU8sQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDckM7UUFDRCxLQUFLLG1CQUFtQixDQUFDLENBQUM7WUFDeEIsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FDM0MsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUN6RCxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLEVBQzlELGFBQWEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQ3hDLENBQUMsQ0FBQztZQUNsQixPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDckI7UUFDRCxLQUFLLGtCQUFrQixDQUFDLENBQUM7WUFDdkIsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FDMUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUN6RCxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLEVBQzlELGFBQWEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQ3hDLENBQUMsQ0FBQztZQUNsQixPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDckI7UUFDRDtZQUNFLE1BQU0sU0FBUyxDQUFDLGFBQWEsSUFBSSxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQztLQUM5RDtBQUNILENBQUMsQ0FBQztBQUVOLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7U2NhbGFyLCBUZW5zb3IsIFRlbnNvcjFELCBUZW5zb3IyRH0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8taW1wb3J0cy1mcm9tLWRpc3RcbmltcG9ydCAqIGFzIHRmT3BzIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L29wcy9vcHNfZm9yX2NvbnZlcnRlcic7XG5cbmltcG9ydCB7TmFtZWRUZW5zb3JzTWFwfSBmcm9tICcuLi8uLi9kYXRhL3R5cGVzJztcbmltcG9ydCB7RXhlY3V0aW9uQ29udGV4dH0gZnJvbSAnLi4vLi4vZXhlY3V0b3IvZXhlY3V0aW9uX2NvbnRleHQnO1xuaW1wb3J0IHtJbnRlcm5hbE9wRXhlY3V0b3IsIE5vZGV9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHtnZXRQYXJhbVZhbHVlfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVPcDogSW50ZXJuYWxPcEV4ZWN1dG9yID1cbiAgICAobm9kZTogTm9kZSwgdGVuc29yTWFwOiBOYW1lZFRlbnNvcnNNYXAsXG4gICAgIGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQsIG9wcyA9IHRmT3BzKTogVGVuc29yW10gPT4ge1xuICAgICAgc3dpdGNoIChub2RlLm9wKSB7XG4gICAgICAgIGNhc2UgJ1NwYXJzZUZpbGxFbXB0eVJvd3MnOiB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgb3V0cHV0SW5kaWNlcyxcbiAgICAgICAgICAgIG91dHB1dFZhbHVlcyxcbiAgICAgICAgICAgIGVtcHR5Um93SW5kaWNhdG9yLFxuICAgICAgICAgICAgcmV2ZXJzZUluZGV4TWFwXG4gICAgICAgICAgfSA9XG4gICAgICAgICAgICAgIG9wcy5zcGFyc2Uuc3BhcnNlRmlsbEVtcHR5Um93cyhcbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2luZGljZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgICAgICAgICAgVGVuc29yMkQsXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd2YWx1ZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjFELFxuICAgICAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnZGVuc2VTaGFwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXNcbiAgICAgICAgICAgICAgICAgICAgICBUZW5zb3IxRCxcbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2RlZmF1bHRWYWx1ZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXNcbiAgICAgICAgICAgICAgICAgICAgICBTY2FsYXIpO1xuICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBvdXRwdXRJbmRpY2VzLCBvdXRwdXRWYWx1ZXMsIGVtcHR5Um93SW5kaWNhdG9yLCByZXZlcnNlSW5kZXhNYXBcbiAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1NwYXJzZVJlc2hhcGUnOiB7XG4gICAgICAgICAgY29uc3Qge291dHB1dEluZGljZXMsIG91dHB1dFNoYXBlfSA9IG9wcy5zcGFyc2Uuc3BhcnNlUmVzaGFwZShcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnaW5wdXRJbmRpY2VzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgVGVuc29yMkQsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2lucHV0U2hhcGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjFELFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCduZXdTaGFwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yMUQpO1xuICAgICAgICAgIHJldHVybiBbb3V0cHV0SW5kaWNlcywgb3V0cHV0U2hhcGVdO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1NwYXJzZVNlZ21lbnRNZWFuJzoge1xuICAgICAgICAgIGNvbnN0IG91dHB1dERhdGEgPSBvcHMuc3BhcnNlLnNwYXJzZVNlZ21lbnRNZWFuKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdkYXRhJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2luZGljZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjFELFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzZWdtZW50SWRzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgVGVuc29yMUQpO1xuICAgICAgICAgIHJldHVybiBbb3V0cHV0RGF0YV07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnU3BhcnNlU2VnbWVudFN1bSc6IHtcbiAgICAgICAgICBjb25zdCBvdXRwdXREYXRhID0gb3BzLnNwYXJzZS5zcGFyc2VTZWdtZW50U3VtKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdkYXRhJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2luZGljZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjFELFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzZWdtZW50SWRzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgVGVuc29yMUQpO1xuICAgICAgICAgIHJldHVybiBbb3V0cHV0RGF0YV07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoYE5vZGUgdHlwZSAke25vZGUub3B9IGlzIG5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgfVxuICAgIH07XG5cbmV4cG9ydCBjb25zdCBDQVRFR09SWSA9ICdzcGFyc2UnO1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'FFT': {\n            return [ops.fft(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'IFFT': {\n            return [ops.ifft(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'RFFT': {\n            return [ops.rfft(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'IRFFT': {\n            return [ops.irfft(getParamValue('x', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'spectral';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY3RyYWxfZXhlY3V0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9leGVjdXRvcnMvc3BlY3RyYWxfZXhlY3V0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBR0gsaURBQWlEO0FBQ2pELE9BQU8sS0FBSyxLQUFLLE1BQU0sa0RBQWtELENBQUM7QUFNMUUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUV0QyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQ2xCLENBQUMsSUFBVSxFQUFFLFNBQTBCLEVBQUUsT0FBeUIsRUFDakUsR0FBRyxHQUFHLEtBQUssRUFBWSxFQUFFO0lBQ3BCLFFBQVEsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLEtBQUssS0FBSyxDQUFDLENBQUM7WUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FDWCxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsS0FBSyxNQUFNLENBQUMsQ0FBQztZQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUNaLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQyxDQUFDLENBQUM7U0FDOUQ7UUFDRCxLQUFLLE1BQU0sQ0FBQyxDQUFDO1lBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQ1osYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDLENBQUMsQ0FBQztTQUM5RDtRQUNELEtBQUssT0FBTyxDQUFDLENBQUM7WUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FDYixhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0Q7WUFDRSxNQUFNLFNBQVMsQ0FBQyxhQUFhLElBQUksQ0FBQyxFQUFFLHFCQUFxQixDQUFDLENBQUM7S0FDOUQ7QUFDSCxDQUFDLENBQUM7QUFFVixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8taW1wb3J0cy1mcm9tLWRpc3RcbmltcG9ydCAqIGFzIHRmT3BzIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L29wcy9vcHNfZm9yX2NvbnZlcnRlcic7XG5cbmltcG9ydCB7TmFtZWRUZW5zb3JzTWFwfSBmcm9tICcuLi8uLi9kYXRhL3R5cGVzJztcbmltcG9ydCB7RXhlY3V0aW9uQ29udGV4dH0gZnJvbSAnLi4vLi4vZXhlY3V0b3IvZXhlY3V0aW9uX2NvbnRleHQnO1xuaW1wb3J0IHtJbnRlcm5hbE9wRXhlY3V0b3IsIE5vZGV9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHtnZXRQYXJhbVZhbHVlfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVPcDogSW50ZXJuYWxPcEV4ZWN1dG9yID1cbiAgICAobm9kZTogTm9kZSwgdGVuc29yTWFwOiBOYW1lZFRlbnNvcnNNYXAsIGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQsXG4gICAgIG9wcyA9IHRmT3BzKTogVGVuc29yW10gPT4ge1xuICAgICAgICAgIHN3aXRjaCAobm9kZS5vcCkge1xuICAgICAgICAgICAgY2FzZSAnRkZUJzoge1xuICAgICAgICAgICAgICByZXR1cm4gW29wcy5mZnQoXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd4Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ0lGRlQnOiB7XG4gICAgICAgICAgICAgIHJldHVybiBbb3BzLmlmZnQoXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd4Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ1JGRlQnOiB7XG4gICAgICAgICAgICAgIHJldHVybiBbb3BzLnJmZnQoXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd4Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ0lSRkZUJzoge1xuICAgICAgICAgICAgICByZXR1cm4gW29wcy5pcmZmdChcbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcildO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKGBOb2RlIHR5cGUgJHtub2RlLm9wfSBpcyBub3QgaW1wbGVtZW50ZWRgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbmV4cG9ydCBjb25zdCBDQVRFR09SWSA9ICdzcGVjdHJhbCc7XG4iXX0=","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'StaticRegexReplace': {\n            return [ops.string.staticRegexReplace(getParamValue('input', node, tensorMap, context), getParamValue('pattern', node, tensorMap, context), getParamValue('rewrite', node, tensorMap, context), getParamValue('replaceGlobal', node, tensorMap, context))];\n        }\n        case 'StringNGrams': {\n            const { nGrams, nGramsSplits } = ops.string.stringNGrams(getParamValue('data', node, tensorMap, context), getParamValue('dataSplits', node, tensorMap, context), getParamValue('separator', node, tensorMap, context), getParamValue('nGramWidths', node, tensorMap, context), getParamValue('leftPad', node, tensorMap, context), getParamValue('rightPad', node, tensorMap, context), getParamValue('padWidth', node, tensorMap, context), getParamValue('preserveShortSequences', node, tensorMap, context));\n            return [nGrams, nGramsSplits];\n        }\n        case 'StringSplit': {\n            const { indices, values, shape } = ops.string.stringSplit(getParamValue('input', node, tensorMap, context), getParamValue('delimiter', node, tensorMap, context), getParamValue('skipEmpty', node, tensorMap, context));\n            return [indices, values, shape];\n        }\n        case 'StringToHashBucketFast': {\n            const output = ops.string.stringToHashBucketFast(getParamValue('input', node, tensorMap, context), getParamValue('numBuckets', node, tensorMap, context));\n            return [output];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'string';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nX2V4ZWN1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvZXhlY3V0b3JzL3N0cmluZ19leGVjdXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxpREFBaUQ7QUFDakQsT0FBTyxLQUFLLEtBQUssTUFBTSxrREFBa0QsQ0FBQztBQU0xRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRXRDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FDbEIsQ0FBQyxJQUFVLEVBQUUsU0FBMEIsRUFDdEMsT0FBeUIsRUFBRSxHQUFHLEdBQUcsS0FBSyxFQUFZLEVBQUU7SUFDbkQsUUFBUSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsS0FBSyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUNuQyxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzFELGFBQWEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDNUQsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUM1RCxhQUFhLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFZLENBQ3BFLENBQUMsQ0FBQztTQUNKO1FBQ0QsS0FBSyxjQUFjLENBQUMsQ0FBQztZQUNuQixNQUFNLEVBQUMsTUFBTSxFQUFFLFlBQVksRUFBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUNsRCxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLEVBQzNELGFBQWEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDL0QsYUFBYSxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUM5RCxhQUFhLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUN6QyxFQUNaLGFBQWEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDNUQsYUFBYSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUM3RCxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzdELGFBQWEsQ0FDVCx3QkFBd0IsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDM0MsQ0FBQyxDQUFDO1lBQ2pCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDL0I7UUFDRCxLQUFLLGFBQWEsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sRUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUNuRCxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLEVBQzVELGFBQWEsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDOUQsYUFBYSxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBWSxDQUFDLENBQUM7WUFDckUsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDakM7UUFDRCxLQUFLLHdCQUF3QixDQUFDLENBQUM7WUFDN0IsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FDNUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUMxRCxhQUFhLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQztZQUNyRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDakI7UUFDRDtZQUNFLE1BQU0sU0FBUyxDQUFDLGFBQWEsSUFBSSxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQztLQUM5RDtBQUNILENBQUMsQ0FBQztBQUVOLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7U2NhbGFyLCBUZW5zb3IsIFRlbnNvcjFEfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1pbXBvcnRzLWZyb20tZGlzdFxuaW1wb3J0ICogYXMgdGZPcHMgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlL2Rpc3Qvb3BzL29wc19mb3JfY29udmVydGVyJztcblxuaW1wb3J0IHtOYW1lZFRlbnNvcnNNYXB9IGZyb20gJy4uLy4uL2RhdGEvdHlwZXMnO1xuaW1wb3J0IHtFeGVjdXRpb25Db250ZXh0fSBmcm9tICcuLi8uLi9leGVjdXRvci9leGVjdXRpb25fY29udGV4dCc7XG5pbXBvcnQge0ludGVybmFsT3BFeGVjdXRvciwgTm9kZX0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQge2dldFBhcmFtVmFsdWV9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgZXhlY3V0ZU9wOiBJbnRlcm5hbE9wRXhlY3V0b3IgPVxuICAgIChub2RlOiBOb2RlLCB0ZW5zb3JNYXA6IE5hbWVkVGVuc29yc01hcCxcbiAgICAgY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCwgb3BzID0gdGZPcHMpOiBUZW5zb3JbXSA9PiB7XG4gICAgICBzd2l0Y2ggKG5vZGUub3ApIHtcbiAgICAgICAgY2FzZSAnU3RhdGljUmVnZXhSZXBsYWNlJzoge1xuICAgICAgICAgIHJldHVybiBbb3BzLnN0cmluZy5zdGF0aWNSZWdleFJlcGxhY2UoXG4gICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpbnB1dCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgncGF0dGVybicsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgc3RyaW5nLFxuICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgncmV3cml0ZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgc3RyaW5nLFxuICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgncmVwbGFjZUdsb2JhbCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgYm9vbGVhbixcbiAgICAgICAgICApXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdTdHJpbmdOR3JhbXMnOiB7XG4gICAgICAgICAgY29uc3Qge25HcmFtcywgbkdyYW1zU3BsaXRzfSA9IG9wcy5zdHJpbmcuc3RyaW5nTkdyYW1zKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdkYXRhJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IxRCxcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnZGF0YVNwbGl0cycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzZXBhcmF0b3InLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnbkdyYW1XaWR0aHMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgICAgICBudW1iZXJbXSxcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnbGVmdFBhZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdyaWdodFBhZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdwYWRXaWR0aCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKFxuICAgICAgICAgICAgICAgICAgJ3ByZXNlcnZlU2hvcnRTZXF1ZW5jZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgICAgICBib29sZWFuKTtcbiAgICAgICAgICByZXR1cm4gW25HcmFtcywgbkdyYW1zU3BsaXRzXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdTdHJpbmdTcGxpdCc6IHtcbiAgICAgICAgICBjb25zdCB7aW5kaWNlcywgdmFsdWVzLCBzaGFwZX0gPSBvcHMuc3RyaW5nLnN0cmluZ1NwbGl0KFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpbnB1dCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yMUQsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2RlbGltaXRlcicsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgU2NhbGFyLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdza2lwRW1wdHknLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIGJvb2xlYW4pO1xuICAgICAgICAgIHJldHVybiBbaW5kaWNlcywgdmFsdWVzLCBzaGFwZV07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnU3RyaW5nVG9IYXNoQnVja2V0RmFzdCc6IHtcbiAgICAgICAgICBjb25zdCBvdXRwdXQgPSBvcHMuc3RyaW5nLnN0cmluZ1RvSGFzaEJ1Y2tldEZhc3QoXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2lucHV0Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ251bUJ1Y2tldHMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcik7XG4gICAgICAgICAgcmV0dXJuIFtvdXRwdXRdO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgVHlwZUVycm9yKGBOb2RlIHR5cGUgJHtub2RlLm9wfSBpcyBub3QgaW1wbGVtZW50ZWRgKTtcbiAgICAgIH1cbiAgICB9O1xuXG5leHBvcnQgY29uc3QgQ0FURUdPUlkgPSAnc3RyaW5nJztcbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n    switch (node.op) {\n        case 'Cast': {\n            return [ops.cast(getParamValue('x', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'ExpandDims': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [ops.expandDims(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'Squeeze': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [ops.squeeze(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'Reshape': {\n            return [ops.reshape(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n        }\n        case 'EnsureShape': {\n            return [ops.ensureShape(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n        }\n        case 'MirrorPad': {\n            return [ops.mirrorPad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('mode', node, tensorMap, context))];\n        }\n        case 'PadV2':\n        case 'Pad': {\n            return [ops.pad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('constantValue', node, tensorMap, context))];\n        }\n        case 'SpaceToBatchND': {\n            const blockShape = getParamValue('blockShape', node, tensorMap, context);\n            const paddings = getParamValue('paddings', node, tensorMap, context);\n            return [ops.spaceToBatchND(getParamValue('x', node, tensorMap, context), blockShape, paddings)];\n        }\n        case 'BatchToSpaceND': {\n            const blockShape = getParamValue('blockShape', node, tensorMap, context);\n            const crops = getParamValue('crops', node, tensorMap, context);\n            return [ops.batchToSpaceND(getParamValue('x', node, tensorMap, context), blockShape, crops)];\n        }\n        case 'DepthToSpace': {\n            const blockSize = getParamValue('blockSize', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n            return [ops.depthToSpace(getParamValue('x', node, tensorMap, context), blockSize, dataFormat)];\n        }\n        case 'BroadcastTo': {\n            return [ops.broadcastTo(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n        }\n        case 'BroadcastArgs': {\n            return [ops.broadcastArgs(getParamValue('s0', node, tensorMap, context), getParamValue('s1', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'transformation';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport const executeOp = async (node, tensorMap, context, resourceManager) => {\n    switch (node.op) {\n        case 'HashTable':\n        case 'HashTableV2': {\n            const existingTableHandle = resourceManager.getHashTableHandleByName(node.name);\n            // Table is shared with initializer.\n            if (existingTableHandle != null) {\n                return [existingTableHandle];\n            }\n            else {\n                const keyDType = getParamValue('keyDType', node, tensorMap, context);\n                const valueDType = getParamValue('valueDType', node, tensorMap, context);\n                const hashTable = new HashTable(keyDType, valueDType);\n                resourceManager.addHashTable(node.name, hashTable);\n                return [hashTable.handle];\n            }\n        }\n        case 'InitializeTable':\n        case 'InitializeTableV2':\n        case 'LookupTableImport':\n        case 'LookupTableImportV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const keys = getParamValue('keys', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [await hashTable.import(keys, values)];\n        }\n        case 'LookupTableFind':\n        case 'LookupTableFindV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const keys = getParamValue('keys', node, tensorMap, context);\n            const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [await hashTable.find(keys, defaultValue)];\n        }\n        case 'LookupTableSize':\n        case 'LookupTableSizeV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [hashTable.tensorSize()];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'hash_table';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF90YWJsZV9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL2V4ZWN1dG9ycy9oYXNoX3RhYmxlX2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQU1ILE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUlwRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRXRDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBNEIsS0FBSyxFQUNuRCxJQUFVLEVBQUUsU0FBMEIsRUFBRSxPQUF5QixFQUNqRSxlQUFnQyxFQUFxQixFQUFFO0lBQ3pELFFBQVEsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLEtBQUssV0FBVyxDQUFDO1FBQ2pCLEtBQUssYUFBYSxDQUFDLENBQUM7WUFDbEIsTUFBTSxtQkFBbUIsR0FDckIsZUFBZSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4RCxvQ0FBb0M7WUFDcEMsSUFBSSxtQkFBbUIsSUFBSSxJQUFJLEVBQUU7Z0JBQy9CLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2FBQzlCO2lCQUFNO2dCQUNMLE1BQU0sUUFBUSxHQUNWLGFBQWEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQztnQkFDcEUsTUFBTSxVQUFVLEdBQ1osYUFBYSxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxDQUFDO2dCQUV0RSxNQUFNLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQ3RELGVBQWUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDbkQsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMzQjtTQUNGO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQztRQUN2QixLQUFLLG1CQUFtQixDQUFDO1FBQ3pCLEtBQUssbUJBQW1CLENBQUM7UUFDekIsS0FBSyxxQkFBcUIsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FDVCxhQUFhLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQ3ZDLGVBQWUsQ0FBVyxDQUFDO1lBQzlDLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUN2RSxNQUFNLE1BQU0sR0FDUixhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFFaEUsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUU5RCxPQUFPLENBQUMsTUFBTSxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQztRQUN2QixLQUFLLG1CQUFtQixDQUFDLENBQUM7WUFDeEIsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUNULGFBQWEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFDdkMsZUFBZSxDQUFXLENBQUM7WUFDOUMsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ3ZFLE1BQU0sWUFBWSxHQUNkLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUV0RSxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlELE9BQU8sQ0FBQyxNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDbkQ7UUFDRCxLQUFLLGlCQUFpQixDQUFDO1FBQ3ZCLEtBQUssbUJBQW1CLENBQUMsQ0FBQztZQUN4QixNQUFNLE1BQU0sR0FBRyxhQUFhLENBQ1QsYUFBYSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUN2QyxlQUFlLENBQVcsQ0FBQztZQUU5QyxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlELE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUNqQztRQUNEO1lBQ0UsTUFBTSxTQUFTLENBQUMsYUFBYSxJQUFJLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0tBQzlEO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtEYXRhVHlwZSwgVGVuc29yfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuXG5pbXBvcnQge05hbWVkVGVuc29yc01hcH0gZnJvbSAnLi4vLi4vZGF0YS90eXBlcyc7XG5pbXBvcnQge0V4ZWN1dGlvbkNvbnRleHR9IGZyb20gJy4uLy4uL2V4ZWN1dG9yL2V4ZWN1dGlvbl9jb250ZXh0JztcbmltcG9ydCB7SGFzaFRhYmxlfSBmcm9tICcuLi8uLi9leGVjdXRvci9oYXNoX3RhYmxlJztcbmltcG9ydCB7UmVzb3VyY2VNYW5hZ2VyfSBmcm9tICcuLi8uLi9leGVjdXRvci9yZXNvdXJjZV9tYW5hZ2VyJztcbmltcG9ydCB7SW50ZXJuYWxPcEFzeW5jRXhlY3V0b3IsIE5vZGV9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHtnZXRQYXJhbVZhbHVlfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVPcDogSW50ZXJuYWxPcEFzeW5jRXhlY3V0b3IgPSBhc3luYyhcbiAgICBub2RlOiBOb2RlLCB0ZW5zb3JNYXA6IE5hbWVkVGVuc29yc01hcCwgY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCxcbiAgICByZXNvdXJjZU1hbmFnZXI6IFJlc291cmNlTWFuYWdlcik6IFByb21pc2U8VGVuc29yW10+ID0+IHtcbiAgc3dpdGNoIChub2RlLm9wKSB7XG4gICAgY2FzZSAnSGFzaFRhYmxlJzpcbiAgICBjYXNlICdIYXNoVGFibGVWMic6IHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nVGFibGVIYW5kbGUgPVxuICAgICAgICAgIHJlc291cmNlTWFuYWdlci5nZXRIYXNoVGFibGVIYW5kbGVCeU5hbWUobm9kZS5uYW1lKTtcbiAgICAgIC8vIFRhYmxlIGlzIHNoYXJlZCB3aXRoIGluaXRpYWxpemVyLlxuICAgICAgaWYgKGV4aXN0aW5nVGFibGVIYW5kbGUgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW2V4aXN0aW5nVGFibGVIYW5kbGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qga2V5RFR5cGUgPVxuICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgna2V5RFR5cGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIERhdGFUeXBlO1xuICAgICAgICBjb25zdCB2YWx1ZURUeXBlID1cbiAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3ZhbHVlRFR5cGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIERhdGFUeXBlO1xuXG4gICAgICAgIGNvbnN0IGhhc2hUYWJsZSA9IG5ldyBIYXNoVGFibGUoa2V5RFR5cGUsIHZhbHVlRFR5cGUpO1xuICAgICAgICByZXNvdXJjZU1hbmFnZXIuYWRkSGFzaFRhYmxlKG5vZGUubmFtZSwgaGFzaFRhYmxlKTtcbiAgICAgICAgcmV0dXJuIFtoYXNoVGFibGUuaGFuZGxlXTtcbiAgICAgIH1cbiAgICB9XG4gICAgY2FzZSAnSW5pdGlhbGl6ZVRhYmxlJzpcbiAgICBjYXNlICdJbml0aWFsaXplVGFibGVWMic6XG4gICAgY2FzZSAnTG9va3VwVGFibGVJbXBvcnQnOlxuICAgIGNhc2UgJ0xvb2t1cFRhYmxlSW1wb3J0VjInOiB7XG4gICAgICBjb25zdCBoYW5kbGUgPSBnZXRQYXJhbVZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICd0YWJsZUhhbmRsZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZU1hbmFnZXIpIGFzIFRlbnNvcjtcbiAgICAgIGNvbnN0IGtleXMgPSBnZXRQYXJhbVZhbHVlKCdrZXlzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICBjb25zdCB2YWx1ZXMgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3ZhbHVlcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuXG4gICAgICBjb25zdCBoYXNoVGFibGUgPSByZXNvdXJjZU1hbmFnZXIuZ2V0SGFzaFRhYmxlQnlJZChoYW5kbGUuaWQpO1xuXG4gICAgICByZXR1cm4gW2F3YWl0IGhhc2hUYWJsZS5pbXBvcnQoa2V5cywgdmFsdWVzKV07XG4gICAgfVxuICAgIGNhc2UgJ0xvb2t1cFRhYmxlRmluZCc6XG4gICAgY2FzZSAnTG9va3VwVGFibGVGaW5kVjInOiB7XG4gICAgICBjb25zdCBoYW5kbGUgPSBnZXRQYXJhbVZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICd0YWJsZUhhbmRsZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZU1hbmFnZXIpIGFzIFRlbnNvcjtcbiAgICAgIGNvbnN0IGtleXMgPSBnZXRQYXJhbVZhbHVlKCdrZXlzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG4gICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPVxuICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2RlZmF1bHRWYWx1ZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuXG4gICAgICBjb25zdCBoYXNoVGFibGUgPSByZXNvdXJjZU1hbmFnZXIuZ2V0SGFzaFRhYmxlQnlJZChoYW5kbGUuaWQpO1xuICAgICAgcmV0dXJuIFthd2FpdCBoYXNoVGFibGUuZmluZChrZXlzLCBkZWZhdWx0VmFsdWUpXTtcbiAgICB9XG4gICAgY2FzZSAnTG9va3VwVGFibGVTaXplJzpcbiAgICBjYXNlICdMb29rdXBUYWJsZVNpemVWMic6IHtcbiAgICAgIGNvbnN0IGhhbmRsZSA9IGdldFBhcmFtVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3RhYmxlSGFuZGxlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlTWFuYWdlcikgYXMgVGVuc29yO1xuXG4gICAgICBjb25zdCBoYXNoVGFibGUgPSByZXNvdXJjZU1hbmFnZXIuZ2V0SGFzaFRhYmxlQnlJZChoYW5kbGUuaWQpO1xuICAgICAgcmV0dXJuIFtoYXNoVGFibGUudGVuc29yU2l6ZSgpXTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IFR5cGVFcnJvcihgTm9kZSB0eXBlICR7bm9kZS5vcH0gaXMgbm90IGltcGxlbWVudGVkYCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBDQVRFR09SWSA9ICdoYXNoX3RhYmxlJztcbiJdfQ==","/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n    constructor(weightMap = {}, tensorArrayMap = {}, tensorListMap = {}, functionMap = {}, parseNodeNameCache) {\n        this.weightMap = weightMap;\n        this.tensorArrayMap = tensorArrayMap;\n        this.tensorListMap = tensorListMap;\n        this.functionMap = functionMap;\n        this.parseNodeNameCache = parseNodeNameCache;\n        this.rootContext = { id: 0, frameName: '', iterationId: 0 };\n        this.contexts = [this.rootContext];\n        this.lastId = 0;\n        this.generateCurrentContextIds();\n    }\n    newFrame(id, frameName) {\n        return { id, frameName, iterationId: 0 };\n    }\n    /**\n     * Set the current context\n     * @param contexts: ExecutionContextInfo[] the current path of execution\n     * frames\n     */\n    set currentContext(contexts) {\n        if (this.contexts !== contexts) {\n            this.contexts = contexts;\n            this.generateCurrentContextIds();\n        }\n    }\n    get currentContext() {\n        return this.contexts;\n    }\n    /**\n     * Returns the current context in string format.\n     */\n    get currentContextId() {\n        return this._currentContextIds[0];\n    }\n    /**\n     * Returns the current context and all parent contexts in string format.\n     * This allow access to the nodes in the current and parent frames.\n     */\n    get currentContextIds() {\n        return this._currentContextIds;\n    }\n    generateCurrentContextIds() {\n        const names = [];\n        for (let i = 0; i < this.contexts.length - 1; i++) {\n            const contexts = this.contexts.slice(0, this.contexts.length - i);\n            names.push(this.contextIdforContexts(contexts));\n        }\n        names.push('');\n        this._currentContextIds = names;\n    }\n    contextIdforContexts(contexts) {\n        return contexts ?\n            contexts\n                .map(context => (context.id === 0 && context.iterationId === 0) ?\n                '' :\n                `${context.frameName}-${context.iterationId}`)\n                .join('/') :\n            '';\n    }\n    /**\n     * Enter a new frame, a new context is pushed on the current context list.\n     * @param frameId new frame id\n     */\n    enterFrame(frameId) {\n        if (this.contexts) {\n            this.lastId++;\n            this.contexts = this.contexts.slice();\n            this.contexts.push(this.newFrame(this.lastId, frameId));\n            this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n        }\n    }\n    /**\n     * Exit the current frame, the last context is removed from the current\n     * context list.\n     */\n    exitFrame() {\n        if (this.contexts && this.contexts.length > 1) {\n            this.contexts = this.contexts.slice();\n            this.contexts.splice(-1);\n            this.currentContextIds.shift();\n        }\n        else {\n            throw new Error('Cannot exit frame, the context is empty');\n        }\n    }\n    /**\n     * Enter the next iteration of a loop, the iteration id of last context is\n     * increased.\n     */\n    nextIteration() {\n        if (this.contexts && this.contexts.length > 0) {\n            this.contexts = this.contexts.slice();\n            this.lastId++;\n            const context = Object.assign({}, this.contexts[this.contexts.length - 1]);\n            context.iterationId += 1;\n            context.id = this.lastId;\n            this.contexts.splice(-1, 1, context);\n            this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));\n        }\n        else {\n            throw new Error('Cannot increase frame iteration, the context is empty');\n        }\n    }\n    getWeight(name) {\n        return this.weightMap[name];\n    }\n    addTensorArray(tensorArray) {\n        this.tensorArrayMap[tensorArray.id] = tensorArray;\n    }\n    getTensorArray(id) {\n        return this.tensorArrayMap[id];\n    }\n    addTensorList(tensorList) {\n        this.tensorListMap[tensorList.id] = tensorList;\n    }\n    getTensorList(id) {\n        return this.tensorListMap[id];\n    }\n    dispose(keepIds) {\n        for (const key in this.tensorArrayMap) {\n            this.tensorArrayMap[key].clearAndClose(keepIds);\n        }\n        for (const key in this.tensorListMap) {\n            this.tensorListMap[key].clearAndClose(keepIds);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { parseNodeName } from '../operations/executors/utils';\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(inputs, outputs, weightMap, initNodes) {\n    const usedNodes = new Set();\n    const missingInputs = [];\n    let dynamicNode = null;\n    let syncInputs = null;\n    // Start with the outputs, going backwards and find all the nodes that are\n    // needed to compute those outputs.\n    const seen = new Set();\n    const inputNodeNames = new Set(Object.keys(inputs).map((name) => parseNodeName(name)[0]));\n    initNodes = initNodes || [];\n    const initNodeNames = new Set(initNodes.map((node) => parseNodeName(node.name)[0]));\n    const frontier = [...outputs];\n    while (frontier.length > 0) {\n        const node = frontier.pop();\n        if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {\n            if (dynamicNode == null) {\n                dynamicNode = node;\n                syncInputs = dynamicNode.children.map(child => child.name)\n                    .filter(name => usedNodes.has(name));\n            }\n        }\n        usedNodes.add(node.name);\n        // Weights are dead end since we already have their values.\n        if (weightMap[node.name] != null) {\n            continue;\n        }\n        // This node is a dead end since it's one of the user-provided inputs.\n        if (inputNodeNames.has(node.name)) {\n            continue;\n        }\n        // This node is a dead end since it doesn't have any inputs.\n        if (initNodeNames.has(node.name)) {\n            continue;\n        }\n        if (node.inputs.length === 0) {\n            missingInputs.push(node.name);\n            continue;\n        }\n        node.inputs.forEach(input => {\n            // Don't add to the frontier if it is already there.\n            if (seen.has(input.name)) {\n                return;\n            }\n            seen.add(input.name);\n            frontier.push(input);\n        });\n    }\n    return { inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs };\n}\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(graph, executionInfo) {\n    const { usedNodes, inputs } = executionInfo;\n    const inputNodes = Object.keys(inputs)\n        .map(name => parseNodeName(name)[0])\n        .map(name => graph.nodes[name]);\n    const initNodes = graph.initNodes || [];\n    const isUsed = (node) => usedNodes.has(typeof node === 'string' ? node : node.name);\n    function unique(nodes) {\n        return [...new Map(nodes.map((node) => [node.name, node])).values()];\n    }\n    const predefinedNodes = unique([\n        ...inputNodes,\n        ...graph.weights,\n        ...initNodes,\n    ]).filter(isUsed);\n    const allNodes = unique([\n        ...predefinedNodes,\n        ...Object.values(graph.nodes),\n    ]).filter(isUsed);\n    const nameToNode = new Map(allNodes.map((node) => [node.name, node]));\n    const inCounts = {};\n    for (const node of allNodes) {\n        inCounts[node.name] = inCounts[node.name] || 0;\n        for (const child of node.children) {\n            // When the child is unused, set in counts to infinity so that it will\n            // never be decreased to 0 and added to the execution list.\n            if (!isUsed(child)) {\n                inCounts[child.name] = Number.POSITIVE_INFINITY;\n            }\n            inCounts[child.name] = (inCounts[child.name] || 0) + 1;\n        }\n    }\n    // Build execution order for all used nodes regardless whether they are\n    // predefined or not.\n    const frontier = Object.entries(inCounts)\n        .filter(([, inCount]) => inCount === 0)\n        .map(([name]) => name);\n    const orderedNodeNames = [...frontier];\n    while (frontier.length > 0) {\n        const nodeName = frontier.pop();\n        const node = nameToNode.get(nodeName);\n        for (const child of node.children.filter(isUsed)) {\n            if (--inCounts[child.name] === 0) {\n                orderedNodeNames.push(child.name);\n                frontier.push(child.name);\n            }\n        }\n    }\n    const orderedNodes = orderedNodeNames.map((name) => nameToNode.get(name));\n    const filteredOrderedNodes = filterPredefinedReachableNodes(orderedNodes, predefinedNodes);\n    // TODO: Turn validation on/off with tf env flag.\n    validateNodesExecutionOrder(filteredOrderedNodes, predefinedNodes);\n    return filteredOrderedNodes;\n}\n/**\n * This is a helper function of `getNodesInTopologicalOrder`.\n * Returns ordered nodes reachable by at least one predefined node.\n * This can help us filter out redundant nodes from the returned node list.\n * For example:\n * If we have four nodes with dependencies like this:\n *   a --> b --> c --> d\n * when node `c` is predefined (e.g. given as an input tensor), we can\n * skip node `a` and `b` since their outputs will never be used.\n *\n * @param orderedNodes Graph nodes in execution order.\n * @param predefinedNodes Graph inputs, weights, and init nodes. Nodes in this\n *     list must have distinct names.\n */\nfunction filterPredefinedReachableNodes(orderedNodes, predefinedNodes) {\n    const nameToNode = new Map(orderedNodes.map((node) => [node.name, node]));\n    // TODO: Filter out more nodes when >=2 nodes are predefined in a path.\n    const stack = predefinedNodes.map((node) => node.name);\n    const predefinedReachableNodeNames = new Set(stack);\n    // Perform a DFS starting from the set of all predefined nodes\n    // to find the set of all nodes reachable from the predefined nodes.\n    while (stack.length > 0) {\n        const nodeName = stack.pop();\n        const node = nameToNode.get(nodeName);\n        for (const child of node.children) {\n            if (!nameToNode.has(child.name) ||\n                predefinedReachableNodeNames.has(child.name)) {\n                continue;\n            }\n            predefinedReachableNodeNames.add(child.name);\n            stack.push(child.name);\n        }\n    }\n    // Filter out unreachable nodes and build the ordered node list.\n    const filteredOrderedNodes = orderedNodes.filter((node) => predefinedReachableNodeNames.has(node.name));\n    return filteredOrderedNodes;\n}\nclass NodesExecutionOrderError extends Error {\n    constructor(message) {\n        super(`NodesExecutionOrderError: ${message}`);\n    }\n}\n/**\n * This is a helper function of `getNodesInTopologicalOrder`.\n * Validates property: given nodes `a` and `b`, Order(a) > Order(b) if `a`\n * is a child of `b`. This function throws an error if validation fails.\n *\n * @param orderedNodes Graph nodes in execution order.\n * @param predefinedNodes Graph inputs, weights, and init nodes. Nodes in this\n *     list must have distinct names.\n */\nfunction validateNodesExecutionOrder(orderedNodes, predefinedNodes) {\n    const nodeNameToOrder = new Map(orderedNodes.map((node, order) => [node.name, order]));\n    const predefinedNodeNames = new Set(predefinedNodes.map((node) => node.name));\n    const isPredefined = (node) => predefinedNodeNames.has(typeof node === 'string' ? node : node.name);\n    const willBeExecutedNodeNames = new Set(orderedNodes.map((node) => node.name));\n    const willBeExecuted = (node) => willBeExecutedNodeNames.has(typeof node === 'string' ? node : node.name);\n    for (const node of orderedNodes) {\n        for (const child of node.children.filter(willBeExecuted)) {\n            if (!nodeNameToOrder.has(child.name)) {\n                throw new NodesExecutionOrderError(`Child ${child.name} of node ${node.name} is unreachable.`);\n            }\n            if (nodeNameToOrder.get(node.name) > nodeNameToOrder.get(child.name)) {\n                throw new NodesExecutionOrderError(`Node ${node.name} is scheduled to run after its child ${child.name}.`);\n            }\n        }\n        if (!isPredefined(node)) {\n            for (const input of node.inputs) {\n                if (!nodeNameToOrder.has(input.name)) {\n                    throw new NodesExecutionOrderError(`Input ${input.name} of node ${node.name} is unreachable.`);\n                }\n                if (nodeNameToOrder.get(input.name) > nodeNameToOrder.get(node.name)) {\n                    throw new NodesExecutionOrderError(`Node ${node.name} is scheduled to run before its input ${input.name}.`);\n                }\n            }\n        }\n    }\n}\n/**\n * Given the execution info, return a map from node name to the disposable\n * node name list after its execution.\n *\n * @returns A map from node name to disposable nodes after its\n *     execution. That is, for a node `x`, `nodeLiveUntilMap[x]` indicates\n *     all nodes which their intermediate tensors should be disposed after `x`\n *     being executed.\n */\nexport function getNodeLiveUntilMap(orderedNodes) {\n    const nodeNameToOrder = new Map(orderedNodes.map((node, order) => [node.name, order]));\n    const INF_LIFE = Number.MAX_SAFE_INTEGER;\n    // Make control flow nodes (and consequently their direct parents)\n    // live forever since they're tricky to track correctly.\n    const selfLifespans = orderedNodes.map((node, nodeOrder) => isControlFlow(node) ? INF_LIFE : nodeOrder);\n    const getSelfLifeSpan = (node) => {\n        const selfLife = selfLifespans[nodeNameToOrder.get(node.name)];\n        if (selfLife == null) {\n            // If nodeToOrder does not contain the node, it is unused or\n            // unreachable in graph.\n            return -1;\n        }\n        return selfLife;\n    };\n    // `liveUntil[i]` points to the last node in the `orderedNodes` array that\n    // may depend on tensors from node `i`. It indicates that all the\n    // intermediate tensors from `orderedNodes[i]` should be disposed after\n    // `orderedNodes[liveUntil[i]]` is executed.\n    // A node lives long enough to pass on its tensors to its children.\n    // It lives until at least `max(node's position, children's positions)`.\n    const liveUntilOrders = orderedNodes.map((node, nodeOrder) => {\n        return node.children.map(getSelfLifeSpan)\n            .reduce((a, b) => Math.max(a, b), selfLifespans[nodeOrder]);\n    });\n    // liveUntilMap:\n    // - Key: Name of a node `x`\n    // - Values: All nodes whose intermediate tensors should be disposed\n    //           after `x` is executed.\n    const liveUntilMap = new Map();\n    for (let nodeOrder = 0; nodeOrder < orderedNodes.length; ++nodeOrder) {\n        const liveUntilOrder = liveUntilOrders[nodeOrder];\n        if (liveUntilOrder === INF_LIFE) {\n            continue;\n        }\n        const node = orderedNodes[nodeOrder];\n        const liveUntilNode = orderedNodes[liveUntilOrder];\n        if (!liveUntilMap.has(liveUntilNode.name)) {\n            liveUntilMap.set(liveUntilNode.name, []);\n        }\n        liveUntilMap.get(liveUntilNode.name).push(node);\n    }\n    return liveUntilMap;\n}\nconst CONTROL_FLOW_OPS = new Set([\n    'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',\n    'StatelessWhile', 'if', 'While'\n]);\nconst DYNAMIC_SHAPE_OPS = new Set([\n    'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n]);\nconst HASH_TABLE_OPS = new Set([\n    'HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2',\n    'LookupTableFind', 'LookupTableFindV2', 'LookupTableSize', 'LookupTableSizeV2'\n]);\nexport function isControlFlow(node) {\n    return CONTROL_FLOW_OPS.has(node.op);\n}\nexport function isDynamicShape(node) {\n    return DYNAMIC_SHAPE_OPS.has(node.op);\n}\nexport function isHashTable(node) {\n    return HASH_TABLE_OPS.has(node.op);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, keep, tidy, util } from '@tensorflow/tfjs-core';\nimport { getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContext, parseNodeName } from '../operations/executors/utils';\nimport { executeOp } from '../operations/operation_executor';\nimport { ExecutionContext } from './execution_context';\nimport { getExecutionSubgraph, getNodeLiveUntilMap, getNodesInTopologicalOrder, isControlFlow } from './model_analysis';\nexport class GraphExecutor {\n    get weightIds() {\n        return this.parent ? this.parent.weightIds : this._weightIds;\n    }\n    get functionExecutorMap() {\n        return this.parent ? this.parent.functionExecutorMap :\n            this._functionExecutorMap;\n    }\n    get weightMap() {\n        return this.parent ? this.parent.weightMap : this._weightMap;\n    }\n    set weightMap(weightMap) {\n        const weightIds = Object.keys(weightMap).map(key => weightMap[key].map(tensor => tensor.id));\n        this._weightIds = [].concat(...weightIds);\n        this._weightMap = weightMap;\n    }\n    /**\n     * Set `ResourceManager` shared by executors of a model.\n     * @param resourceManager: `ResourceManager` of the `GraphModel`.\n     */\n    set resourceManager(resourceManager) {\n        this._resourceManager = resourceManager;\n    }\n    get inputs() {\n        return this._inputs.map(node => {\n            return {\n                name: node.name,\n                shape: node.attrParams['shape'] ?\n                    node.attrParams['shape'].value :\n                    undefined,\n                dtype: node.attrParams['dtype'] ?\n                    node.attrParams['dtype'].value :\n                    undefined\n            };\n        });\n    }\n    get outputs() {\n        return this._outputs.map(node => {\n            return {\n                name: node.name,\n                shape: node.attrParams['shape'] ?\n                    node.attrParams['shape'].value :\n                    undefined,\n                dtype: node.attrParams['dtype'] ?\n                    node.attrParams['dtype'].value :\n                    undefined\n            };\n        });\n    }\n    get inputNodes() {\n        return this._inputs.map(node => node.signatureKey || node.name);\n    }\n    get outputNodes() {\n        return this._outputs.map((node) => {\n            const name = node.signatureKey || node.name;\n            return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n        });\n    }\n    get functions() {\n        return Object.keys(this._functions).reduce((map, key) => {\n            map[key] = this._functions[key].signature;\n            return map;\n        }, {});\n    }\n    /**\n     *\n     * @param graph Graph the model or function graph to be executed.\n     * @param parent When building function exector you need to set the parent\n     * executor. Since the weights and function executor maps are set at parant\n     * level, that function executor can access the function maps and weight maps\n     * through the parent.\n     */\n    constructor(graph, parent) {\n        this.graph = graph;\n        this.parent = parent;\n        this.compiledMap = new Map();\n        this.parseNodeNameCache = new Map();\n        this._weightMap = {};\n        this.SEPARATOR = ',';\n        this._functions = {};\n        this._functionExecutorMap = {};\n        this.keepIntermediateTensors = false;\n        this._outputs = graph.outputs;\n        this._inputs = graph.inputs;\n        this._initNodes = graph.initNodes;\n        this._signature = graph.signature;\n        this._functions = graph.functions;\n        // create sub-graph executors\n        if (graph.functions != null) {\n            Object.keys(graph.functions).forEach(name => {\n                this._functionExecutorMap[name] =\n                    new GraphExecutor(graph.functions[name], this);\n            });\n        }\n    }\n    getCompilationKey(inputs, outputs) {\n        const sortedInputs = inputs.map(node => node.name).sort();\n        const sortedOutputs = outputs.map(node => node.name).sort();\n        return sortedInputs.join(this.SEPARATOR) + '--' +\n            sortedOutputs.join(this.SEPARATOR);\n    }\n    /**\n     * Compiles the inference graph and returns the minimal set of nodes that are\n     * required for execution, in the correct execution order.\n     * @returns {Object} compilation The compile result.\n     * @returns {Node[]} compilation.orderedNodes Nodes in the correct execution\n     *     order.\n     * @returns {Map<string, Node[]>} compilation.nodeLiveUntilMap A map from node\n     *     to disposable nodes after its execution. That is, for a node `x`,\n     *     `nodeLiveUntilMap[x]` indicates all nodes whose intermediate\n     *     tensors should be disposed after `x` is executed.\n     */\n    compile(inputs, outputs) {\n        const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n        const { missingInputs, dynamicNode, syncInputs } = executionInfo;\n        if (dynamicNode != null) {\n            throw new Error(`This execution contains the node '${dynamicNode.name}', which has ` +\n                `the dynamic op '${dynamicNode.op}'. Please use ` +\n                `model.executeAsync() instead. Alternatively, to avoid the ` +\n                `dynamic ops, specify the inputs [${syncInputs}]`);\n        }\n        if (missingInputs.length > 0) {\n            const outNames = outputs.map(n => n.name);\n            const inNames = Object.keys(inputs);\n            throw new Error(`Cannot compute the outputs [${outNames}] from the provided inputs ` +\n                `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n        }\n        const orderedNodes = getNodesInTopologicalOrder(this.graph, executionInfo);\n        const nodeLiveUntilMap = getNodeLiveUntilMap(orderedNodes);\n        return { orderedNodes, nodeLiveUntilMap };\n    }\n    cloneAndKeepTensor(tensor) {\n        if (tensor == null) {\n            return null;\n        }\n        const clone = tensor.clone();\n        // Keep the clone because`model.execute()` may be called within\n        // a `tidy()`, but the user may inspect these tensors after the\n        // tidy.\n        keep(clone);\n        return clone;\n    }\n    cloneTensorList(tensors) {\n        if (!tensors) {\n            return null;\n        }\n        const clonedTensor = tensors.map(tensor => {\n            return this.cloneAndKeepTensor(tensor);\n        });\n        return clonedTensor;\n    }\n    cloneTensorMap(tensorsMap) {\n        return Object.fromEntries(Object.entries(tensorsMap).map(([name, tensorsList]) => {\n            return [name, this.cloneTensorList(tensorsList)];\n        }));\n    }\n    /**\n     * Executes the inference for given input tensors.\n     * @param inputs Tensor map for the model inputs, keyed by the input node\n     * names.\n     * @param outputs Optional. output node name from the Tensorflow model, if\n     * no outputs are specified, the default outputs of the model would be used.\n     * You can inspect intermediate nodes of the model by adding them to the\n     * outputs array.\n     */\n    execute(inputs, outputs) {\n        // Dispose any tensors from a prior run to avoid leaking them.\n        this.disposeIntermediateTensors();\n        inputs = this.mapInputs(inputs);\n        const names = Object.keys(inputs).sort();\n        this.checkInputs(inputs);\n        this.checkInputShapeAndType(inputs);\n        outputs = this.mapOutputs(outputs);\n        this.checkOutputs(outputs);\n        const inputNodes = names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n        const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n        const outputNodeNameSet = new Set(outputNodeNames);\n        let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n        // If no outputs are specified, then use the default outputs of the model.\n        if (outputNodes.length === 0) {\n            outputNodes = this._outputs;\n        }\n        const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n        // Do nothing if the compiled graph cache contains the input.\n        let compilation = this.compiledMap.get(compilationKey);\n        if (compilation == null) {\n            compilation = this.compile(inputs, outputNodes);\n            this.compiledMap.set(compilationKey, compilation);\n        }\n        // Keep tensors if KEEP_INTERMEDIATE_TENSORS is on.\n        try {\n            this.keepIntermediateTensors = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n        }\n        catch (e) {\n            this.keepIntermediateTensors = false;\n            console.warn(e.message);\n        }\n        const tensorArrayMap = {};\n        const tensorListMap = {};\n        return tidy(() => {\n            const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap, this.parseNodeNameCache);\n            const tensorsMap = Object.assign({}, this.weightMap);\n            if (this.keepIntermediateTensors) {\n                this.clonedTensorsMap = this.cloneTensorMap(this.weightMap);\n            }\n            Object.keys(inputs).forEach(name => {\n                const [nodeName, index] = parseNodeName(name, context);\n                const tensors = [];\n                tensors[index] = inputs[name];\n                tensorsMap[nodeName] = tensors;\n                if (this.keepIntermediateTensors) {\n                    this.clonedTensorsMap[nodeName] = this.cloneTensorList(tensors);\n                }\n            });\n            const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n            const { orderedNodes, nodeLiveUntilMap } = compilation;\n            for (const node of orderedNodes) {\n                if (tensorsMap[node.name]) {\n                    continue;\n                }\n                const tensors = executeOp(node, tensorsMap, context, this._resourceManager);\n                if (util.isPromise(tensors)) {\n                    throw new Error(`The execution of the op '${node.op}' returned a promise. ` +\n                        `Please use model.executeAsync() instead.`);\n                }\n                tensorsMap[node.name] = tensors;\n                if (this.keepIntermediateTensors) {\n                    this.clonedTensorsMap[node.name] = this.cloneTensorList(tensors);\n                }\n                this.checkTensorForDisposalWithNodeLiveUntilInfo(node, tensorsMap, context, tensorsToKeep, outputNodeNameSet, nodeLiveUntilMap.get(node.name));\n            }\n            // dispose the context for the root executor\n            if (this.parent == null) {\n                context.dispose(tensorsToKeep);\n            }\n            return outputs.map(name => getTensor(name, tensorsMap, context));\n        });\n    }\n    getFrozenTensorIds(tensorMap) {\n        const ids = [].concat.apply([], Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n        return new Set(ids);\n    }\n    checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount) {\n        // Skip output nodes and any control flow nodes, since its dependency is\n        // tricky to track correctly.\n        if (isControlFlow(node) || outputNodeNameSet.has(nodeName)) {\n            return;\n        }\n        for (const tensor of tensorMap[nodeName]) {\n            if (tensor == null) {\n                continue;\n            }\n            intermediateTensorConsumerCount[tensor.id] =\n                (intermediateTensorConsumerCount[tensor.id] || 0) +\n                    node.children.length;\n        }\n        for (const input of node.inputs) {\n            // Skip any control flow nodes, since its dependency is tricky to track\n            // correctly.\n            if (isControlFlow(input)) {\n                continue;\n            }\n            const tensors = getTensorsForCurrentContext(input.name, tensorMap, context);\n            if (tensors == null) {\n                continue;\n            }\n            for (const tensor of tensors) {\n                if (!tensor || tensor.kept || tensorsToKeep.has(tensor.id)) {\n                    continue;\n                }\n                // Only intermediate nodes' tensors have counts set, not marked as\n                // kept, and not in `tensorsToKeep`.\n                // Input and weight nodes' tensors should exist in `tensorsToKeep`.\n                // Output and control flow nodes' tensors should never have count set.\n                const count = intermediateTensorConsumerCount[tensor.id];\n                if (count === 1) {\n                    tensor.dispose();\n                    delete intermediateTensorConsumerCount[tensor.id];\n                }\n                else if (count != null) {\n                    intermediateTensorConsumerCount[tensor.id]--;\n                }\n            }\n        }\n    }\n    checkTensorForDisposalWithNodeLiveUntilInfo(node, tensorMap, context, tensorsToKeep, outputNodeNameSet, liveUntilNodes) {\n        function isNonDisposableNode(node) {\n            // Skip output nodes and any control flow nodes, since its dependency is\n            // tricky to track correctly.\n            return isControlFlow(node) || outputNodeNameSet.has(node.name);\n        }\n        if (isControlFlow(node) || liveUntilNodes == null) {\n            return;\n        }\n        for (const nodeToDispose of liveUntilNodes) {\n            if (isNonDisposableNode(nodeToDispose)) {\n                continue;\n            }\n            const tensors = getTensorsForCurrentContext(nodeToDispose.name, tensorMap, context);\n            for (const tensor of tensors) {\n                if (!tensor || tensor.kept || tensorsToKeep.has(tensor.id)) {\n                    continue;\n                }\n                tensor.dispose();\n            }\n        }\n    }\n    /**\n     * Executes the inference for given input tensors in Async fashion.\n     * @param inputs Tensor map for the model inputs, keyed by the input node\n     * names.\n     * @param outputs output node name from the Tensorflow model, if no outputs\n     * are specified, the default outputs of the model would be used. You can\n     * inspect intermediate nodes of the model by adding them to the outputs\n     * array.\n     */\n    async executeAsync(inputs, outputs) {\n        return this._executeAsync(inputs, outputs);\n    }\n    disposeIntermediateTensors() {\n        if (!this.clonedTensorsMap) {\n            return;\n        }\n        Object.values(this.clonedTensorsMap).forEach(tensorsList => {\n            for (const tensor of tensorsList) {\n                if (tensor && !tensor.isDisposed) {\n                    tensor.dispose();\n                }\n            }\n        });\n        this.clonedTensorsMap = null;\n    }\n    getIntermediateTensors() {\n        return this.clonedTensorsMap;\n    }\n    /**\n     * Executes the inference for given input tensors in Async fashion.\n     * @param inputs Tensor map for the model inputs, keyed by the input node\n     * names.\n     * @param outputs Optional. output node name from the Tensorflow model,\n     * if no outputs are specified, the default outputs of the model would be\n     * used. You can inspect intermediate nodes of the model by adding them to\n     * the outputs array.\n     * @param isFunctionExecution Optional. Flag for executing a function.\n     * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n     * function execution.\n     * @param tensorArrayMap Optional global TensorList map by id. Used for\n     * function execution.\n     */\n    async _executeAsync(inputs, outputs, isFunctionExecution = false, tensorArrayMap = {}, tensorListMap = {}) {\n        // Dispose any tensors from a prior run to avoid leaking them.\n        this.disposeIntermediateTensors();\n        if (!isFunctionExecution) {\n            inputs = this.mapInputs(inputs);\n            this.checkInputs(inputs);\n            this.checkInputShapeAndType(inputs);\n            outputs = this.mapOutputs(outputs);\n            this.checkOutputs(outputs);\n        }\n        // Keep tensors if KEEP_INTERMEDIATE_TENSORS is on.\n        try {\n            this.keepIntermediateTensors = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n        }\n        catch (e) {\n            this.keepIntermediateTensors = false;\n            console.warn(e.message);\n        }\n        const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap, this.parseNodeNameCache);\n        if (this.keepIntermediateTensors) {\n            this.clonedTensorsMap = this.cloneTensorMap(this.weightMap);\n        }\n        // Graph with control flow op requires runtime evaluation of the execution\n        // order, while without control flow the execution order is pre-determined\n        // in the compile method.\n        const tensorsMap = await this.executeWithControlFlow(inputs, context, outputs, isFunctionExecution);\n        const results = outputs.map(name => getTensor(name, tensorsMap, context));\n        // dispose all the intermediate tensors\n        const outputIds = results.map(t => t.id);\n        const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n        const keepIds = new Set([...outputIds, ...inputIds, ...this.weightIds]);\n        Object.values(tensorsMap).forEach(tensorsList => {\n            tensorsList.forEach(tensor => {\n                if (tensor && !tensor.isDisposed && !keepIds.has(tensor.id)) {\n                    tensor.dispose();\n                }\n            });\n        });\n        // dispose the context for the root executor\n        if (this.parent == null) {\n            context.dispose(keepIds);\n        }\n        return results;\n    }\n    async executeFunctionAsync(inputs, tensorArrayMap, tensorListMap) {\n        const mappedInputs = inputs.reduce((map, tensor, index) => {\n            map[this.inputs[index].name] = tensor;\n            return map;\n        }, {});\n        return this._executeAsync(mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n    }\n    /**\n     * When there are control flow nodes in the graph, the graph execution use\n     * ExecutionContext to keep track of the frames and loop iterators.\n     * @param inputs placeholder tensors for the graph.\n     * @param context the execution context object for current execution.\n     * @param outputNames Optional. output node name from the Tensorflow model,\n     * if no outputs are specified, the default outputs of the model would be\n     * used. You can inspect intermediate nodes of the model by adding them to\n     * the outputs array.\n     * @param isFunctionExecution Flag for executing a function.\n     */\n    async executeWithControlFlow(inputs, context, outputNames, isFunctionExecution) {\n        const names = Object.keys(inputs);\n        const inputNodes = names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n        const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n        const outputNodeNameSet = new Set(outputNodeNames);\n        let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n        // If no outputs are specified, then use the default outputs of the model.\n        if (outputNodes.length === 0) {\n            outputNodes = this._outputs;\n        }\n        const { usedNodes, missingInputs, dynamicNode, syncInputs } = getExecutionSubgraph(inputs, outputNodes, this.weightMap, this._initNodes);\n        // First nodes to execute include inputNodes, weights, and initNodes.\n        const stack = [\n            ...inputNodes, ...this.graph.weights, ...(this._initNodes || [])\n        ].map(node => {\n            return { node, contexts: context.currentContext };\n        });\n        const tensorsMap = Object.assign({}, this.weightMap);\n        Object.keys(inputs).forEach(name => {\n            const [nodeName, index] = parseNodeName(name);\n            const tensors = [];\n            tensors[index] = inputs[name];\n            tensorsMap[nodeName] = tensors;\n        });\n        const intermediateTensorConsumerCount = {};\n        const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n        const added = {};\n        while (stack.length > 0) {\n            const promises = this.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount, usedNodes);\n            await Promise.all(promises);\n        }\n        if (dynamicNode == null && !isFunctionExecution) {\n            console.warn(`This model execution did not contain any nodes with control flow ` +\n                `or dynamic output shapes. You can use model.execute() instead.`);\n        }\n        const missingOutputs = outputNodes\n            .filter(node => !isControlFlow(node) &&\n            !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n        if (missingOutputs.length > 0) {\n            let alternativeMsg = '';\n            if (dynamicNode != null) {\n                alternativeMsg =\n                    `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n                        `and specify the inputs [${syncInputs}]`;\n            }\n            throw new Error(`Cannot compute the outputs [${missingOutputs}] from the provided ` +\n                `inputs [${names}]. Consider providing the following inputs: ` +\n                `[${missingInputs}]. ${alternativeMsg}`);\n        }\n        return tensorsMap;\n    }\n    processStack(inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount, usedNodes) {\n        const promises = [];\n        while (stack.length > 0) {\n            const item = stack.pop();\n            context.currentContext = item.contexts;\n            let nodeName = '';\n            // The tensor of the Enter op with isConstant set should be set\n            // in the parent scope, so it will be available as constant for the\n            // whole loop.\n            if (item.node.op === 'Enter' &&\n                getParamValue('isConstant', item.node, tensorMap, context)) {\n                [nodeName] = getNodeNameAndIndex(item.node.name, context);\n            }\n            // only process nodes that are not in the tensorMap yet, this include\n            // inputNodes and internal initNodes.\n            if (tensorMap[item.node.name] == null) {\n                const tensors = executeOp(item.node, tensorMap, context, this._resourceManager);\n                if (!nodeName) {\n                    [nodeName] = getNodeNameAndIndex(item.node.name, context);\n                }\n                const currentContext = context.currentContext;\n                if (util.isPromise(tensors)) {\n                    promises.push(tensors.then(t => {\n                        tensorMap[nodeName] = t;\n                        if (this.keepIntermediateTensors) {\n                            this.clonedTensorsMap[nodeName] = this.cloneTensorList(t);\n                        }\n                        context.currentContext = currentContext;\n                        this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount);\n                        this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n                        return t;\n                    }));\n                }\n                else {\n                    tensorMap[nodeName] = tensors;\n                    if (this.keepIntermediateTensors) {\n                        this.clonedTensorsMap[nodeName] = this.cloneTensorList(tensors);\n                    }\n                    this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount);\n                    this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n                }\n            }\n            else {\n                this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n            }\n        }\n        return promises;\n    }\n    processChildNodes(node, stack, context, tensorMap, added, usedNodes) {\n        node.children.forEach((childNode) => {\n            const [nodeName,] = getNodeNameAndIndex(childNode.name, context);\n            if (added[nodeName] || !usedNodes.has(childNode.name)) {\n                return;\n            }\n            // Merge op can be pushed if any of its inputs has value.\n            if (childNode.op === 'Merge') {\n                if (childNode.inputNames.some(name => {\n                    return !!getTensor(name, tensorMap, context);\n                })) {\n                    added[nodeName] = true;\n                    stack.push({ contexts: context.currentContext, node: childNode });\n                }\n            }\n            else // Otherwise all inputs must to have value.\n             if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n            })) {\n                added[nodeName] = true;\n                stack.push({ contexts: context.currentContext, node: childNode });\n            }\n        });\n    }\n    /**\n     * Releases the memory used by the weight tensors.\n     */\n    dispose() {\n        Object.keys(this.weightMap)\n            .forEach(key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n    }\n    checkInputShapeAndType(inputs) {\n        Object.keys(inputs).forEach(name => {\n            const input = inputs[name];\n            const [nodeName,] = parseNodeName(name);\n            const node = this.graph.nodes[nodeName];\n            if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n                const shape = node.attrParams['shape'].value;\n                const match = shape.length === input.shape.length &&\n                    input.shape.every((dim, index) => shape[index] === -1 || shape[index] === dim);\n                util.assert(match, () => `The shape of dict['${node.name}'] provided in ` +\n                    `model.execute(dict) must be [${shape}], but was ` +\n                    `[${input.shape}]`);\n            }\n            if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n                util.assert(input.dtype === node.attrParams['dtype'].value, () => `The dtype of dict['${node.name}'] provided in ` +\n                    `model.execute(dict) must be ` +\n                    `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n            }\n        });\n    }\n    mapInputs(inputs) {\n        var _a, _b;\n        const result = {};\n        for (const inputName in inputs) {\n            const tensor = (_b = (_a = this._signature) === null || _a === void 0 ? void 0 : _a.inputs) === null || _b === void 0 ? void 0 : _b[inputName];\n            if (tensor != null) {\n                result[tensor.name] = inputs[inputName];\n            }\n            else {\n                result[inputName] = inputs[inputName];\n            }\n        }\n        return result;\n    }\n    checkInputs(inputs) {\n        const notInGraph = Object.keys(inputs).filter(name => {\n            const [nodeName] = parseNodeName(name);\n            return this.graph.nodes[nodeName] == null;\n        });\n        if (notInGraph.length > 0) {\n            throw new Error(`The dict provided in model.execute(dict) has ` +\n                `keys: [${notInGraph}] that are not part of graph`);\n        }\n    }\n    mapOutputs(outputs) {\n        return outputs.map(name => {\n            var _a, _b;\n            const tensor = (_b = (_a = this._signature) === null || _a === void 0 ? void 0 : _a.outputs) === null || _b === void 0 ? void 0 : _b[name];\n            if (tensor != null) {\n                return tensor.name;\n            }\n            return name;\n        }, {});\n    }\n    checkOutputs(outputs) {\n        outputs.forEach(name => {\n            const [normalizedName] = parseNodeName(name);\n            if (!this.graph.nodes[normalizedName]) {\n                throw new Error(`The output '${name}' is not found in the graph`);\n            }\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhfZXhlY3V0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvZXhlY3V0b3IvZ3JhcGhfZXhlY3V0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxFQUFXLEdBQUcsRUFBRSxJQUFJLEVBQTBCLElBQUksRUFBRSxJQUFJLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUk5RixPQUFPLEVBQUMsbUJBQW1CLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSwyQkFBMkIsRUFBRSxhQUFhLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUN4SSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFHM0QsT0FBTyxFQUFDLGdCQUFnQixFQUF1QixNQUFNLHFCQUFxQixDQUFDO0FBQzNFLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxtQkFBbUIsRUFBRSwwQkFBMEIsRUFBRSxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQVN0SCxNQUFNLE9BQU8sYUFBYTtJQWdCeEIsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMvRCxDQUFDO0lBRUQsSUFBSSxtQkFBbUI7UUFDckIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLG9CQUFvQixDQUFDO0lBQ2pELENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFB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QyxlQUFlLElBQUksNkJBQTZCLENBQUMsQ0FBQzthQUNuRTtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge0RhdGFUeXBlLCBlbnYsIGtlZXAsIE5hbWVkVGVuc29yTWFwLCBUZW5zb3IsIHRpZHksIHV0aWx9IGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG5cbmltcG9ydCB7SVNpZ25hdHVyZURlZn0gZnJvbSAnLi4vZGF0YS9jb21waWxlZF9hcGknO1xuaW1wb3J0IHtOYW1lZFRlbnNvcnNNYXAsIFRlbnNvckFycmF5TWFwLCBUZW5zb3JJbmZvLCBUZW5zb3JMaXN0TWFwfSBmcm9tICcuLi9kYXRhL3R5cGVzJztcbmltcG9ydCB7Z2V0Tm9kZU5hbWVBbmRJbmRleCwgZ2V0UGFyYW1WYWx1ZSwgZ2V0VGVuc29yLCBnZXRUZW5zb3JzRm9yQ3VycmVudENvbnRleHQsIHBhcnNlTm9kZU5hbWV9IGZyb20gJy4uL29wZXJhdGlvbnMvZXhlY3V0b3JzL3V0aWxzJztcbmltcG9ydCB7ZXhlY3V0ZU9wfSBmcm9tICcuLi9vcGVyYXRpb25zL29wZXJhdGlvbl9leGVjdXRvcic7XG5pbXBvcnQge0dyYXBoLCBOb2RlfSBmcm9tICcuLi9vcGVyYXRpb25zL3R5cGVzJztcblxuaW1wb3J0IHtFeGVjdXRpb25Db250ZXh0LCBFeGVjdXRpb25Db250ZXh0SW5mb30gZnJvbSAnLi9leGVjdXRpb25fY29udGV4dCc7XG5pbXBvcnQge2dldEV4ZWN1dGlvblN1YmdyYXBoLCBnZXROb2RlTGl2ZVVudGlsTWFwLCBnZXROb2Rlc0luVG9wb2xvZ2ljYWxPcmRlciwgaXNDb250cm9sRmxvd30gZnJvbSAnLi9tb2RlbF9hbmFseXNpcyc7XG5pbXBvcnQge1Jlc291cmNlTWFuYWdlcn0gZnJvbSAnLi9yZXNvdXJjZV9tYW5hZ2VyJztcbmltcG9ydCB7RnVuY3Rpb25FeGVjdXRvcn0gZnJvbSAnLi90eXBlcyc7XG5cbmludGVyZmFjZSBOb2RlV2l0aENvbnRleHRzIHtcbiAgY29udGV4dHM6IEV4ZWN1dGlvbkNvbnRleHRJbmZvW107XG4gIG5vZGU6IE5vZGU7XG59XG5cbmV4cG9ydCBjbGFzcyBHcmFwaEV4ZWN1dG9yIGltcGxlbWVudHMgRnVuY3Rpb25FeGVjdXRvciB7XG4gIHByaXZhdGUgY29tcGlsZWRNYXAgPSBuZXcgTWFwPHN0cmluZywgUmV0dXJuVHlwZTx0eXBlb2YgdGhpcy5jb21waWxlPj4oKTtcbiAgcHJpdmF0ZSBwYXJzZU5vZGVOYW1lQ2FjaGUgPSBuZXcgTWFwPHN0cmluZywgW3N0cmluZywgbnVtYmVyLCBzdHJpbmc/XT4oKTtcbiAgcHJpdmF0ZSBfd2VpZ2h0TWFwOiBOYW1lZFRlbnNvcnNNYXAgPSB7fTtcbiAgcHJpdmF0ZSBfd2VpZ2h0SWRzOiBudW1iZXJbXTtcbiAgcHJpdmF0ZSBfc2lnbmF0dXJlOiBJU2lnbmF0dXJlRGVmO1xuICBwcml2YXRlIF9pbnB1dHM6IE5vZGVbXTtcbiAgcHJpdmF0ZSBfb3V0cHV0czogTm9kZVtdO1xuICBwcml2YXRlIF9pbml0Tm9kZXM6IE5vZGVbXTsgIC8vIEludGVybmFsIGluaXQgbm9kZXMgdG8gc3RhcnQgaW5pdGlhbGl6YXRpb24uXG4gIHByaXZhdGUgU0VQQVJBVE9SID0gJywnO1xuICBwcml2YXRlIF9mdW5jdGlvbnM6IHtba2V5OiBzdHJpbmddOiBHcmFwaH0gPSB7fTtcbiAgcHJpdmF0ZSBfZnVuY3Rpb25FeGVjdXRvck1hcDoge1trZXk6IHN0cmluZ106IEZ1bmN0aW9uRXhlY3V0b3J9ID0ge307XG4gIHByaXZhdGUgX3Jlc291cmNlTWFuYWdlcjogUmVzb3VyY2VNYW5hZ2VyO1xuICBwcml2YXRlIGNsb25lZFRlbnNvcnNNYXA6IE5hbWVkVGVuc29yc01hcDtcbiAgcHJpdmF0ZSBrZWVwSW50ZXJtZWRpYXRlVGVuc29ycyA9IGZhbHNlO1xuXG4gIGdldCB3ZWlnaHRJZHMoKTogbnVtYmVyW10ge1xuICAgIHJldHVybiB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LndlaWdodElkcyA6IHRoaXMuX3dlaWdodElkcztcbiAgfVxuXG4gIGdldCBmdW5jdGlvbkV4ZWN1dG9yTWFwKCk6IHtba2V5OiBzdHJpbmddOiBGdW5jdGlvbkV4ZWN1dG9yfSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuZnVuY3Rpb25FeGVjdXRvck1hcCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnVuY3Rpb25FeGVjdXRvck1hcDtcbiAgfVxuXG4gIGdldCB3ZWlnaHRNYXAoKTogTmFtZWRUZW5zb3JzTWFwIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC53ZWlnaHRNYXAgOiB0aGlzLl93ZWlnaHRNYXA7XG4gIH1cblxuICBzZXQgd2VpZ2h0TWFwKHdlaWdodE1hcDogTmFtZWRUZW5zb3JzTWFwKSB7XG4gICAgY29uc3Qgd2VpZ2h0SWRzID0gT2JqZWN0LmtleXMod2VpZ2h0TWFwKS5tYXAoXG4gICAgICAgIGtleSA9PiB3ZWlnaHRNYXBba2V5XS5tYXAodGVuc29yID0+IHRlbnNvci5pZCkpO1xuICAgIHRoaXMuX3dlaWdodElkcyA9IFtdLmNvbmNhdCguLi53ZWlnaHRJZHMpO1xuICAgIHRoaXMuX3dlaWdodE1hcCA9IHdlaWdodE1hcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYFJlc291cmNlTWFuYWdlcmAgc2hhcmVkIGJ5IGV4ZWN1dG9ycyBvZiBhIG1vZGVsLlxuICAgKiBAcGFyYW0gcmVzb3VyY2VNYW5hZ2VyOiBgUmVzb3VyY2VNYW5hZ2VyYCBvZiB0aGUgYEdyYXBoTW9kZWxgLlxuICAgKi9cbiAgc2V0IHJlc291cmNlTWFuYWdlcihyZXNvdXJjZU1hbmFnZXI6IFJlc291cmNlTWFuYWdlcikge1xuICAgIHRoaXMuX3Jlc291cmNlTWFuYWdlciA9IHJlc291cmNlTWFuYWdlcjtcbiAgfVxuXG4gIGdldCBpbnB1dHMoKTogVGVuc29ySW5mb1tdIHtcbiAgICByZXR1cm4gdGhpcy5faW5wdXRzLm1hcChub2RlID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IG5vZGUubmFtZSxcbiAgICAgICAgc2hhcGU6IG5vZGUuYXR0clBhcmFtc1snc2hhcGUnXSA/XG4gICAgICAgICAgICBub2RlLmF0dHJQYXJhbXNbJ3NoYXBlJ10udmFsdWUgYXMgbnVtYmVyW10gOlxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBkdHlwZTogbm9kZS5hdHRyUGFyYW1zWydkdHlwZSddID9cbiAgICAgICAgICAgIG5vZGUuYXR0clBhcmFtc1snZHR5cGUnXS52YWx1ZSBhcyBEYXRhVHlwZSA6XG4gICAgICAgICAgICB1bmRlZmluZWRcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBnZXQgb3V0cHV0cygpOiBUZW5zb3JJbmZvW10ge1xuICAgIHJldHVybiB0aGlzLl9vdXRwdXRzLm1hcChub2RlID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IG5vZGUubmFtZSxcbiAgICAgICAgc2hhcGU6IG5vZGUuYXR0clBhcmFtc1snc2hhcGUnXSA/XG4gICAgICAgICAgICBub2RlLmF0dHJQYXJhbXNbJ3NoYXBlJ10udmFsdWUgYXMgbnVtYmVyW10gOlxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBkdHlwZTogbm9kZS5hdHRyUGFyYW1zWydkdHlwZSddID9cbiAgICAgICAgICAgIG5vZGUuYXR0clBhcmFtc1snZHR5cGUnXS52YWx1ZSBhcyBEYXRhVHlwZSA6XG4gICAgICAgICAgICB1bmRlZmluZWRcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBnZXQgaW5wdXROb2RlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0cy5tYXAobm9kZSA9PiBub2RlLnNpZ25hdHVyZUtleSB8fCBub2RlLm5hbWUpO1xuICB9XG5cbiAgZ2V0IG91dHB1dE5vZGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5fb3V0cHV0cy5tYXAoKG5vZGUpID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBub2RlLnNpZ25hdHVyZUtleSB8fCBub2RlLm5hbWU7XG4gICAgICByZXR1cm4gbm9kZS5kZWZhdWx0T3V0cHV0ID8gKGAke25hbWV9OiR7bm9kZS5kZWZhdWx0T3V0cHV0fWApIDogbmFtZTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldCBmdW5jdGlvbnMoKToge1trZXk6IHN0cmluZ106IElTaWduYXR1cmVEZWZ9IHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5fZnVuY3Rpb25zKS5yZWR1Y2UoKG1hcCwga2V5KSA9PiB7XG4gICAgICBtYXBba2V5XSA9IHRoaXMuX2Z1bmN0aW9uc1trZXldLnNpZ25hdHVyZTtcbiAgICAgIHJldHVybiBtYXA7XG4gICAgfSwge30gYXMge1trZXk6IHN0cmluZ106IElTaWduYXR1cmVEZWZ9KTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gZ3JhcGggR3JhcGggdGhlIG1vZGVsIG9yIGZ1bmN0aW9uIGdyYXBoIHRvIGJlIGV4ZWN1dGVkLlxuICAgKiBAcGFyYW0gcGFyZW50IFdoZW4gYnVpbGRpbmcgZnVuY3Rpb24gZXhlY3RvciB5b3UgbmVlZCB0byBzZXQgdGhlIHBhcmVudFxuICAgKiBleGVjdXRvci4gU2luY2UgdGhlIHdlaWdodHMgYW5kIGZ1bmN0aW9uIGV4ZWN1dG9yIG1hcHMgYXJlIHNldCBhdCBwYXJhbnRcbiAgICogbGV2ZWwsIHRoYXQgZnVuY3Rpb24gZXhlY3V0b3IgY2FuIGFjY2VzcyB0aGUgZnVuY3Rpb24gbWFwcyBhbmQgd2VpZ2h0IG1hcHNcbiAgICogdGhyb3VnaCB0aGUgcGFyZW50LlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBncmFwaDogR3JhcGgsIHByaXZhdGUgcGFyZW50PzogR3JhcGhFeGVjdXRvcikge1xuICAgIHRoaXMuX291dHB1dHMgPSBncmFwaC5vdXRwdXRzO1xuICAgIHRoaXMuX2lucHV0cyA9IGdyYXBoLmlucHV0cztcbiAgICB0aGlzLl9pbml0Tm9kZXMgPSBncmFwaC5pbml0Tm9kZXM7XG4gICAgdGhpcy5fc2lnbmF0dXJlID0gZ3JhcGguc2lnbmF0dXJlO1xuICAgIHRoaXMuX2Z1bmN0aW9ucyA9IGdyYXBoLmZ1bmN0aW9ucztcbiAgICAvLyBjcmVhdGUgc3ViLWdyYXBoIGV4ZWN1dG9yc1xuICAgIGlmIChncmFwaC5mdW5jdGlvbnMgIT0gbnVsbCkge1xuICAgICAgT2JqZWN0LmtleXMoZ3JhcGguZnVuY3Rpb25zKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICB0aGlzLl9mdW5jdGlvbkV4ZWN1dG9yTWFwW25hbWVdID1cbiAgICAgICAgICAgIG5ldyBHcmFwaEV4ZWN1dG9yKGdyYXBoLmZ1bmN0aW9uc1tuYW1lXSwgdGhpcyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldENvbXBpbGF0aW9uS2V5KGlucHV0czogTm9kZVtdLCBvdXRwdXRzOiBOb2RlW10pOiBzdHJpbmcge1xuICAgIGNvbnN0IHNvcnRlZElucHV0cyA9IGlucHV0cy5tYXAobm9kZSA9PiBub2RlLm5hbWUpLnNvcnQoKTtcbiAgICBjb25zdCBzb3J0ZWRPdXRwdXRzID0gb3V0cHV0cy5tYXAobm9kZSA9PiBub2RlLm5hbWUpLnNvcnQoKTtcbiAgICByZXR1cm4gc29ydGVkSW5wdXRzLmpvaW4odGhpcy5TRVBBUkFUT1IpICsgJy0tJyArXG4gICAgICAgIHNvcnRlZE91dHB1dHMuam9pbih0aGlzLlNFUEFSQVRPUik7XG4gIH1cblxuICAvKipcbiAgICogQ29tcGlsZXMgdGhlIGluZmVyZW5jZSBncmFwaCBhbmQgcmV0dXJucyB0aGUgbWluaW1hbCBzZXQgb2Ygbm9kZXMgdGhhdCBhcmVcbiAgICogcmVxdWlyZWQgZm9yIGV4ZWN1dGlvbiwgaW4gdGhlIGNvcnJlY3QgZXhlY3V0aW9uIG9yZGVyLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBjb21waWxhdGlvbiBUaGUgY29tcGlsZSByZXN1bHQuXG4gICAqIEByZXR1cm5zIHtOb2RlW119IGNvbXBpbGF0aW9uLm9yZGVyZWROb2RlcyBOb2RlcyBpbiB0aGUgY29ycmVjdCBleGVjdXRpb25cbiAgICogICAgIG9yZGVyLlxuICAgKiBAcmV0dXJucyB7TWFwPHN0cmluZywgTm9kZVtdPn0gY29tcGlsYXRpb24ubm9kZUxpdmVVbnRpbE1hcCBBIG1hcCBmcm9tIG5vZGVcbiAgICogICAgIHRvIGRpc3Bvc2FibGUgbm9kZXMgYWZ0ZXIgaXRzIGV4ZWN1dGlvbi4gVGhhdCBpcywgZm9yIGEgbm9kZSBgeGAsXG4gICAqICAgICBgbm9kZUxpdmVVbnRpbE1hcFt4XWAgaW5kaWNhdGVzIGFsbCBub2RlcyB3aG9zZSBpbnRlcm1lZGlhdGVcbiAgICogICAgIHRlbnNvcnMgc2hvdWxkIGJlIGRpc3Bvc2VkIGFmdGVyIGB4YCBpcyBleGVjdXRlZC5cbiAgICovXG4gIHByaXZhdGUgY29tcGlsZShpbnB1dHM6IE5hbWVkVGVuc29yTWFwLCBvdXRwdXRzOiBOb2RlW10pOlxuICAgICAge29yZGVyZWROb2RlczogTm9kZVtdLCBub2RlTGl2ZVVudGlsTWFwOiBNYXA8c3RyaW5nLCBOb2RlW10+fSB7XG4gICAgY29uc3QgZXhlY3V0aW9uSW5mbyA9XG4gICAgICAgIGdldEV4ZWN1dGlvblN1YmdyYXBoKGlucHV0cywgb3V0cHV0cywgdGhpcy53ZWlnaHRNYXAsIHRoaXMuX2luaXROb2Rlcyk7XG4gICAgY29uc3Qge21pc3NpbmdJbnB1dHMsIGR5bmFtaWNOb2RlLCBzeW5jSW5wdXRzfSA9IGV4ZWN1dGlvbkluZm87XG4gICAgaWYgKGR5bmFtaWNOb2RlICE9IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgVGhpcyBleGVjdXRpb24gY29udGFpbnMgdGhlIG5vZGUgJyR7ZHluYW1pY05vZGUubmFtZX0nLCB3aGljaCBoYXMgYCArXG4gICAgICAgICAgYHRoZSBkeW5hbWljIG9wICcke2R5bmFtaWNOb2RlLm9wfScuIFBsZWFzZSB1c2UgYCArXG4gICAgICAgICAgYG1vZGVsLmV4ZWN1dGVBc3luYygpIGluc3RlYWQuIEFsdGVybmF0aXZlbHksIHRvIGF2b2lkIHRoZSBgICtcbiAgICAgICAgICBgZHluYW1pYyBvcHMsIHNwZWNpZnkgdGhlIGlucHV0cyBbJHtzeW5jSW5wdXRzfV1gKTtcbiAgICB9XG5cbiAgICBpZiAobWlzc2luZ0lucHV0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBvdXROYW1lcyA9IG91dHB1dHMubWFwKG4gPT4gbi5uYW1lKTtcbiAgICAgIGNvbnN0IGluTmFtZXMgPSBPYmplY3Qua2V5cyhpbnB1dHMpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDYW5ub3QgY29tcHV0ZSB0aGUgb3V0cHV0cyBbJHtvdXROYW1lc31dIGZyb20gdGhlIHByb3ZpZGVkIGlucHV0cyBgICtcbiAgICAgICAgICBgWyR7aW5OYW1lc31dLiBNaXNzaW5nIHRoZSBmb2xsb3dpbmcgaW5wdXRzOiBbJHttaXNzaW5nSW5wdXRzfV1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBvcmRlcmVkTm9kZXMgPSBnZXROb2Rlc0luVG9wb2xvZ2ljYWxPcmRlcih0aGlzLmdyYXBoLCBleGVjdXRpb25JbmZvKTtcbiAgICBjb25zdCBub2RlTGl2ZVVudGlsTWFwID0gZ2V0Tm9kZUxpdmVVbnRpbE1hcChvcmRlcmVkTm9kZXMpO1xuICAgIHJldHVybiB7b3JkZXJlZE5vZGVzLCBub2RlTGl2ZVVudGlsTWFwfTtcbiAgfVxuXG4gIHByaXZhdGUgY2xvbmVBbmRLZWVwVGVuc29yKHRlbnNvcjogVGVuc29yKSB7XG4gICAgaWYgKHRlbnNvciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgY2xvbmUgPSB0ZW5zb3IuY2xvbmUoKTtcbiAgICAvLyBLZWVwIHRoZSBjbG9uZSBiZWNhdXNlYG1vZGVsLmV4ZWN1dGUoKWAgbWF5IGJlIGNhbGxlZCB3aXRoaW5cbiAgICAvLyBhIGB0aWR5KClgLCBidXQgdGhlIHVzZXIgbWF5IGluc3BlY3QgdGhlc2UgdGVuc29ycyBhZnRlciB0aGVcbiAgICAvLyB0aWR5LlxuICAgIGtlZXAoY2xvbmUpO1xuICAgIHJldHVybiBjbG9uZTtcbiAgfVxuXG4gIHByaXZhdGUgY2xvbmVUZW5zb3JMaXN0KHRlbnNvcnM6IFRlbnNvcltdKSB7XG4gICAgaWYgKCF0ZW5zb3JzKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgY2xvbmVkVGVuc29yID0gdGVuc29ycy5tYXAodGVuc29yID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmNsb25lQW5kS2VlcFRlbnNvcih0ZW5zb3IpO1xuICAgIH0pO1xuICAgIHJldHVybiBjbG9uZWRUZW5zb3I7XG4gIH1cblxuICBwcml2YXRlIGNsb25lVGVuc29yTWFwKHRlbnNvcnNNYXA6IE5hbWVkVGVuc29yc01hcCk6IE5hbWVkVGVuc29yc01hcCB7XG4gICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgICAgT2JqZWN0LmVudHJpZXModGVuc29yc01hcCkubWFwKChbbmFtZSwgdGVuc29yc0xpc3RdKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIFtuYW1lLCB0aGlzLmNsb25lVGVuc29yTGlzdCh0ZW5zb3JzTGlzdCldO1xuICAgICAgICB9KSk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGluZmVyZW5jZSBmb3IgZ2l2ZW4gaW5wdXQgdGVuc29ycy5cbiAgICogQHBhcmFtIGlucHV0cyBUZW5zb3IgbWFwIGZvciB0aGUgbW9kZWwgaW5wdXRzLCBrZXllZCBieSB0aGUgaW5wdXQgbm9kZVxuICAgKiBuYW1lcy5cbiAgICogQHBhcmFtIG91dHB1dHMgT3B0aW9uYWwuIG91dHB1dCBub2RlIG5hbWUgZnJvbSB0aGUgVGVuc29yZmxvdyBtb2RlbCwgaWZcbiAgICogbm8gb3V0cHV0cyBhcmUgc3BlY2lmaWVkLCB0aGUgZGVmYXVsdCBvdXRwdXRzIG9mIHRoZSBtb2RlbCB3b3VsZCBiZSB1c2VkLlxuICAgKiBZb3UgY2FuIGluc3BlY3QgaW50ZXJtZWRpYXRlIG5vZGVzIG9mIHRoZSBtb2RlbCBieSBhZGRpbmcgdGhlbSB0byB0aGVcbiAgICogb3V0cHV0cyBhcnJheS5cbiAgICovXG4gIGV4ZWN1dGUoaW5wdXRzOiBOYW1lZFRlbnNvck1hcCwgb3V0cHV0cz86IHN0cmluZ1tdKTogVGVuc29yW10ge1xuICAgIC8vIERpc3Bvc2UgYW55IHRlbnNvcnMgZnJvbSBhIHByaW9yIHJ1biB0byBhdm9pZCBsZWFraW5nIHRoZW0uXG4gICAgdGhpcy5kaXNwb3NlSW50ZXJtZWRpYXRlVGVuc29ycygpO1xuICAgIGlucHV0cyA9IHRoaXMubWFwSW5wdXRzKGlucHV0cyk7XG4gICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhpbnB1dHMpLnNvcnQoKTtcbiAgICB0aGlzLmNoZWNrSW5wdXRzKGlucHV0cyk7XG4gICAgdGhpcy5jaGVja0lucHV0U2hhcGVBbmRUeXBlKGlucHV0cyk7XG4gICAgb3V0cHV0cyA9IHRoaXMubWFwT3V0cHV0cyhvdXRwdXRzKTtcbiAgICB0aGlzLmNoZWNrT3V0cHV0cyhvdXRwdXRzKTtcbiAgICBjb25zdCBpbnB1dE5vZGVzID1cbiAgICAgICAgbmFtZXMubWFwKG5hbWUgPT4gdGhpcy5ncmFwaC5ub2Rlc1twYXJzZU5vZGVOYW1lKG5hbWUpWzBdXSk7XG4gICAgY29uc3Qgb3V0cHV0Tm9kZU5hbWVzID0gb3V0cHV0cy5tYXAobmFtZSA9PiBwYXJzZU5vZGVOYW1lKG5hbWUpWzBdKTtcbiAgICBjb25zdCBvdXRwdXROb2RlTmFtZVNldCA9IG5ldyBTZXQob3V0cHV0Tm9kZU5hbWVzKTtcbiAgICBsZXQgb3V0cHV0Tm9kZXMgPSBvdXRwdXROb2RlTmFtZXMubWFwKG5hbWUgPT4gdGhpcy5ncmFwaC5ub2Rlc1tuYW1lXSk7XG4gICAgLy8gSWYgbm8gb3V0cHV0cyBhcmUgc3BlY2lmaWVkLCB0aGVuIHVzZSB0aGUgZGVmYXVsdCBvdXRwdXRzIG9mIHRoZSBtb2RlbC5cbiAgICBpZiAob3V0cHV0Tm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBvdXRwdXROb2RlcyA9IHRoaXMuX291dHB1dHM7XG4gICAgfVxuXG4gICAgY29uc3QgY29tcGlsYXRpb25LZXkgPSB0aGlzLmdldENvbXBpbGF0aW9uS2V5KGlucHV0Tm9kZXMsIG91dHB1dE5vZGVzKTtcblxuICAgIC8vIERvIG5vdGhpbmcgaWYgdGhlIGNvbXBpbGVkIGdyYXBoIGNhY2hlIGNvbnRhaW5zIHRoZSBpbnB1dC5cbiAgICBsZXQgY29tcGlsYXRpb24gPSB0aGlzLmNvbXBpbGVkTWFwLmdldChjb21waWxhdGlvbktleSk7XG4gICAgaWYgKGNvbXBpbGF0aW9uID09IG51bGwpIHtcbiAgICAgIGNvbXBpbGF0aW9uID0gdGhpcy5jb21waWxlKGlucHV0cywgb3V0cHV0Tm9kZXMpO1xuICAgICAgdGhpcy5jb21waWxlZE1hcC5zZXQoY29tcGlsYXRpb25LZXksIGNvbXBpbGF0aW9uKTtcbiAgICB9XG5cbiAgICAvLyBLZWVwIHRlbnNvcnMgaWYgS0VFUF9JTlRFUk1FRElBVEVfVEVOU09SUyBpcyBvbi5cbiAgICB0cnkge1xuICAgICAgdGhpcy5rZWVwSW50ZXJtZWRpYXRlVGVuc29ycyA9IGVudigpLmdldEJvb2woJ0tFRVBfSU5URVJNRURJQVRFX1RFTlNPUlMnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmtlZXBJbnRlcm1lZGlhdGVUZW5zb3JzID0gZmFsc2U7XG4gICAgICBjb25zb2xlLndhcm4oZS5tZXNzYWdlKTtcbiAgICB9XG4gICAgY29uc3QgdGVuc29yQXJyYXlNYXA6IFRlbnNvckFycmF5TWFwID0ge307XG4gICAgY29uc3QgdGVuc29yTGlzdE1hcDogVGVuc29yTGlzdE1hcCA9IHt9O1xuXG4gICAgcmV0dXJuIHRpZHkoKCkgPT4ge1xuICAgICAgY29uc3QgY29udGV4dCA9IG5ldyBFeGVjdXRpb25Db250ZXh0KFxuICAgICAgICAgIHRoaXMud2VpZ2h0TWFwLCB0ZW5zb3JBcnJheU1hcCwgdGVuc29yTGlzdE1hcCxcbiAgICAgICAgICB0aGlzLmZ1bmN0aW9uRXhlY3V0b3JNYXAsIHRoaXMucGFyc2VOb2RlTmFtZUNhY2hlKTtcbiAgICAgIGNvbnN0IHRlbnNvcnNNYXA6IE5hbWVkVGVuc29yc01hcCA9IHsuLi50aGlzLndlaWdodE1hcH07XG4gICAgICBpZiAodGhpcy5rZWVwSW50ZXJtZWRpYXRlVGVuc29ycykge1xuICAgICAgICB0aGlzLmNsb25lZFRlbnNvcnNNYXAgPSB0aGlzLmNsb25lVGVuc29yTWFwKHRoaXMud2VpZ2h0TWFwKTtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmtleXMoaW5wdXRzKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICBjb25zdCBbbm9kZU5hbWUsIGluZGV4XSA9IHBhcnNlTm9kZU5hbWUobmFtZSwgY29udGV4dCk7XG4gICAgICAgIGNvbnN0IHRlbnNvcnM6IFRlbnNvcltdID0gW107XG4gICAgICAgIHRlbnNvcnNbaW5kZXhdID0gaW5wdXRzW25hbWVdO1xuICAgICAgICB0ZW5zb3JzTWFwW25vZGVOYW1lXSA9IHRlbnNvcnM7XG4gICAgICAgIGlmICh0aGlzLmtlZXBJbnRlcm1lZGlhdGVUZW5zb3JzKSB7XG4gICAgICAgICAgdGhpcy5jbG9uZWRUZW5zb3JzTWFwW25vZGVOYW1lXSA9IHRoaXMuY2xvbmVUZW5zb3JMaXN0KHRlbnNvcnMpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgdGVuc29yc1RvS2VlcCA9IHRoaXMuZ2V0RnJvemVuVGVuc29ySWRzKHRlbnNvcnNNYXApO1xuICAgICAgY29uc3Qge29yZGVyZWROb2Rlcywgbm9kZUxpdmVVbnRpbE1hcH0gPSBjb21waWxhdGlvbjtcbiAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBvcmRlcmVkTm9kZXMpIHtcbiAgICAgICAgaWYgKHRlbnNvcnNNYXBbbm9kZS5uYW1lXSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRlbnNvcnMgPVxuICAgICAgICAgICAgZXhlY3V0ZU9wKG5vZGUsIHRlbnNvcnNNYXAsIGNvbnRleHQsIHRoaXMuX3Jlc291cmNlTWFuYWdlcikgYXNcbiAgICAgICAgICAgIFRlbnNvcltdO1xuICAgICAgICBpZiAodXRpbC5pc1Byb21pc2UodGVuc29ycykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGBUaGUgZXhlY3V0aW9uIG9mIHRoZSBvcCAnJHtub2RlLm9wfScgcmV0dXJuZWQgYSBwcm9taXNlLiBgICtcbiAgICAgICAgICAgICAgYFBsZWFzZSB1c2UgbW9kZWwuZXhlY3V0ZUFzeW5jKCkgaW5zdGVhZC5gKTtcbiAgICAgICAgfVxuICAgICAgICB0ZW5zb3JzTWFwW25vZGUubmFtZV0gPSB0ZW5zb3JzO1xuICAgICAgICBpZiAodGhpcy5rZWVwSW50ZXJtZWRpYXRlVGVuc29ycykge1xuICAgICAgICAgIHRoaXMuY2xvbmVkVGVuc29yc01hcFtub2RlLm5hbWVdID0gdGhpcy5jbG9uZVRlbnNvckxpc3QodGVuc29ycyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGVja1RlbnNvckZvckRpc3Bvc2FsV2l0aE5vZGVMaXZlVW50aWxJbmZvKFxuICAgICAgICAgICAgbm9kZSwgdGVuc29yc01hcCwgY29udGV4dCwgdGVuc29yc1RvS2VlcCwgb3V0cHV0Tm9kZU5hbWVTZXQsXG4gICAgICAgICAgICBub2RlTGl2ZVVudGlsTWFwLmdldChub2RlLm5hbWUpKTtcbiAgICAgIH1cblxuICAgICAgLy8gZGlzcG9zZSB0aGUgY29udGV4dCBmb3IgdGhlIHJvb3QgZXhlY3V0b3JcbiAgICAgIGlmICh0aGlzLnBhcmVudCA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRleHQuZGlzcG9zZSh0ZW5zb3JzVG9LZWVwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dHB1dHMubWFwKG5hbWUgPT4gZ2V0VGVuc29yKG5hbWUsIHRlbnNvcnNNYXAsIGNvbnRleHQpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RnJvemVuVGVuc29ySWRzKHRlbnNvck1hcDogTmFtZWRUZW5zb3JzTWFwKTogU2V0PG51bWJlcj4ge1xuICAgIGNvbnN0IGlkcyA9IFtdLmNvbmNhdC5hcHBseShcbiAgICAgICAgW10sXG4gICAgICAgIE9iamVjdC5rZXlzKHRlbnNvck1hcClcbiAgICAgICAgICAgIC5tYXAoa2V5ID0+IHRlbnNvck1hcFtrZXldKVxuICAgICAgICAgICAgLm1hcCh0ZW5zb3JzID0+IHRlbnNvcnMubWFwKHRlbnNvciA9PiB0ZW5zb3IuaWQpKSk7XG4gICAgcmV0dXJuIG5ldyBTZXQoaWRzKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tUZW5zb3JGb3JEaXNwb3NhbChcbiAgICAgIG5vZGVOYW1lOiBzdHJpbmcsIG5vZGU6IE5vZGUsIHRlbnNvck1hcDogTmFtZWRUZW5zb3JzTWFwLFxuICAgICAgY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCwgdGVuc29yc1RvS2VlcDogU2V0PG51bWJlcj4sXG4gICAgICBvdXRwdXROb2RlTmFtZVNldDogU2V0PHN0cmluZz4sXG4gICAgICBpbnRlcm1lZGlhdGVUZW5zb3JDb25zdW1lckNvdW50OiB7W2tleTogc3RyaW5nXTogbnVtYmVyfSkge1xuICAgIC8vIFNraXAgb3V0cHV0IG5vZGVzIGFuZCBhbnkgY29udHJvbCBmbG93IG5vZGVzLCBzaW5jZSBpdHMgZGVwZW5kZW5jeSBpc1xuICAgIC8vIHRyaWNreSB0byB0cmFjayBjb3JyZWN0bHkuXG4gICAgaWYgKGlzQ29udHJvbEZsb3cobm9kZSkgfHwgb3V0cHV0Tm9kZU5hbWVTZXQuaGFzKG5vZGVOYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgdGVuc29yIG9mIHRlbnNvck1hcFtub2RlTmFtZV0pIHtcbiAgICAgIGlmICh0ZW5zb3IgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGludGVybWVkaWF0ZVRlbnNvckNvbnN1bWVyQ291bnRbdGVuc29yLmlkXSA9XG4gICAgICAgICAgKGludGVybWVkaWF0ZVRlbnNvckNvbnN1bWVyQ291bnRbdGVuc29yLmlkXSB8fCAwKSArXG4gICAgICAgICAgbm9kZS5jaGlsZHJlbi5sZW5ndGg7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBpbnB1dCBvZiBub2RlLmlucHV0cykge1xuICAgICAgLy8gU2tpcCBhbnkgY29udHJvbCBmbG93IG5vZGVzLCBzaW5jZSBpdHMgZGVwZW5kZW5jeSBpcyB0cmlja3kgdG8gdHJhY2tcbiAgICAgIC8vIGNvcnJlY3RseS5cbiAgICAgIGlmIChpc0NvbnRyb2xGbG93KGlucHV0KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGVuc29ycyA9XG4gICAgICAgICAgZ2V0VGVuc29yc0ZvckN1cnJlbnRDb250ZXh0KGlucHV0Lm5hbWUsIHRlbnNvck1hcCwgY29udGV4dCk7XG4gICAgICBpZiAodGVuc29ycyA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IHRlbnNvciBvZiB0ZW5zb3JzKSB7XG4gICAgICAgIGlmICghdGVuc29yIHx8IHRlbnNvci5rZXB0IHx8IHRlbnNvcnNUb0tlZXAuaGFzKHRlbnNvci5pZCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9ubHkgaW50ZXJtZWRpYXRlIG5vZGVzJyB0ZW5zb3JzIGhhdmUgY291bnRzIHNldCwgbm90IG1hcmtlZCBhc1xuICAgICAgICAvLyBrZXB0LCBhbmQgbm90IGluIGB0ZW5zb3JzVG9LZWVwYC5cbiAgICAgICAgLy8gSW5wdXQgYW5kIHdlaWdodCBub2RlcycgdGVuc29ycyBzaG91bGQgZXhpc3QgaW4gYHRlbnNvcnNUb0tlZXBgLlxuICAgICAgICAvLyBPdXRwdXQgYW5kIGNvbnRyb2wgZmxvdyBub2RlcycgdGVuc29ycyBzaG91bGQgbmV2ZXIgaGF2ZSBjb3VudCBzZXQuXG4gICAgICAgIGNvbnN0IGNvdW50ID0gaW50ZXJtZWRpYXRlVGVuc29yQ29uc3VtZXJDb3VudFt0ZW5zb3IuaWRdO1xuICAgICAgICBpZiAoY291bnQgPT09IDEpIHtcbiAgICAgICAgICB0ZW5zb3IuZGlzcG9zZSgpO1xuICAgICAgICAgIGRlbGV0ZSBpbnRlcm1lZGlhdGVUZW5zb3JDb25zdW1lckNvdW50W3RlbnNvci5pZF07XG4gICAgICAgIH0gZWxzZSBpZiAoY291bnQgIT0gbnVsbCkge1xuICAgICAgICAgIGludGVybWVkaWF0ZVRlbnNvckNvbnN1bWVyQ291bnRbdGVuc29yLmlkXS0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1RlbnNvckZvckRpc3Bvc2FsV2l0aE5vZGVMaXZlVW50aWxJbmZvKFxuICAgICAgbm9kZTogTm9kZSwgdGVuc29yTWFwOiBOYW1lZFRlbnNvcnNNYXAsIGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQsXG4gICAgICB0ZW5zb3JzVG9LZWVwOiBTZXQ8bnVtYmVyPiwgb3V0cHV0Tm9kZU5hbWVTZXQ6IFNldDxzdHJpbmc+LFxuICAgICAgbGl2ZVVudGlsTm9kZXM/OiBOb2RlW10pIHtcbiAgICBmdW5jdGlvbiBpc05vbkRpc3Bvc2FibGVOb2RlKG5vZGU6IE5vZGUpIHtcbiAgICAgIC8vIFNraXAgb3V0cHV0IG5vZGVzIGFuZCBhbnkgY29udHJvbCBmbG93IG5vZGVzLCBzaW5jZSBpdHMgZGVwZW5kZW5jeSBpc1xuICAgICAgLy8gdHJpY2t5IHRvIHRyYWNrIGNvcnJlY3RseS5cbiAgICAgIHJldHVybiBpc0NvbnRyb2xGbG93KG5vZGUpIHx8IG91dHB1dE5vZGVOYW1lU2V0Lmhhcyhub2RlLm5hbWUpO1xuICAgIH1cblxuICAgIGlmIChpc0NvbnRyb2xGbG93KG5vZGUpIHx8IGxpdmVVbnRpbE5vZGVzID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IG5vZGVUb0Rpc3Bvc2Ugb2YgbGl2ZVVudGlsTm9kZXMpIHtcbiAgICAgIGlmIChpc05vbkRpc3Bvc2FibGVOb2RlKG5vZGVUb0Rpc3Bvc2UpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgdGVuc29ycyA9IGdldFRlbnNvcnNGb3JDdXJyZW50Q29udGV4dChcbiAgICAgICAgICBub2RlVG9EaXNwb3NlLm5hbWUsIHRlbnNvck1hcCwgY29udGV4dCk7XG4gICAgICBmb3IgKGNvbnN0IHRlbnNvciBvZiB0ZW5zb3JzKSB7XG4gICAgICAgIGlmICghdGVuc29yIHx8IHRlbnNvci5rZXB0IHx8IHRlbnNvcnNUb0tlZXAuaGFzKHRlbnNvci5pZCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0ZW5zb3IuZGlzcG9zZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgaW5mZXJlbmNlIGZvciBnaXZlbiBpbnB1dCB0ZW5zb3JzIGluIEFzeW5jIGZhc2hpb24uXG4gICAqIEBwYXJhbSBpbnB1dHMgVGVuc29yIG1hcCBmb3IgdGhlIG1vZGVsIGlucHV0cywga2V5ZWQgYnkgdGhlIGlucHV0IG5vZGVcbiAgICogbmFtZXMuXG4gICAqIEBwYXJhbSBvdXRwdXRzIG91dHB1dCBub2RlIG5hbWUgZnJvbSB0aGUgVGVuc29yZmxvdyBtb2RlbCwgaWYgbm8gb3V0cHV0c1xuICAgKiBhcmUgc3BlY2lmaWVkLCB0aGUgZGVmYXVsdCBvdXRwdXRzIG9mIHRoZSBtb2RlbCB3b3VsZCBiZSB1c2VkLiBZb3UgY2FuXG4gICAqIGluc3BlY3QgaW50ZXJtZWRpYXRlIG5vZGVzIG9mIHRoZSBtb2RlbCBieSBhZGRpbmcgdGhlbSB0byB0aGUgb3V0cHV0c1xuICAgKiBhcnJheS5cbiAgICovXG4gIGFzeW5jIGV4ZWN1dGVBc3luYyhpbnB1dHM6IE5hbWVkVGVuc29yTWFwLCBvdXRwdXRzPzogc3RyaW5nW10pOlxuICAgICAgUHJvbWlzZTxUZW5zb3JbXT4ge1xuICAgIHJldHVybiB0aGlzLl9leGVjdXRlQXN5bmMoaW5wdXRzLCBvdXRwdXRzKTtcbiAgfVxuXG4gIGRpc3Bvc2VJbnRlcm1lZGlhdGVUZW5zb3JzKCkge1xuICAgIGlmICghdGhpcy5jbG9uZWRUZW5zb3JzTWFwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIE9iamVjdC52YWx1ZXModGhpcy5jbG9uZWRUZW5zb3JzTWFwKS5mb3JFYWNoKHRlbnNvcnNMaXN0ID0+IHtcbiAgICAgIGZvciAoY29uc3QgdGVuc29yIG9mIHRlbnNvcnNMaXN0KSB7XG4gICAgICAgIGlmICh0ZW5zb3IgJiYgIXRlbnNvci5pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgdGVuc29yLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5jbG9uZWRUZW5zb3JzTWFwID0gbnVsbDtcbiAgfVxuXG4gIGdldEludGVybWVkaWF0ZVRlbnNvcnMoKTogTmFtZWRUZW5zb3JzTWFwIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZWRUZW5zb3JzTWFwO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIHRoZSBpbmZlcmVuY2UgZm9yIGdpdmVuIGlucHV0IHRlbnNvcnMgaW4gQXN5bmMgZmFzaGlvbi5cbiAgICogQHBhcmFtIGlucHV0cyBUZW5zb3IgbWFwIGZvciB0aGUgbW9kZWwgaW5wdXRzLCBrZXllZCBieSB0aGUgaW5wdXQgbm9kZVxuICAgKiBuYW1lcy5cbiAgICogQHBhcmFtIG91dHB1dHMgT3B0aW9uYWwuIG91dHB1dCBub2RlIG5hbWUgZnJvbSB0aGUgVGVuc29yZmxvdyBtb2RlbCxcbiAgICogaWYgbm8gb3V0cHV0cyBhcmUgc3BlY2lmaWVkLCB0aGUgZGVmYXVsdCBvdXRwdXRzIG9mIHRoZSBtb2RlbCB3b3VsZCBiZVxuICAgKiB1c2VkLiBZb3UgY2FuIGluc3BlY3QgaW50ZXJtZWRpYXRlIG5vZGVzIG9mIHRoZSBtb2RlbCBieSBhZGRpbmcgdGhlbSB0b1xuICAgKiB0aGUgb3V0cHV0cyBhcnJheS5cbiAgICogQHBhcmFtIGlzRnVuY3Rpb25FeGVjdXRpb24gT3B0aW9uYWwuIEZsYWcgZm9yIGV4ZWN1dGluZyBhIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0gdGVuc29yQXJyYXlNYXAgT3B0aW9uYWwsIGdsb2JhbCBUZW5zb3JBcnJheSBtYXAgYnkgaWQuIFVzZWQgZm9yXG4gICAqIGZ1bmN0aW9uIGV4ZWN1dGlvbi5cbiAgICogQHBhcmFtIHRlbnNvckFycmF5TWFwIE9wdGlvbmFsIGdsb2JhbCBUZW5zb3JMaXN0IG1hcCBieSBpZC4gVXNlZCBmb3JcbiAgICogZnVuY3Rpb24gZXhlY3V0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBfZXhlY3V0ZUFzeW5jKFxuICAgICAgaW5wdXRzOiBOYW1lZFRlbnNvck1hcCwgb3V0cHV0cz86IHN0cmluZ1tdLCBpc0Z1bmN0aW9uRXhlY3V0aW9uID0gZmFsc2UsXG4gICAgICB0ZW5zb3JBcnJheU1hcDogVGVuc29yQXJyYXlNYXAgPSB7fSxcbiAgICAgIHRlbnNvckxpc3RNYXA6IFRlbnNvckxpc3RNYXAgPSB7fSk6IFByb21pc2U8VGVuc29yW10+IHtcbiAgICAvLyBEaXNwb3NlIGFueSB0ZW5zb3JzIGZyb20gYSBwcmlvciBydW4gdG8gYXZvaWQgbGVha2luZyB0aGVtLlxuICAgIHRoaXMuZGlzcG9zZUludGVybWVkaWF0ZVRlbnNvcnMoKTtcbiAgICBpZiAoIWlzRnVuY3Rpb25FeGVjdXRpb24pIHtcbiAgICAgIGlucHV0cyA9IHRoaXMubWFwSW5wdXRzKGlucHV0cyk7XG4gICAgICB0aGlzLmNoZWNrSW5wdXRzKGlucHV0cyk7XG4gICAgICB0aGlzLmNoZWNrSW5wdXRTaGFwZUFuZFR5cGUoaW5wdXRzKTtcbiAgICAgIG91dHB1dHMgPSB0aGlzLm1hcE91dHB1dHMob3V0cHV0cyk7XG4gICAgICB0aGlzLmNoZWNrT3V0cHV0cyhvdXRwdXRzKTtcbiAgICB9XG5cbiAgICAvLyBLZWVwIHRlbnNvcnMgaWYgS0VFUF9JTlRFUk1FRElBVEVfVEVOU09SUyBpcyBvbi5cbiAgICB0cnkge1xuICAgICAgdGhpcy5rZWVwSW50ZXJtZWRpYXRlVGVuc29ycyA9IGVudigpLmdldEJvb2woJ0tFRVBfSU5URVJNRURJQVRFX1RFTlNPUlMnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmtlZXBJbnRlcm1lZGlhdGVUZW5zb3JzID0gZmFsc2U7XG4gICAgICBjb25zb2xlLndhcm4oZS5tZXNzYWdlKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb250ZXh0ID0gbmV3IEV4ZWN1dGlvbkNvbnRleHQoXG4gICAgICAgIHRoaXMud2VpZ2h0TWFwLCB0ZW5zb3JBcnJheU1hcCwgdGVuc29yTGlzdE1hcCwgdGhpcy5mdW5jdGlvbkV4ZWN1dG9yTWFwLFxuICAgICAgICB0aGlzLnBhcnNlTm9kZU5hbWVDYWNoZSk7XG5cbiAgICBpZiAodGhpcy5rZWVwSW50ZXJtZWRpYXRlVGVuc29ycykge1xuICAgICAgdGhpcy5jbG9uZWRUZW5zb3JzTWFwID0gdGhpcy5jbG9uZVRlbnNvck1hcCh0aGlzLndlaWdodE1hcCk7XG4gICAgfVxuXG4gICAgLy8gR3JhcGggd2l0aCBjb250cm9sIGZsb3cgb3AgcmVxdWlyZXMgcnVudGltZSBldmFsdWF0aW9uIG9mIHRoZSBleGVjdXRpb25cbiAgICAvLyBvcmRlciwgd2hpbGUgd2l0aG91dCBjb250cm9sIGZsb3cgdGhlIGV4ZWN1dGlvbiBvcmRlciBpcyBwcmUtZGV0ZXJtaW5lZFxuICAgIC8vIGluIHRoZSBjb21waWxlIG1ldGhvZC5cbiAgICBjb25zdCB0ZW5zb3JzTWFwID0gYXdhaXQgdGhpcy5leGVjdXRlV2l0aENvbnRyb2xGbG93KFxuICAgICAgICBpbnB1dHMsIGNvbnRleHQsIG91dHB1dHMsIGlzRnVuY3Rpb25FeGVjdXRpb24pO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBvdXRwdXRzLm1hcChuYW1lID0+IGdldFRlbnNvcihuYW1lLCB0ZW5zb3JzTWFwLCBjb250ZXh0KSk7XG5cbiAgICAvLyBkaXNwb3NlIGFsbCB0aGUgaW50ZXJtZWRpYXRlIHRlbnNvcnNcbiAgICBjb25zdCBvdXRwdXRJZHMgPSByZXN1bHRzLm1hcCh0ID0+IHQuaWQpO1xuICAgIGNvbnN0IGlucHV0SWRzID0gT2JqZWN0LmtleXMoaW5wdXRzKS5tYXAobmFtZSA9PiBpbnB1dHNbbmFtZV0uaWQpO1xuICAgIGNvbnN0IGtlZXBJZHMgPVxuICAgICAgICBuZXcgU2V0PG51bWJlcj4oWy4uLm91dHB1dElkcywgLi4uaW5wdXRJZHMsIC4uLnRoaXMud2VpZ2h0SWRzXSk7XG5cbiAgICBPYmplY3QudmFsdWVzKHRlbnNvcnNNYXApLmZvckVhY2godGVuc29yc0xpc3QgPT4ge1xuICAgICAgdGVuc29yc0xpc3QuZm9yRWFjaCh0ZW5zb3IgPT4ge1xuICAgICAgICBpZiAodGVuc29yICYmICF0ZW5zb3IuaXNEaXNwb3NlZCAmJiAha2VlcElkcy5oYXModGVuc29yLmlkKSkge1xuICAgICAgICAgIHRlbnNvci5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gZGlzcG9zZSB0aGUgY29udGV4dCBmb3IgdGhlIHJvb3QgZXhlY3V0b3JcbiAgICBpZiAodGhpcy5wYXJlbnQgPT0gbnVsbCkge1xuICAgICAgY29udGV4dC5kaXNwb3NlKGtlZXBJZHMpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG5cbiAgYXN5bmMgZXhlY3V0ZUZ1bmN0aW9uQXN5bmMoXG4gICAgICBpbnB1dHM6IFRlbnNvcltdLCB0ZW5zb3JBcnJheU1hcDogVGVuc29yQXJyYXlNYXAsXG4gICAgICB0ZW5zb3JMaXN0TWFwOiBUZW5zb3JMaXN0TWFwKTogUHJvbWlzZTxUZW5zb3JbXT4ge1xuICAgIGNvbnN0IG1hcHBlZElucHV0cyA9IGlucHV0cy5yZWR1Y2UoKG1hcCwgdGVuc29yLCBpbmRleCkgPT4ge1xuICAgICAgbWFwW3RoaXMuaW5wdXRzW2luZGV4XS5uYW1lXSA9IHRlbnNvcjtcbiAgICAgIHJldHVybiBtYXA7XG4gICAgfSwge30gYXMgTmFtZWRUZW5zb3JNYXApO1xuXG4gICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGVBc3luYyhcbiAgICAgICAgbWFwcGVkSW5wdXRzLCB0aGlzLm91dHB1dE5vZGVzLCB0cnVlLCB0ZW5zb3JBcnJheU1hcCwgdGVuc29yTGlzdE1hcCk7XG4gIH1cblxuICAvKipcbiAgICogV2hlbiB0aGVyZSBhcmUgY29udHJvbCBmbG93IG5vZGVzIGluIHRoZSBncmFwaCwgdGhlIGdyYXBoIGV4ZWN1dGlvbiB1c2VcbiAgICogRXhlY3V0aW9uQ29udGV4dCB0byBrZWVwIHRyYWNrIG9mIHRoZSBmcmFtZXMgYW5kIGxvb3AgaXRlcmF0b3JzLlxuICAgKiBAcGFyYW0gaW5wdXRzIHBsYWNlaG9sZGVyIHRlbnNvcnMgZm9yIHRoZSBncmFwaC5cbiAgICogQHBhcmFtIGNvbnRleHQgdGhlIGV4ZWN1dGlvbiBjb250ZXh0IG9iamVjdCBmb3IgY3VycmVudCBleGVjdXRpb24uXG4gICAqIEBwYXJhbSBvdXRwdXROYW1lcyBPcHRpb25hbC4gb3V0cHV0IG5vZGUgbmFtZSBmcm9tIHRoZSBUZW5zb3JmbG93IG1vZGVsLFxuICAgKiBpZiBubyBvdXRwdXRzIGFyZSBzcGVjaWZpZWQsIHRoZSBkZWZhdWx0IG91dHB1dHMgb2YgdGhlIG1vZGVsIHdvdWxkIGJlXG4gICAqIHVzZWQuIFlvdSBjYW4gaW5zcGVjdCBpbnRlcm1lZGlhdGUgbm9kZXMgb2YgdGhlIG1vZGVsIGJ5IGFkZGluZyB0aGVtIHRvXG4gICAqIHRoZSBvdXRwdXRzIGFycmF5LlxuICAgKiBAcGFyYW0gaXNGdW5jdGlvbkV4ZWN1dGlvbiBGbGFnIGZvciBleGVjdXRpbmcgYSBmdW5jdGlvbi5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZXhlY3V0ZVdpdGhDb250cm9sRmxvdyhcbiAgICAgIGlucHV0czogTmFtZWRUZW5zb3JNYXAsIGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQsIG91dHB1dE5hbWVzPzogc3RyaW5nW10sXG4gICAgICBpc0Z1bmN0aW9uRXhlY3V0aW9uPzogYm9vbGVhbik6IFByb21pc2U8TmFtZWRUZW5zb3JzTWFwPiB7XG4gICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhpbnB1dHMpO1xuICAgIGNvbnN0IGlucHV0Tm9kZXMgPVxuICAgICAgICBuYW1lcy5tYXAobmFtZSA9PiB0aGlzLmdyYXBoLm5vZGVzW3BhcnNlTm9kZU5hbWUobmFtZSlbMF1dKTtcbiAgICBjb25zdCBvdXRwdXROb2RlTmFtZXMgPSBvdXRwdXROYW1lcy5tYXAobmFtZSA9PiBwYXJzZU5vZGVOYW1lKG5hbWUpWzBdKTtcbiAgICBjb25zdCBvdXRwdXROb2RlTmFtZVNldCA9IG5ldyBTZXQob3V0cHV0Tm9kZU5hbWVzKTtcbiAgICBsZXQgb3V0cHV0Tm9kZXMgPSBvdXRwdXROb2RlTmFtZXMubWFwKG5hbWUgPT4gdGhpcy5ncmFwaC5ub2Rlc1tuYW1lXSk7XG5cbiAgICAvLyBJZiBubyBvdXRwdXRzIGFyZSBzcGVjaWZpZWQsIHRoZW4gdXNlIHRoZSBkZWZhdWx0IG91dHB1dHMgb2YgdGhlIG1vZGVsLlxuICAgIGlmIChvdXRwdXROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIG91dHB1dE5vZGVzID0gdGhpcy5fb3V0cHV0cztcbiAgICB9XG5cbiAgICBjb25zdCB7dXNlZE5vZGVzLCBtaXNzaW5nSW5wdXRzLCBkeW5hbWljTm9kZSwgc3luY0lucHV0c30gPVxuICAgICAgICBnZXRFeGVjdXRpb25TdWJncmFwaChcbiAgICAgICAgICAgIGlucHV0cywgb3V0cHV0Tm9kZXMsIHRoaXMud2VpZ2h0TWFwLCB0aGlzLl9pbml0Tm9kZXMpO1xuXG4gICAgLy8gRmlyc3Qgbm9kZXMgdG8gZXhlY3V0ZSBpbmNsdWRlIGlucHV0Tm9kZXMsIHdlaWdodHMsIGFuZCBpbml0Tm9kZXMuXG4gICAgY29uc3Qgc3RhY2s6IE5vZGVXaXRoQ29udGV4dHNbXSA9IFtcbiAgICAgIC4uLmlucHV0Tm9kZXMsIC4uLnRoaXMuZ3JhcGgud2VpZ2h0cywgLi4uKHRoaXMuX2luaXROb2RlcyB8fCBbXSlcbiAgICBdLm1hcChub2RlID0+IHtcbiAgICAgIHJldHVybiB7bm9kZSwgY29udGV4dHM6IGNvbnRleHQuY3VycmVudENvbnRleHR9O1xuICAgIH0pO1xuICAgIGNvbnN0IHRlbnNvcnNNYXA6IE5hbWVkVGVuc29yc01hcCA9IHsuLi50aGlzLndlaWdodE1hcH07XG4gICAgT2JqZWN0LmtleXMoaW5wdXRzKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgY29uc3QgW25vZGVOYW1lLCBpbmRleF0gPSBwYXJzZU5vZGVOYW1lKG5hbWUpO1xuICAgICAgY29uc3QgdGVuc29yczogVGVuc29yW10gPSBbXTtcbiAgICAgIHRlbnNvcnNbaW5kZXhdID0gaW5wdXRzW25hbWVdO1xuICAgICAgdGVuc29yc01hcFtub2RlTmFtZV0gPSB0ZW5zb3JzO1xuICAgIH0pO1xuICAgIGNvbnN0IGludGVybWVkaWF0ZVRlbnNvckNvbnN1bWVyQ291bnQ6IHtba2V5OiBudW1iZXJdOiBudW1iZXJ9ID0ge307XG4gICAgY29uc3QgdGVuc29yc1RvS2VlcCA9IHRoaXMuZ2V0RnJvemVuVGVuc29ySWRzKHRlbnNvcnNNYXApO1xuICAgIGNvbnN0IGFkZGVkOiB7W2tleTogc3RyaW5nXTogYm9vbGVhbn0gPSB7fTtcbiAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgcHJvbWlzZXMgPSB0aGlzLnByb2Nlc3NTdGFjayhcbiAgICAgICAgICBpbnB1dE5vZGVzLCBzdGFjaywgY29udGV4dCwgdGVuc29yc01hcCwgYWRkZWQsIHRlbnNvcnNUb0tlZXAsXG4gICAgICAgICAgb3V0cHV0Tm9kZU5hbWVTZXQsIGludGVybWVkaWF0ZVRlbnNvckNvbnN1bWVyQ291bnQsIHVzZWROb2Rlcyk7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgfVxuICAgIGlmIChkeW5hbWljTm9kZSA9PSBudWxsICYmICFpc0Z1bmN0aW9uRXhlY3V0aW9uKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFRoaXMgbW9kZWwgZXhlY3V0aW9uIGRpZCBub3QgY29udGFpbiBhbnkgbm9kZXMgd2l0aCBjb250cm9sIGZsb3cgYCArXG4gICAgICAgICAgYG9yIGR5bmFtaWMgb3V0cHV0IHNoYXBlcy4gWW91IGNhbiB1c2UgbW9kZWwuZXhlY3V0ZSgpIGluc3RlYWQuYCk7XG4gICAgfVxuICAgIGNvbnN0IG1pc3NpbmdPdXRwdXRzID1cbiAgICAgICAgb3V0cHV0Tm9kZXNcbiAgICAgICAgICAgIC5maWx0ZXIoXG4gICAgICAgICAgICAgICAgbm9kZSA9PiAhaXNDb250cm9sRmxvdyhub2RlKSAmJlxuICAgICAgICAgICAgICAgICAgICAhZ2V0VGVuc29yKG5vZGUubmFtZSwgdGVuc29yc01hcCwgY29udGV4dCkpXG4gICAgICAgICAgICAubWFwKG5vZGUgPT4gbm9kZS5uYW1lKTtcbiAgICBpZiAobWlzc2luZ091dHB1dHMubGVuZ3RoID4gMCkge1xuICAgICAgbGV0IGFsdGVybmF0aXZlTXNnID0gJyc7XG4gICAgICBpZiAoZHluYW1pY05vZGUgIT0gbnVsbCkge1xuICAgICAgICBhbHRlcm5hdGl2ZU1zZyA9XG4gICAgICAgICAgICBgQWx0ZXJuYXRpdmVseSwgdG8gYXZvaWQgdGhlIGR5bmFtaWMgb3BzLCB1c2UgbW9kZWwuZXhlY3V0ZSgpIGAgK1xuICAgICAgICAgICAgYGFuZCBzcGVjaWZ5IHRoZSBpbnB1dHMgWyR7c3luY0lucHV0c31dYDtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ2Fubm90IGNvbXB1dGUgdGhlIG91dHB1dHMgWyR7bWlzc2luZ091dHB1dHN9XSBmcm9tIHRoZSBwcm92aWRlZCBgICtcbiAgICAgICAgICBgaW5wdXRzIFske25hbWVzfV0uIENvbnNpZGVyIHByb3ZpZGluZyB0aGUgZm9sbG93aW5nIGlucHV0czogYCArXG4gICAgICAgICAgYFske21pc3NpbmdJbnB1dHN9XS4gJHthbHRlcm5hdGl2ZU1zZ31gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRlbnNvcnNNYXA7XG4gIH1cblxuICBwcml2YXRlIHByb2Nlc3NTdGFjayhcbiAgICAgIGlucHV0Tm9kZXM6IE5vZGVbXSwgc3RhY2s6IE5vZGVXaXRoQ29udGV4dHNbXSwgY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCxcbiAgICAgIHRlbnNvck1hcDogTmFtZWRUZW5zb3JzTWFwLCBhZGRlZDoge1trZXk6IHN0cmluZ106IGJvb2xlYW59LFxuICAgICAgdGVuc29yc1RvS2VlcDogU2V0PG51bWJlcj4sIG91dHB1dE5vZGVOYW1lU2V0OiBTZXQ8c3RyaW5nPixcbiAgICAgIGludGVybWVkaWF0ZVRlbnNvckNvbnN1bWVyQ291bnQ6IHtba2V5OiBudW1iZXJdOiBudW1iZXJ9LFxuICAgICAgdXNlZE5vZGVzOiBTZXQ8c3RyaW5nPikge1xuICAgIGNvbnN0IHByb21pc2VzOiBBcnJheTxQcm9taXNlPFRlbnNvcltdPj4gPSBbXTtcbiAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgaXRlbSA9IHN0YWNrLnBvcCgpO1xuICAgICAgY29udGV4dC5jdXJyZW50Q29udGV4dCA9IGl0ZW0uY29udGV4dHM7XG4gICAgICBsZXQgbm9kZU5hbWUgPSAnJztcbiAgICAgIC8vIFRoZSB0ZW5zb3Igb2YgdGhlIEVudGVyIG9wIHdpdGggaXNDb25zdGFudCBzZXQgc2hvdWxkIGJlIHNldFxuICAgICAgLy8gaW4gdGhlIHBhcmVudCBzY29wZSwgc28gaXQgd2lsbCBiZSBhdmFpbGFibGUgYXMgY29uc3RhbnQgZm9yIHRoZVxuICAgICAgLy8gd2hvbGUgbG9vcC5cbiAgICAgIGlmIChpdGVtLm5vZGUub3AgPT09ICdFbnRlcicgJiZcbiAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpc0NvbnN0YW50JywgaXRlbS5ub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpKSB7XG4gICAgICAgIFtub2RlTmFtZV0gPSBnZXROb2RlTmFtZUFuZEluZGV4KGl0ZW0ubm9kZS5uYW1lLCBjb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgLy8gb25seSBwcm9jZXNzIG5vZGVzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdGVuc29yTWFwIHlldCwgdGhpcyBpbmNsdWRlXG4gICAgICAvLyBpbnB1dE5vZGVzIGFuZCBpbnRlcm5hbCBpbml0Tm9kZXMuXG4gICAgICBpZiAodGVuc29yTWFwW2l0ZW0ubm9kZS5uYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHRlbnNvcnMgPVxuICAgICAgICAgICAgZXhlY3V0ZU9wKGl0ZW0ubm9kZSwgdGVuc29yTWFwLCBjb250ZXh0LCB0aGlzLl9yZXNvdXJjZU1hbmFnZXIpO1xuICAgICAgICBpZiAoIW5vZGVOYW1lKSB7XG4gICAgICAgICAgW25vZGVOYW1lXSA9IGdldE5vZGVOYW1lQW5kSW5kZXgoaXRlbS5ub2RlLm5hbWUsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN1cnJlbnRDb250ZXh0ID0gY29udGV4dC5jdXJyZW50Q29udGV4dDtcbiAgICAgICAgaWYgKHV0aWwuaXNQcm9taXNlKHRlbnNvcnMpKSB7XG4gICAgICAgICAgcHJvbWlzZXMucHVzaCh0ZW5zb3JzLnRoZW4odCA9PiB7XG4gICAgICAgICAgICB0ZW5zb3JNYXBbbm9kZU5hbWVdID0gdDtcbiAgICAgICAgICAgIGlmICh0aGlzLmtlZXBJbnRlcm1lZGlhdGVUZW5zb3JzKSB7XG4gICAgICAgICAgICAgIHRoaXMuY2xvbmVkVGVuc29yc01hcFtub2RlTmFtZV0gPSB0aGlzLmNsb25lVGVuc29yTGlzdCh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQuY3VycmVudENvbnRleHQgPSBjdXJyZW50Q29udGV4dDtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tUZW5zb3JGb3JEaXNwb3NhbChcbiAgICAgICAgICAgICAgICBub2RlTmFtZSwgaXRlbS5ub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQsIHRlbnNvcnNUb0tlZXAsXG4gICAgICAgICAgICAgICAgb3V0cHV0Tm9kZU5hbWVTZXQsIGludGVybWVkaWF0ZVRlbnNvckNvbnN1bWVyQ291bnQpO1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzQ2hpbGROb2RlcyhcbiAgICAgICAgICAgICAgICBpdGVtLm5vZGUsIHN0YWNrLCBjb250ZXh0LCB0ZW5zb3JNYXAsIGFkZGVkLCB1c2VkTm9kZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRlbnNvck1hcFtub2RlTmFtZV0gPSB0ZW5zb3JzO1xuICAgICAgICAgIGlmICh0aGlzLmtlZXBJbnRlcm1lZGlhdGVUZW5zb3JzKSB7XG4gICAgICAgICAgICB0aGlzLmNsb25lZFRlbnNvcnNNYXBbbm9kZU5hbWVdID0gdGhpcy5jbG9uZVRlbnNvckxpc3QodGVuc29ycyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuY2hlY2tUZW5zb3JGb3JEaXNwb3NhbChcbiAgICAgICAgICAgICAgbm9kZU5hbWUsIGl0ZW0ubm9kZSwgdGVuc29yTWFwLCBjb250ZXh0LCB0ZW5zb3JzVG9LZWVwLFxuICAgICAgICAgICAgICBvdXRwdXROb2RlTmFtZVNldCwgaW50ZXJtZWRpYXRlVGVuc29yQ29uc3VtZXJDb3VudCk7XG4gICAgICAgICAgdGhpcy5wcm9jZXNzQ2hpbGROb2RlcyhcbiAgICAgICAgICAgICAgaXRlbS5ub2RlLCBzdGFjaywgY29udGV4dCwgdGVuc29yTWFwLCBhZGRlZCwgdXNlZE5vZGVzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzQ2hpbGROb2RlcyhcbiAgICAgICAgICAgIGl0ZW0ubm9kZSwgc3RhY2ssIGNvbnRleHQsIHRlbnNvck1hcCwgYWRkZWQsIHVzZWROb2Rlcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlcztcbiAgfVxuXG4gIHByaXZhdGUgcHJvY2Vzc0NoaWxkTm9kZXMoXG4gICAgICBub2RlOiBOb2RlLCBzdGFjazogTm9kZVdpdGhDb250ZXh0c1tdLCBjb250ZXh0OiBFeGVjdXRpb25Db250ZXh0LFxuICAgICAgdGVuc29yTWFwOiBOYW1lZFRlbnNvcnNNYXAsIGFkZGVkOiB7W2tleTogc3RyaW5nXTogYm9vbGVhbn0sXG4gICAgICB1c2VkTm9kZXM6IFNldDxzdHJpbmc+KSB7XG4gICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZE5vZGUpID0+IHtcbiAgICAgIGNvbnN0IFtub2RlTmFtZSwgXSA9IGdldE5vZGVOYW1lQW5kSW5kZXgoY2hpbGROb2RlLm5hbWUsIGNvbnRleHQpO1xuICAgICAgaWYgKGFkZGVkW25vZGVOYW1lXSB8fCAhdXNlZE5vZGVzLmhhcyhjaGlsZE5vZGUubmFtZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gTWVyZ2Ugb3AgY2FuIGJlIHB1c2hlZCBpZiBhbnkgb2YgaXRzIGlucHV0cyBoYXMgdmFsdWUuXG4gICAgICBpZiAoY2hpbGROb2RlLm9wID09PSAnTWVyZ2UnKSB7XG4gICAgICAgIGlmIChjaGlsZE5vZGUuaW5wdXROYW1lcy5zb21lKG5hbWUgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gISFnZXRUZW5zb3IobmFtZSwgdGVuc29yTWFwLCBjb250ZXh0KTtcbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgYWRkZWRbbm9kZU5hbWVdID0gdHJ1ZTtcbiAgICAgICAgICBzdGFjay5wdXNoKHtjb250ZXh0czogY29udGV4dC5jdXJyZW50Q29udGV4dCwgbm9kZTogY2hpbGROb2RlfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSAgLy8gT3RoZXJ3aXNlIGFsbCBpbnB1dHMgbXVzdCB0byBoYXZlIHZhbHVlLlxuICAgICAgICAgIGlmIChjaGlsZE5vZGUuaW5wdXROYW1lcy5ldmVyeShuYW1lID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFnZXRUZW5zb3IobmFtZSwgdGVuc29yTWFwLCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgYWRkZWRbbm9kZU5hbWVdID0gdHJ1ZTtcbiAgICAgICAgc3RhY2sucHVzaCh7Y29udGV4dHM6IGNvbnRleHQuY3VycmVudENvbnRleHQsIG5vZGU6IGNoaWxkTm9kZX0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIHRoZSBtZW1vcnkgdXNlZCBieSB0aGUgd2VpZ2h0IHRlbnNvcnMuXG4gICAqL1xuICBkaXNwb3NlKCkge1xuICAgIE9iamVjdC5rZXlzKHRoaXMud2VpZ2h0TWFwKVxuICAgICAgICAuZm9yRWFjaChcbiAgICAgICAgICAgIGtleSA9PiB0aGlzLndlaWdodE1hcFtrZXldLmZvckVhY2godGVuc29yID0+IHRlbnNvci5kaXNwb3NlKCkpKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tJbnB1dFNoYXBlQW5kVHlwZShpbnB1dHM6IE5hbWVkVGVuc29yTWFwKSB7XG4gICAgT2JqZWN0LmtleXMoaW5wdXRzKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSBpbnB1dHNbbmFtZV07XG4gICAgICBjb25zdCBbbm9kZU5hbWUsIF0gPSBwYXJzZU5vZGVOYW1lKG5hbWUpO1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZ3JhcGgubm9kZXNbbm9kZU5hbWVdO1xuICAgICAgaWYgKG5vZGUuYXR0clBhcmFtc1snc2hhcGUnXSAmJiBub2RlLmF0dHJQYXJhbXNbJ3NoYXBlJ10udmFsdWUpIHtcbiAgICAgICAgY29uc3Qgc2hhcGUgPSBub2RlLmF0dHJQYXJhbXNbJ3NoYXBlJ10udmFsdWUgYXMgbnVtYmVyW107XG4gICAgICAgIGNvbnN0IG1hdGNoID0gc2hhcGUubGVuZ3RoID09PSBpbnB1dC5zaGFwZS5sZW5ndGggJiZcbiAgICAgICAgICAgIGlucHV0LnNoYXBlLmV2ZXJ5KFxuICAgICAgICAgICAgICAgIChkaW0sIGluZGV4KSA9PiBzaGFwZVtpbmRleF0gPT09IC0xIHx8IHNoYXBlW2luZGV4XSA9PT0gZGltKTtcbiAgICAgICAgdXRpbC5hc3NlcnQoXG4gICAgICAgICAgICBtYXRjaCxcbiAgICAgICAgICAgICgpID0+IGBUaGUgc2hhcGUgb2YgZGljdFsnJHtub2RlLm5hbWV9J10gcHJvdmlkZWQgaW4gYCArXG4gICAgICAgICAgICAgICAgYG1vZGVsLmV4ZWN1dGUoZGljdCkgbXVzdCBiZSBbJHtzaGFwZX1dLCBidXQgd2FzIGAgK1xuICAgICAgICAgICAgICAgIGBbJHtpbnB1dC5zaGFwZX1dYCk7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5hdHRyUGFyYW1zWydkdHlwZSddICYmIG5vZGUuYXR0clBhcmFtc1snZHR5cGUnXS52YWx1ZSkge1xuICAgICAgICB1dGlsLmFzc2VydChcbiAgICAgICAgICAgIGlucHV0LmR0eXBlID09PSBub2RlLmF0dHJQYXJhbXNbJ2R0eXBlJ10udmFsdWUgYXMgc3RyaW5nLFxuICAgICAgICAgICAgKCkgPT4gYFRoZSBkdHlwZSBvZiBkaWN0Wycke25vZGUubmFtZX0nXSBwcm92aWRlZCBpbiBgICtcbiAgICAgICAgICAgICAgICBgbW9kZWwuZXhlY3V0ZShkaWN0KSBtdXN0IGJlIGAgK1xuICAgICAgICAgICAgICAgIGAke25vZGUuYXR0clBhcmFtc1snZHR5cGUnXS52YWx1ZX0sIGJ1dCB3YXMgJHtpbnB1dC5kdHlwZX1gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgbWFwSW5wdXRzKGlucHV0czogTmFtZWRUZW5zb3JNYXApIHtcbiAgICBjb25zdCByZXN1bHQ6IE5hbWVkVGVuc29yTWFwID0ge307XG4gICAgZm9yIChjb25zdCBpbnB1dE5hbWUgaW4gaW5wdXRzKSB7XG4gICAgICBjb25zdCB0ZW5zb3IgPSB0aGlzLl9zaWduYXR1cmUgPy5pbnB1dHMgPy5baW5wdXROYW1lXTtcbiAgICAgIGlmICh0ZW5zb3IgIT0gbnVsbCkge1xuICAgICAgICByZXN1bHRbdGVuc29yLm5hbWVdID0gaW5wdXRzW2lucHV0TmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbaW5wdXROYW1lXSA9IGlucHV0c1tpbnB1dE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0lucHV0cyhpbnB1dHM6IE5hbWVkVGVuc29yTWFwKSB7XG4gICAgY29uc3Qgbm90SW5HcmFwaCA9IE9iamVjdC5rZXlzKGlucHV0cykuZmlsdGVyKG5hbWUgPT4ge1xuICAgICAgY29uc3QgW25vZGVOYW1lXSA9IHBhcnNlTm9kZU5hbWUobmFtZSk7XG4gICAgICByZXR1cm4gdGhpcy5ncmFwaC5ub2Rlc1tub2RlTmFtZV0gPT0gbnVsbDtcbiAgICB9KTtcbiAgICBpZiAobm90SW5HcmFwaC5sZW5ndGggPiAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFRoZSBkaWN0IHByb3ZpZGVkIGluIG1vZGVsLmV4ZWN1dGUoZGljdCkgaGFzIGAgK1xuICAgICAgICAgIGBrZXlzOiBbJHtub3RJbkdyYXBofV0gdGhhdCBhcmUgbm90IHBhcnQgb2YgZ3JhcGhgKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG1hcE91dHB1dHMob3V0cHV0czogc3RyaW5nW10pIHtcbiAgICByZXR1cm4gb3V0cHV0cy5tYXAobmFtZSA9PiB7XG4gICAgICBjb25zdCB0ZW5zb3IgPSB0aGlzLl9zaWduYXR1cmUgPy5vdXRwdXRzID8uW25hbWVdO1xuICAgICAgaWYgKHRlbnNvciAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0ZW5zb3IubmFtZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tPdXRwdXRzKG91dHB1dHM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgb3V0cHV0cy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgY29uc3QgW25vcm1hbGl6ZWROYW1lXSA9IHBhcnNlTm9kZU5hbWUobmFtZSk7XG4gICAgICBpZiAoIXRoaXMuZ3JhcGgubm9kZXNbbm9ybWFsaXplZE5hbWVdKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIG91dHB1dCAnJHtuYW1lfScgaXMgbm90IGZvdW5kIGluIHRoZSBncmFwaGApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=","/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n    constructor(hashTableNameToHandle = {}, hashTableMap = {}) {\n        this.hashTableNameToHandle = hashTableNameToHandle;\n        this.hashTableMap = hashTableMap;\n    }\n    /**\n     * Register a `HashTable` in the resource manager.\n     *\n     * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n     * where id is the table handle tensor's id.\n     *\n     * @param name Op node name that creates the `HashTable`.\n     * @param hashTable The `HashTable` to be added to resource manager.\n     */\n    addHashTable(name, hashTable) {\n        this.hashTableNameToHandle[name] = hashTable.handle;\n        this.hashTableMap[hashTable.id] = hashTable;\n    }\n    /**\n     * Get the table handle by node name.\n     * @param name Op node name that creates the `HashTable`. This name is also\n     *     used in the inputs list of lookup and import `HashTable` ops.\n     */\n    getHashTableHandleByName(name) {\n        return this.hashTableNameToHandle[name];\n    }\n    /**\n     * Get the actual `HashTable` by its handle tensor's id.\n     * @param id The id of the handle tensor.\n     */\n    getHashTableById(id) {\n        return this.hashTableMap[id];\n    }\n    /**\n     * Dispose `ResourceManager`, including its hashTables and tensors in them.\n     */\n    dispose() {\n        for (const key in this.hashTableMap) {\n            this.hashTableMap[key].clearAndClose();\n            delete this.hashTableMap[key];\n        }\n        for (const name in this.hashTableNameToHandle) {\n            this.hashTableNameToHandle[name].dispose();\n            delete this.hashTableNameToHandle[name];\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VfbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9leGVjdXRvci9yZXNvdXJjZV9tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1CQTs7R0FFRztBQUNILE1BQU0sT0FBTyxlQUFlO0lBQzFCLFlBQ2Esd0JBQXdDLEVBQUUsRUFDMUMsZUFBNkIsRUFBRTtRQUQvQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXFCO1FBQzFDLGlCQUFZLEdBQVosWUFBWSxDQUFtQjtJQUFHLENBQUM7SUFFaEQ7Ozs7Ozs7O09BUUc7SUFDSCxZQUFZLENBQUMsSUFBWSxFQUFFLFNBQW9CO1FBQzdDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQ3BELElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHdCQUF3QixDQUFDLElBQVk7UUFDbkMsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7T0FHRztJQUNILGdCQUFnQixDQUFDLEVBQVU7UUFDekIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU87UUFDTCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN2QyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDL0I7UUFFRCxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtZQUM3QyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDM0MsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5pbXBvcnQge0hhc2hUYWJsZU1hcCwgTmFtZWRUZW5zb3JNYXB9IGZyb20gJy4uL2RhdGEvdHlwZXMnO1xuaW1wb3J0IHtIYXNoVGFibGV9IGZyb20gJy4vaGFzaF90YWJsZSc7XG5cbi8qKlxuICogQ29udGFpbnMgZ2xvYmFsIHJlc291cmNlcyBvZiBhIG1vZGVsLlxuICovXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgICByZWFkb25seSBoYXNoVGFibGVOYW1lVG9IYW5kbGU6IE5hbWVkVGVuc29yTWFwID0ge30sXG4gICAgICByZWFkb25seSBoYXNoVGFibGVNYXA6IEhhc2hUYWJsZU1hcCA9IHt9KSB7fVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGBIYXNoVGFibGVgIGluIHRoZSByZXNvdXJjZSBtYW5hZ2VyLlxuICAgKlxuICAgKiBUaGUgYEhhc2hUYWJsZWAgY2FuIGJlIHJldHJpZXZlZCBieSBgcmVzb3VyY2VNYW5hZ2VyLmdldEhhc2hUYWJsZUJ5SWRgLFxuICAgKiB3aGVyZSBpZCBpcyB0aGUgdGFibGUgaGFuZGxlIHRlbnNvcidzIGlkLlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSBPcCBub2RlIG5hbWUgdGhhdCBjcmVhdGVzIHRoZSBgSGFzaFRhYmxlYC5cbiAgICogQHBhcmFtIGhhc2hUYWJsZSBUaGUgYEhhc2hUYWJsZWAgdG8gYmUgYWRkZWQgdG8gcmVzb3VyY2UgbWFuYWdlci5cbiAgICovXG4gIGFkZEhhc2hUYWJsZShuYW1lOiBzdHJpbmcsIGhhc2hUYWJsZTogSGFzaFRhYmxlKSB7XG4gICAgdGhpcy5oYXNoVGFibGVOYW1lVG9IYW5kbGVbbmFtZV0gPSBoYXNoVGFibGUuaGFuZGxlO1xuICAgIHRoaXMuaGFzaFRhYmxlTWFwW2hhc2hUYWJsZS5pZF0gPSBoYXNoVGFibGU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB0YWJsZSBoYW5kbGUgYnkgbm9kZSBuYW1lLlxuICAgKiBAcGFyYW0gbmFtZSBPcCBub2RlIG5hbWUgdGhhdCBjcmVhdGVzIHRoZSBgSGFzaFRhYmxlYC4gVGhpcyBuYW1lIGlzIGFsc29cbiAgICogICAgIHVzZWQgaW4gdGhlIGlucHV0cyBsaXN0IG9mIGxvb2t1cCBhbmQgaW1wb3J0IGBIYXNoVGFibGVgIG9wcy5cbiAgICovXG4gIGdldEhhc2hUYWJsZUhhbmRsZUJ5TmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNoVGFibGVOYW1lVG9IYW5kbGVbbmFtZV07XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBhY3R1YWwgYEhhc2hUYWJsZWAgYnkgaXRzIGhhbmRsZSB0ZW5zb3IncyBpZC5cbiAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgaGFuZGxlIHRlbnNvci5cbiAgICovXG4gIGdldEhhc2hUYWJsZUJ5SWQoaWQ6IG51bWJlcik6IEhhc2hUYWJsZSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzaFRhYmxlTWFwW2lkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwb3NlIGBSZXNvdXJjZU1hbmFnZXJgLCBpbmNsdWRpbmcgaXRzIGhhc2hUYWJsZXMgYW5kIHRlbnNvcnMgaW4gdGhlbS5cbiAgICovXG4gIGRpc3Bvc2UoKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5oYXNoVGFibGVNYXApIHtcbiAgICAgIHRoaXMuaGFzaFRhYmxlTWFwW2tleV0uY2xlYXJBbmRDbG9zZSgpO1xuICAgICAgZGVsZXRlIHRoaXMuaGFzaFRhYmxlTWFwW2tleV07XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBuYW1lIGluIHRoaXMuaGFzaFRhYmxlTmFtZVRvSGFuZGxlKSB7XG4gICAgICB0aGlzLmhhc2hUYWJsZU5hbWVUb0hhbmRsZVtuYW1lXS5kaXNwb3NlKCk7XG4gICAgICBkZWxldGUgdGhpcy5oYXNoVGFibGVOYW1lVG9IYW5kbGVbbmFtZV07XG4gICAgfVxuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { dispose, io, Tensor, util } from '@tensorflow/tfjs-core';\nimport { OperationMapper } from '../operations/operation_mapper';\nimport { GraphExecutor } from './graph_executor';\nimport { ResourceManager } from './resource_manager';\n// tslint:disable-next-line: no-imports-from-dist\nimport { decodeWeightsStream } from '@tensorflow/tfjs-core/dist/io/io_utils';\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel {\n    // Returns the version information for the tensorflow model GraphDef.\n    get modelVersion() {\n        return this.version;\n    }\n    get inputNodes() {\n        return this.executor.inputNodes;\n    }\n    get outputNodes() {\n        return this.executor.outputNodes;\n    }\n    get inputs() {\n        return this.executor.inputs;\n    }\n    get outputs() {\n        return this.executor.outputs;\n    }\n    get weights() {\n        return this.executor.weightMap;\n    }\n    get metadata() {\n        return this.artifacts.userDefinedMetadata;\n    }\n    get modelSignature() {\n        return this.signature;\n    }\n    get modelStructuredOutputKeys() {\n        return this.structuredOutputKeys;\n    }\n    /**\n     * @param modelUrl url for the model, or an `io.IOHandler`.\n     * @param weightManifestUrl url for the weight file generated by\n     * scripts/convert.py script.\n     * @param requestOption options for Request, which allows to send credentials\n     * and custom headers.\n     * @param onProgress Optional, progress callback function, fired periodically\n     * before the load is completed.\n     */\n    constructor(modelUrl, loadOptions = {}, tfio = io) {\n        this.modelUrl = modelUrl;\n        this.loadOptions = loadOptions;\n        this.version = 'n/a';\n        this.io = tfio;\n        if (loadOptions == null) {\n            this.loadOptions = {};\n        }\n        this.resourceManager = new ResourceManager();\n    }\n    findIOHandler() {\n        const path = this.modelUrl;\n        if (path.load != null) {\n            // Path is an IO Handler.\n            this.handler = path;\n        }\n        else if (this.loadOptions.requestInit != null) {\n            this.handler = this.io.browserHTTPRequest(path, this.loadOptions);\n        }\n        else {\n            const handlers = this.io.getLoadHandlers(path, this.loadOptions);\n            if (handlers.length === 0) {\n                // For backward compatibility: if no load handler can be found,\n                // assume it is a relative http path.\n                handlers.push(this.io.browserHTTPRequest(path, this.loadOptions));\n            }\n            else if (handlers.length > 1) {\n                throw new Error(`Found more than one (${handlers.length}) load handlers for ` +\n                    `URL '${[path]}'`);\n            }\n            this.handler = handlers[0];\n        }\n    }\n    /**\n     * Loads the model and weight files, construct the in memory weight map and\n     * compile the inference graph.\n     */\n    load() {\n        this.findIOHandler();\n        if (this.handler.load == null) {\n            throw new Error('Cannot proceed with model loading because the IOHandler provided ' +\n                'does not have the `load` method implemented.');\n        }\n        const loadResult = this.handler.load();\n        if (util.isPromise(loadResult)) {\n            return loadResult.then(artifacts => {\n                if (artifacts.getWeightStream == null) {\n                    return this.loadSync(artifacts);\n                }\n                return this.loadStreaming(artifacts);\n            });\n        }\n        return this.loadSync(loadResult);\n    }\n    /**\n     * Synchronously construct the in memory weight map and\n     * compile the inference graph.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n    loadSync(artifacts) {\n        const weightMap = this.io.decodeWeights(artifacts.weightData, artifacts.weightSpecs);\n        return this.loadWithWeightMap(artifacts, weightMap);\n    }\n    async loadStreaming(artifacts) {\n        if (artifacts.getWeightStream == null) {\n            throw new Error('Model artifacts missing streamWeights function');\n        }\n        const weightMap = await decodeWeightsStream(artifacts.getWeightStream(), artifacts.weightSpecs);\n        return this.loadWithWeightMap(artifacts, weightMap);\n    }\n    loadWithWeightMap(artifacts, weightMap) {\n        this.artifacts = artifacts;\n        const graph = this.artifacts.modelTopology;\n        let signature = this.artifacts.signature;\n        if (this.artifacts.userDefinedMetadata != null) {\n            const metadata = this.artifacts.userDefinedMetadata;\n            if (metadata.signature != null) {\n                signature = metadata.signature;\n            }\n            if (metadata.structuredOutputKeys != null) {\n                this.structuredOutputKeys = metadata.structuredOutputKeys;\n            }\n        }\n        this.signature = signature;\n        this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n        this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(graph, this.signature));\n        this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n        // Attach a model-level resourceManager to each executor to share resources,\n        // such as `HashTable`.\n        this.executor.resourceManager = this.resourceManager;\n        if (artifacts.modelInitializer != null &&\n            artifacts.modelInitializer.node != null) {\n            const initializer = OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n            this.initializer = new GraphExecutor(initializer);\n            this.initializer.weightMap = this.executor.weightMap;\n            // Attach a model-level resourceManager to the initializer, the\n            // hashTables created from when executing the initializer will be stored\n            // in the resourceManager.\n            this.initializer.resourceManager = this.resourceManager;\n            this.initializerSignature = artifacts.initializerSignature;\n        }\n        return true;\n    }\n    /**\n     * Save the configuration and/or weights of the GraphModel.\n     *\n     * An `IOHandler` is an object that has a `save` method of the proper\n     * signature defined. The `save` method manages the storing or\n     * transmission of serialized data (\"artifacts\") that represent the\n     * model's topology and weights onto or via a specific medium, such as\n     * file downloads, local storage, IndexedDB in the web browser and HTTP\n     * requests to a server. TensorFlow.js provides `IOHandler`\n     * implementations for a number of frequently used saving mediums, such as\n     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n     * for more details.\n     *\n     * This method also allows you to refer to certain types of `IOHandler`s\n     * as URL-like string shortcuts, such as 'localstorage://' and\n     * 'indexeddb://'.\n     *\n     * Example 1: Save `model`'s topology and weights to browser [local\n     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n     * then load it back.\n     *\n     * ```js\n     * const modelUrl =\n     *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n     * const model = await tf.loadGraphModel(modelUrl);\n     * const zeros = tf.zeros([1, 224, 224, 3]);\n     * model.predict(zeros).print();\n     *\n     * const saveResults = await model.save('localstorage://my-model-1');\n     *\n     * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n     * console.log('Prediction from loaded model:');\n     * model.predict(zeros).print();\n     * ```\n     *\n     * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n     * scheme-based string shortcut for `IOHandler`.\n     * @param config Options for saving the model.\n     * @returns A `Promise` of `SaveResult`, which summarizes the result of\n     * the saving, such as byte sizes of the saved artifacts for the model's\n     *   topology and weight values.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n    async save(handlerOrURL, config) {\n        if (typeof handlerOrURL === 'string') {\n            const handlers = this.io.getSaveHandlers(handlerOrURL);\n            if (handlers.length === 0) {\n                throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n            }\n            else if (handlers.length > 1) {\n                throw new Error(`Found more than one (${handlers.length}) save handlers for ` +\n                    `URL '${handlerOrURL}'`);\n            }\n            handlerOrURL = handlers[0];\n        }\n        if (handlerOrURL.save == null) {\n            throw new Error('GraphModel.save() cannot proceed because the IOHandler ' +\n                'provided does not have the `save` attribute defined.');\n        }\n        return handlerOrURL.save(this.artifacts);\n    }\n    addStructuredOutputNames(outputTensors) {\n        if (this.structuredOutputKeys) {\n            const outputTensorsArray = outputTensors instanceof Tensor ? [outputTensors] : outputTensors;\n            const outputTensorMap = {};\n            outputTensorsArray.forEach((outputTensor, i) => outputTensorMap[this.structuredOutputKeys[i]] =\n                outputTensor);\n            return outputTensorMap;\n        }\n        return outputTensors;\n    }\n    /**\n     * Execute the inference for the input tensors.\n     *\n     * @param input The input tensors, when there is single input for the model,\n     * inputs param should be a `tf.Tensor`. For models with multiple inputs,\n     * inputs params should be in either `tf.Tensor`[] if the input order is\n     * fixed, or otherwise NamedTensorMap format.\n     *\n     * For model with multiple inputs, we recommend you use NamedTensorMap as the\n     * input type, if you use `tf.Tensor`[], the order of the array needs to\n     * follow the\n     * order of inputNodes array. @see {@link GraphModel.inputNodes}\n     *\n     * You can also feed any intermediate nodes using the NamedTensorMap as the\n     * input type. For example, given the graph\n     *    InputNode => Intermediate => OutputNode,\n     * you can execute the subgraph Intermediate => OutputNode by calling\n     *    model.execute('IntermediateNode' : tf.tensor(...));\n     *\n     * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n     * state needs to be fed manually.\n     *\n     * For batch inference execution, the tensors for each input need to be\n     * concatenated together. For example with mobilenet, the required input shape\n     * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n     * If we are provide a batched data of 100 images, the input tensor should be\n     * in the shape of [100, 244, 244, 3].\n     *\n     * @param config Prediction configuration for specifying the batch size.\n     * Currently the batch size option is ignored for graph model.\n     *\n     * @returns Inference result tensors. If the model is converted and it\n     * originally had structured_outputs in tensorflow, then a NamedTensorMap\n     * will be returned matching the structured_outputs. If no structured_outputs\n     * are present, the output will be single `tf.Tensor` if the model has single\n     * output node, otherwise Tensor[].\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    predict(inputs, config) {\n        const outputTensors = this.execute(inputs, this.outputNodes);\n        return this.addStructuredOutputNames(outputTensors);\n    }\n    /**\n     * Execute the inference for the input tensors in async fashion, use this\n     * method when your model contains control flow ops.\n     *\n     * @param input The input tensors, when there is single input for the model,\n     * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n     * inputs params should be in either `tf.Tensor`[] if the input order is\n     * fixed, or otherwise NamedTensorMap format.\n     *\n     * For model with multiple inputs, we recommend you use NamedTensorMap as the\n     * input type, if you use `tf.Tensor`[], the order of the array needs to\n     * follow the\n     * order of inputNodes array. @see {@link GraphModel.inputNodes}\n     *\n     * You can also feed any intermediate nodes using the NamedTensorMap as the\n     * input type. For example, given the graph\n     *    InputNode => Intermediate => OutputNode,\n     * you can execute the subgraph Intermediate => OutputNode by calling\n     *    model.execute('IntermediateNode' : tf.tensor(...));\n     *\n     * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n     * state needs to be fed manually.\n     *\n     * For batch inference execution, the tensors for each input need to be\n     * concatenated together. For example with mobilenet, the required input shape\n     * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n     * If we are provide a batched data of 100 images, the input tensor should be\n     * in the shape of [100, 244, 244, 3].\n     *\n     * @param config Prediction configuration for specifying the batch size.\n     * Currently the batch size option is ignored for graph model.\n     *\n     * @returns A Promise of inference result tensors. If the model is converted\n     * and it originally had structured_outputs in tensorflow, then a\n     * NamedTensorMap will be returned matching the structured_outputs. If no\n     * structured_outputs are present, the output will be single `tf.Tensor` if\n     * the model has single output node, otherwise Tensor[].\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async predictAsync(inputs, config) {\n        const outputTensors = await this.executeAsync(inputs, this.outputNodes);\n        return this.addStructuredOutputNames(outputTensors);\n    }\n    normalizeInputs(inputs) {\n        var _a;\n        if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n            // The input is already a NamedTensorMap.\n            const signatureInputs = (_a = this.signature) === null || _a === void 0 ? void 0 : _a.inputs;\n            if (signatureInputs != null) {\n                for (const input in signatureInputs) {\n                    const tensor = signatureInputs[input];\n                    if (tensor.resourceId != null) {\n                        inputs[input] = this.resourceIdToCapturedInput[tensor.resourceId];\n                    }\n                }\n            }\n            return inputs;\n        }\n        inputs = Array.isArray(inputs) ? inputs : [inputs];\n        const numCapturedInputs = Object.keys(this.resourceIdToCapturedInput).length;\n        if (inputs.length + numCapturedInputs !== this.inputNodes.length) {\n            throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length -\n                numCapturedInputs} non-resource placeholders, while there are ${inputs.length} input tensors provided.`);\n        }\n        let inputIndex = 0;\n        return this.inputNodes.reduce((map, inputName) => {\n            var _a, _b, _c;\n            const resourceId = (_c = (_b = (_a = this.signature) === null || _a === void 0 ? void 0 : _a.inputs) === null || _b === void 0 ? void 0 : _b[inputName]) === null || _c === void 0 ? void 0 : _c.resourceId;\n            if (resourceId != null) {\n                map[inputName] = this.resourceIdToCapturedInput[resourceId];\n            }\n            else {\n                map[inputName] = inputs[inputIndex++];\n            }\n            return map;\n        }, {});\n    }\n    normalizeOutputs(outputs) {\n        outputs = outputs || this.outputNodes;\n        return !Array.isArray(outputs) ? [outputs] : outputs;\n    }\n    executeInitializerGraph() {\n        if (this.initializer == null) {\n            return [];\n        }\n        if (this.initializerSignature == null) {\n            return this.initializer.execute({}, []);\n        }\n        else {\n            return this.initializer.execute({}, Object.keys(this.initializerSignature.outputs));\n        }\n    }\n    async executeInitializerGraphAsync() {\n        if (this.initializer == null) {\n            return [];\n        }\n        if (this.initializerSignature == null) {\n            return this.initializer.executeAsync({}, []);\n        }\n        else {\n            return this.initializer.executeAsync({}, Object.keys(this.initializerSignature.outputs));\n        }\n    }\n    setResourceIdToCapturedInput(outputs) {\n        this.resourceIdToCapturedInput = {};\n        if (this.initializerSignature) {\n            const signatureOutputs = this.initializerSignature.outputs;\n            const outputNames = Object.keys(signatureOutputs);\n            for (let i = 0; i < outputNames.length; i++) {\n                const outputName = outputNames[i];\n                const tensorInfo = signatureOutputs[outputName];\n                this.resourceIdToCapturedInput[tensorInfo.resourceId] = outputs[i];\n            }\n        }\n    }\n    /**\n     * Executes inference for the model for given input tensors.\n     * @param inputs tensor, tensor array or tensor map of the inputs for the\n     * model, keyed by the input node names.\n     * @param outputs output node name from the TensorFlow model, if no\n     * outputs are specified, the default outputs of the model would be used.\n     * You can inspect intermediate nodes of the model by adding them to the\n     * outputs array.\n     *\n     * @returns A single tensor if provided with a single output or no outputs\n     * are provided and there is only one default output, otherwise return a\n     * tensor array. The order of the tensor array is the same as the outputs\n     * if provided, otherwise the order of outputNodes attribute of the model.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    execute(inputs, outputs) {\n        if (this.resourceIdToCapturedInput == null) {\n            this.setResourceIdToCapturedInput(this.executeInitializerGraph());\n        }\n        inputs = this.normalizeInputs(inputs);\n        outputs = this.normalizeOutputs(outputs);\n        const result = this.executor.execute(inputs, outputs);\n        return result.length > 1 ? result : result[0];\n    }\n    /**\n     * Executes inference for the model for given input tensors in async\n     * fashion, use this method when your model contains control flow ops.\n     * @param inputs tensor, tensor array or tensor map of the inputs for the\n     * model, keyed by the input node names.\n     * @param outputs output node name from the TensorFlow model, if no outputs\n     * are specified, the default outputs of the model would be used. You can\n     * inspect intermediate nodes of the model by adding them to the outputs\n     * array.\n     *\n     * @returns A Promise of single tensor if provided with a single output or\n     * no outputs are provided and there is only one default output, otherwise\n     * return a tensor map.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async executeAsync(inputs, outputs) {\n        if (this.resourceIdToCapturedInput == null) {\n            this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync());\n        }\n        inputs = this.normalizeInputs(inputs);\n        outputs = this.normalizeOutputs(outputs);\n        const result = await this.executor.executeAsync(inputs, outputs);\n        return result.length > 1 ? result : result[0];\n    }\n    /**\n     * Get intermediate tensors for model debugging mode (flag\n     * KEEP_INTERMEDIATE_TENSORS is true).\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    getIntermediateTensors() {\n        return this.executor.getIntermediateTensors();\n    }\n    /**\n     * Dispose intermediate tensors for model debugging mode (flag\n     * KEEP_INTERMEDIATE_TENSORS is true).\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    disposeIntermediateTensors() {\n        this.executor.disposeIntermediateTensors();\n    }\n    convertTensorMapToTensorsMap(map) {\n        return Object.keys(map).reduce((newMap, key) => {\n            newMap[key] = [map[key]];\n            return newMap;\n        }, {});\n    }\n    /**\n     * Releases the memory used by the weight tensors and resourceManager.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    dispose() {\n        this.executor.dispose();\n        if (this.initializer) {\n            this.initializer.dispose();\n            if (this.resourceIdToCapturedInput) {\n                dispose(this.resourceIdToCapturedInput);\n            }\n        }\n        this.resourceManager.dispose();\n    }\n}\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction\n * with a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send\n *     credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(modelUrl, options = {}, tfio = io) {\n    if (modelUrl == null) {\n        throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n            'or an IOHandler that loads the model');\n    }\n    if (options == null) {\n        options = {};\n    }\n    if (options.fromTFHub && typeof modelUrl === 'string') {\n        modelUrl = getTFHubUrl(modelUrl);\n    }\n    const model = new GraphModel(modelUrl, options, tfio);\n    await model.load();\n    return model;\n}\n/**\n * Load a graph model given a synchronous IO handler with a 'load' method.\n *\n * @param modelSource The `io.IOHandlerSync` that loads the model, or the\n *     `io.ModelArtifacts` that encode the model, or a tuple of\n *     `[io.ModelJSON, ArrayBuffer]` of which the first element encodes the\n *      model and the second contains the weights.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport function loadGraphModelSync(modelSource) {\n    if (modelSource == null) {\n        throw new Error('modelUrl in loadGraphModelSync() cannot be null. Please provide ' +\n            'model artifacts or an IOHandler that loads the model');\n    }\n    let ioHandler;\n    if (modelSource instanceof Array) {\n        const [modelJSON, weights] = modelSource;\n        if (!modelJSON) {\n            throw new Error('modelJSON must be the first element of the array');\n        }\n        if (!weights || !(weights instanceof ArrayBuffer)) {\n            throw new Error('An ArrayBuffer of weights must be the second element of' +\n                ' the array');\n        }\n        if (!('modelTopology' in modelJSON)) {\n            throw new Error('Model JSON is missing \\'modelTopology\\'');\n        }\n        if (!('weightsManifest' in modelJSON)) {\n            throw new Error('Model JSON is missing \\'weightsManifest\\'');\n        }\n        const weightSpecs = io.getWeightSpecs(modelJSON.weightsManifest);\n        const modelArtifacts = io.getModelArtifactsForJSONSync(modelJSON, weightSpecs, weights);\n        ioHandler = io.fromMemorySync(modelArtifacts);\n    }\n    else if ('load' in modelSource) {\n        // Then modelSource is already an IOHandlerSync.\n        ioHandler = modelSource;\n    }\n    else if ('modelTopology' in modelSource && 'weightSpecs' in modelSource &&\n        'weightData' in modelSource) {\n        // modelSource is of type ModelArtifacts.\n        ioHandler = io.fromMemorySync(modelSource);\n    }\n    else {\n        throw new Error('Unknown model format');\n    }\n    const model = new GraphModel(ioHandler);\n    model.load();\n    return model;\n}\nfunction getTFHubUrl(modelUrl) {\n    if (!modelUrl.endsWith('/')) {\n        modelUrl = (modelUrl) + '/';\n    }\n    return `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n}\n//# sourceMappingURL=data:application/json;base64,","/** @license See the LICENSE file. */\n// This code is auto-generated, do not modify this file!\nconst version = '4.22.0';\nexport { version };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFDQUFxQztBQUVyQyx3REFBd0Q7QUFDeEQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDO0FBQ3pCLE9BQU8sRUFBQyxPQUFPLEVBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAbGljZW5zZSBTZWUgdGhlIExJQ0VOU0UgZmlsZS4gKi9cblxuLy8gVGhpcyBjb2RlIGlzIGF1dG8tZ2VuZXJhdGVkLCBkbyBub3QgbW9kaWZ5IHRoaXMgZmlsZSFcbmNvbnN0IHZlcnNpb24gPSAnNC4yMi4wJztcbmV4cG9ydCB7dmVyc2lvbn07XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { Dataset } from '../dataset';\n/**\n * Represents a potentially large collection of text lines.\n *\n * The results are not batched.\n */\nexport class TextLineDataset extends Dataset {\n    /**\n     * Create a `TextLineDataset`.\n     *\n     * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\n     */\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    async iterator() {\n        const inputIterator = await this.input.iterator();\n        const utf8Iterator = inputIterator.decodeUTF8();\n        const lineIterator = utf8Iterator.split('\\n').map(line => {\n            // Windows/DOS format text file has extra line breaker at the end of line.\n            if (line.endsWith('\\r')) {\n                line = line.slice(0, -1);\n            }\n            return line;\n        });\n        return lineIterator;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dF9saW5lX2RhdGFzZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWRhdGEvc3JjL2RhdGFzZXRzL3RleHRfbGluZV9kYXRhc2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBRUgsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFlBQVksQ0FBQztBQUluQzs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLGVBQWdCLFNBQVEsT0FBZTtJQUNsRDs7OztPQUlHO0lBQ0gsWUFBK0IsS0FBaUI7UUFDOUMsS0FBSyxFQUFFLENBQUM7UUFEcUIsVUFBSyxHQUFMLEtBQUssQ0FBWTtJQUVoRCxDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQVE7UUFDWixNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbEQsTUFBTSxZQUFZLEdBQUcsYUFBYSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2hELE1BQU0sWUFBWSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZELDBFQUEwRTtZQUMxRSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3ZCLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzFCO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7RGF0YXNldH0gZnJvbSAnLi4vZGF0YXNldCc7XG5pbXBvcnQge0RhdGFTb3VyY2V9IGZyb20gJy4uL2RhdGFzb3VyY2UnO1xuaW1wb3J0IHtMYXp5SXRlcmF0b3J9IGZyb20gJy4uL2l0ZXJhdG9ycy9sYXp5X2l0ZXJhdG9yJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcG90ZW50aWFsbHkgbGFyZ2UgY29sbGVjdGlvbiBvZiB0ZXh0IGxpbmVzLlxuICpcbiAqIFRoZSByZXN1bHRzIGFyZSBub3QgYmF0Y2hlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFRleHRMaW5lRGF0YXNldCBleHRlbmRzIERhdGFzZXQ8c3RyaW5nPiB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBgVGV4dExpbmVEYXRhc2V0YC5cbiAgICpcbiAgICogQHBhcmFtIGlucHV0IEEgYERhdGFTb3VyY2VgIHByb3ZpZGluZyBhIGNodW5rZWQsIFVURjgtZW5jb2RlZCBieXRlIHN0cmVhbS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCByZWFkb25seSBpbnB1dDogRGF0YVNvdXJjZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBhc3luYyBpdGVyYXRvcigpOiBQcm9taXNlPExhenlJdGVyYXRvcjxzdHJpbmc+PiB7XG4gICAgY29uc3QgaW5wdXRJdGVyYXRvciA9IGF3YWl0IHRoaXMuaW5wdXQuaXRlcmF0b3IoKTtcbiAgICBjb25zdCB1dGY4SXRlcmF0b3IgPSBpbnB1dEl0ZXJhdG9yLmRlY29kZVVURjgoKTtcbiAgICBjb25zdCBsaW5lSXRlcmF0b3IgPSB1dGY4SXRlcmF0b3Iuc3BsaXQoJ1xcbicpLm1hcChsaW5lID0+IHtcbiAgICAgIC8vIFdpbmRvd3MvRE9TIGZvcm1hdCB0ZXh0IGZpbGUgaGFzIGV4dHJhIGxpbmUgYnJlYWtlciBhdCB0aGUgZW5kIG9mIGxpbmUuXG4gICAgICBpZiAobGluZS5lbmRzV2l0aCgnXFxyJykpIHtcbiAgICAgICAgbGluZSA9IGxpbmUuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxpbmU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGxpbmVJdGVyYXRvcjtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { Dataset } from '../dataset';\nimport { TextLineDataset } from './text_line_dataset';\nconst CODE_QUOTE = '\"';\nconst STATE_OUT = Symbol('out');\nconst STATE_FIELD = Symbol('field');\nconst STATE_QUOTE = Symbol('quote');\nconst STATE_QUOTE_AFTER_QUOTE = Symbol('quoteafterquote');\nconst STATE_WITHIN_QUOTE_IN_QUOTE = Symbol('quoteinquote');\n/**\n * Represents a potentially large collection of delimited text records.\n *\n * The produced `TensorContainer`s each contain one key-value pair for\n * every column of the table.  When a field is empty in the incoming data, the\n * resulting value is `undefined`, or throw error if it is required.  Values\n * that can be parsed as numbers are emitted as type `number`, other values\n * are parsed as `string`.\n *\n * The results are not batched.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\nexport class CSVDataset extends Dataset {\n    /**\n     * Returns column names of the csv dataset. If `configuredColumnsOnly` is\n     * true, return column names in `columnConfigs`. If `configuredColumnsOnly` is\n     * false and `columnNames` is provided, `columnNames`. If\n     * `configuredColumnsOnly` is false and `columnNames` is not provided, return\n     * all column names parsed from the csv file. For example usage please go to\n     * `tf.data.csv`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    async columnNames() {\n        if (!this.columnNamesValidated) {\n            await this.setColumnNames();\n        }\n        return this.configuredColumnsOnly ? Object.keys(this.columnConfigs) :\n            this.fullColumnNames;\n    }\n    /* 1) If `columnNames` is provided as string[], use this string[] as output\n     * keys in corresponding order. The length must match the number of inferred\n     * columns if `hasHeader` is true .\n     * 2) If `columnNames` is not provided, parse header line as `columnNames` if\n     * hasHeader is true. If `hasHeader` is false, throw an error.\n     * 3) If `columnConfigs` is provided, all the keys in `columnConfigs` must\n     * exist in parsed `columnNames`.\n     */\n    async setColumnNames() {\n        const columnNamesFromFile = await this.maybeReadHeaderLine();\n        if (!this.fullColumnNames && !columnNamesFromFile) {\n            // Throw an error if columnNames is not provided and no header line.\n            throw new Error('Column names must be provided if there is no header line.');\n        }\n        else if (this.fullColumnNames && columnNamesFromFile) {\n            // Check provided columnNames match header line.\n            util.assert(columnNamesFromFile.length === this.fullColumnNames.length, () => 'The length of provided columnNames (' +\n                this.fullColumnNames.length.toString() +\n                ') does not match the length of the header line read from ' +\n                'file (' + columnNamesFromFile.length.toString() + ').');\n        }\n        if (!this.fullColumnNames) {\n            this.fullColumnNames = columnNamesFromFile;\n        }\n        // Check if there are duplicate column names.\n        const counts = this.fullColumnNames.reduce((countAcc, name) => {\n            countAcc[name] = (countAcc[name] + 1) || 1;\n            return countAcc;\n        }, {});\n        const duplicateNames = Object.keys(counts).filter((name) => (counts[name] > 1));\n        util.assert(duplicateNames.length === 0, () => 'Duplicate column names found: ' + duplicateNames.toString());\n        // Check if keys in columnConfigs match columnNames.\n        if (this.columnConfigs) {\n            for (const key of Object.keys(this.columnConfigs)) {\n                const index = this.fullColumnNames.indexOf(key);\n                if (index === -1) {\n                    throw new Error('The key \"' + key +\n                        '\" provided in columnConfigs does not match any of the column ' +\n                        'names (' + this.fullColumnNames.toString() + ').');\n                }\n            }\n        }\n        this.columnNamesValidated = true;\n    }\n    async maybeReadHeaderLine() {\n        if (this.hasHeader) {\n            const iter = await this.base.iterator();\n            const firstElement = await iter.next();\n            if (firstElement.done) {\n                throw new Error('No data was found for CSV parsing.');\n            }\n            const firstLine = firstElement.value;\n            const headers = this.parseRow(firstLine, false);\n            return headers;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Create a `CSVDataset`.\n     *\n     * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\n     * @param csvConfig (Optional) A CSVConfig object that contains configurations\n     *     of reading and decoding from CSV file(s).\n     *\n     *     hasHeader: (Optional) A boolean value that indicates whether the first\n     *     row of provided CSV file is a header line with column names, and should\n     *     not be included in the data. Defaults to `true`.\n     *\n     *     columnNames: (Optional) A list of strings that corresponds to\n     *     the CSV column names, in order. If provided, it ignores the column\n     *     names inferred from the header row. If not provided, infers the column\n     *     names from the first row of the records. If hasHeader is false and\n     *     columnNames is not provided, this method throws an error.\n     *\n     *     columnConfigs: (Optional) A dictionary whose key is column names, value\n     *     is an object stating if this column is required, column's data type,\n     *     default value, and if this column is label. If provided, keys must\n     *     correspond to names provided in columnNames or inferred from the file\n     *     header lines. If isLabel is true any column, returns an array of two\n     *     items: the first item is a dict of features key/value pairs, the second\n     *     item is a dict of labels key/value pairs. If no feature is marked as\n     *     label, returns a dict of features only.\n     *\n     *     configuredColumnsOnly (Optional) If true, only columns provided in\n     *     columnConfigs will be parsed and provided during iteration.\n     *\n     *     delimiter (Optional) The string used to parse each line of the input\n     *     file. Defaults to `,`.\n     */\n    constructor(input, csvConfig) {\n        super();\n        this.input = input;\n        this.hasHeader = true;\n        this.fullColumnNames = null;\n        this.columnNamesValidated = false;\n        this.columnConfigs = null;\n        this.configuredColumnsOnly = false;\n        this.delimiter = ',';\n        this.delimWhitespace = false;\n        this.base = new TextLineDataset(input);\n        if (!csvConfig) {\n            csvConfig = {};\n        }\n        this.hasHeader = csvConfig.hasHeader === false ? false : true;\n        this.fullColumnNames = csvConfig.columnNames;\n        this.columnConfigs = csvConfig.columnConfigs;\n        this.configuredColumnsOnly = csvConfig.configuredColumnsOnly;\n        if (csvConfig.delimWhitespace) {\n            util.assert(csvConfig.delimiter == null, () => 'Delimiter should not be provided when delimWhitespace is true.');\n            this.delimWhitespace = true;\n            this.delimiter = ' ';\n        }\n        else {\n            this.delimiter = csvConfig.delimiter ? csvConfig.delimiter : ',';\n        }\n    }\n    async iterator() {\n        if (!this.columnNamesValidated) {\n            await this.setColumnNames();\n        }\n        let lines = await this.base.iterator();\n        if (this.hasHeader) {\n            // We previously read the first line to get the columnNames.\n            // Now that we're providing data, skip it.\n            lines = lines.skip(1);\n        }\n        return lines.map(x => this.makeDataElement(x));\n    }\n    makeDataElement(line) {\n        const values = this.parseRow(line);\n        const features = {};\n        const labels = {};\n        for (let i = 0; i < this.fullColumnNames.length; i++) {\n            const key = this.fullColumnNames[i];\n            const config = this.columnConfigs ? this.columnConfigs[key] : null;\n            if (this.configuredColumnsOnly && !config) {\n                // This column is not selected.\n                continue;\n            }\n            else {\n                const value = values[i];\n                let parsedValue = null;\n                if (value === '') {\n                    // If default value is provided, use it. If default value is not\n                    // provided, set as undefined.\n                    if (config && config.default !== undefined) {\n                        parsedValue = config.default;\n                    }\n                    else if (config && (config.required || config.isLabel)) {\n                        throw new Error(`Required column ${key} is empty in this line: ${line}`);\n                    }\n                    else {\n                        parsedValue = undefined;\n                    }\n                }\n                else {\n                    // A value is present, so parse it based on type\n                    const valueAsNum = Number(value);\n                    if (isNaN(valueAsNum)) {\n                        // The value is a string and this column is declared as boolean\n                        // in config, parse it as boolean.\n                        if (config && config.dtype === 'bool') {\n                            parsedValue = this.getBoolean(value);\n                        }\n                        else {\n                            // Set value as string\n                            parsedValue = value;\n                        }\n                    }\n                    else if (!config || !config.dtype) {\n                        // If this value is a number and no type config is provided, return\n                        // it as number.\n                        parsedValue = valueAsNum;\n                    }\n                    else {\n                        // If this value is a number and data type is provided, parse it\n                        // according to provided data type.\n                        switch (config.dtype) {\n                            case 'float32':\n                                parsedValue = valueAsNum;\n                                break;\n                            case 'int32':\n                                parsedValue = Math.floor(valueAsNum);\n                                break;\n                            case 'bool':\n                                parsedValue = this.getBoolean(value);\n                                break;\n                            default:\n                                parsedValue = valueAsNum;\n                        }\n                    }\n                }\n                // Check if this column is label.\n                (config && config.isLabel) ? labels[key] = parsedValue :\n                    features[key] = parsedValue;\n            }\n        }\n        // If label exists, return an object of features and labels as {xs:features,\n        // ys:labels}, otherwise return features only.\n        if (Object.keys(labels).length === 0) {\n            return features;\n        }\n        else {\n            return { xs: features, ys: labels };\n        }\n    }\n    getBoolean(value) {\n        if (value === '1' || value.toLowerCase() === 'true') {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    // adapted from https://beta.observablehq.com/@mbostock/streaming-csv\n    parseRow(line, validateElementCount = true) {\n        const result = [];\n        let readOffset = 0;\n        const readLength = line.length;\n        let currentState = STATE_OUT;\n        // Goes through the line to parse quote.\n        for (let i = 0; i < readLength; i++) {\n            switch (currentState) {\n                // Before enter a new field\n                case STATE_OUT:\n                    switch (line.charAt(i)) {\n                        // Enter a quoted field\n                        case CODE_QUOTE:\n                            readOffset = i + 1;\n                            currentState = STATE_QUOTE;\n                            break;\n                        // Read an empty field\n                        case this.delimiter:\n                            readOffset = i + 1;\n                            // If delimiter is white space and configured to collapse\n                            // multiple white spaces, ignore this white space.\n                            if (this.delimiter === ' ' && this.delimWhitespace) {\n                                break;\n                            }\n                            result.push('');\n                            currentState = STATE_OUT;\n                            break;\n                        // Enter an unquoted field\n                        default:\n                            currentState = STATE_FIELD;\n                            readOffset = i;\n                            break;\n                    }\n                    break;\n                // In an unquoted field\n                case STATE_FIELD:\n                    switch (line.charAt(i)) {\n                        // Exit an unquoted field, add it to result\n                        case this.delimiter:\n                            result.push(line.substring(readOffset, i));\n                            currentState = STATE_OUT;\n                            readOffset = i + 1;\n                            break;\n                        default:\n                    }\n                    break;\n                // In a quoted field\n                case STATE_QUOTE:\n                    switch (line.charAt(i)) {\n                        // Read a quote after a quote\n                        case CODE_QUOTE:\n                            currentState = STATE_QUOTE_AFTER_QUOTE;\n                            break;\n                        default:\n                    }\n                    break;\n                // This state means it's right after a second quote in a field\n                case STATE_QUOTE_AFTER_QUOTE:\n                    switch (line.charAt(i)) {\n                        // Finished a quoted field\n                        case this.delimiter:\n                            result.push(line.substring(readOffset, i - 1));\n                            currentState = STATE_OUT;\n                            readOffset = i + 1;\n                            break;\n                        // Finished a quoted part in a quoted field\n                        case CODE_QUOTE:\n                            currentState = STATE_QUOTE;\n                            break;\n                        // In a quoted part in a quoted field\n                        default:\n                            currentState = STATE_WITHIN_QUOTE_IN_QUOTE;\n                            break;\n                    }\n                    break;\n                case STATE_WITHIN_QUOTE_IN_QUOTE:\n                    switch (line.charAt(i)) {\n                        // Exit a quoted part in a quoted field\n                        case CODE_QUOTE:\n                            currentState = STATE_QUOTE;\n                            break;\n                        default:\n                    }\n                    break;\n                default:\n            }\n        }\n        // Adds last item based on if it is quoted.\n        if (currentState === STATE_QUOTE_AFTER_QUOTE) {\n            result.push(line.substring(readOffset, readLength - 1));\n        }\n        else {\n            result.push(line.substring(readOffset));\n        }\n        // Check if each row has the same number of elements as column names.\n        if (validateElementCount && result.length !== this.fullColumnNames.length) {\n            throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${result}`);\n        }\n        return result;\n    }\n}\n// TODO(soergel): add more basic datasets for parity with tf.data\n// tf.data.FixedLengthRecordDataset()\n// tf.data.TFRecordDataset()\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env, tensor, util } from '@tensorflow/tfjs-core';\nimport { LazyIterator } from './lazy_iterator';\n/**\n * Provide a stream of tensors from microphone audio stream. The tensors are\n * representing audio data as frequency-domain spectrogram generated with\n * browser's native FFT. Tensors representing time-domain waveform is available\n * based on configuration. Only works in browser environment.\n */\nexport class MicrophoneIterator extends LazyIterator {\n    constructor(microphoneConfig) {\n        super();\n        this.microphoneConfig = microphoneConfig;\n        this.isClosed = false;\n        this.fftSize = microphoneConfig.fftSize || 1024;\n        const fftSizeLog2 = Math.log2(this.fftSize);\n        if (this.fftSize < 0 || fftSizeLog2 < 4 || fftSizeLog2 > 14 ||\n            !Number.isInteger(fftSizeLog2)) {\n            throw new Error(`Invalid fftSize: it must be a power of 2 between ` +\n                `2 to 4 and 2 to 14, but got ${this.fftSize}`);\n        }\n        this.numFrames = microphoneConfig.numFramesPerSpectrogram || 43;\n        this.sampleRateHz = microphoneConfig.sampleRateHz;\n        this.columnTruncateLength =\n            microphoneConfig.columnTruncateLength || this.fftSize;\n        this.audioTrackConstraints = microphoneConfig.audioTrackConstraints;\n        this.smoothingTimeConstant = microphoneConfig.smoothingTimeConstant || 0;\n        this.includeSpectrogram =\n            microphoneConfig.includeSpectrogram === false ? false : true;\n        this.includeWaveform =\n            microphoneConfig.includeWaveform === true ? true : false;\n        if (!this.includeSpectrogram && !this.includeWaveform) {\n            throw new Error('Both includeSpectrogram and includeWaveform are false. ' +\n                'At least one type of data should be returned.');\n        }\n    }\n    summary() {\n        return `microphone`;\n    }\n    // Construct a MicrophoneIterator and start the audio stream.\n    static async create(microphoneConfig = {}) {\n        if (!env().get('IS_BROWSER')) {\n            throw new Error('microphone API is only supported in browser environment.');\n        }\n        const microphoneIterator = new MicrophoneIterator(microphoneConfig);\n        // Call async function start() to initialize the audio stream.\n        await microphoneIterator.start();\n        return microphoneIterator;\n    }\n    // Start the audio stream and FFT.\n    async start() {\n        try {\n            this.stream = await navigator.mediaDevices.getUserMedia({\n                audio: this.audioTrackConstraints == null ? true :\n                    this.audioTrackConstraints,\n                video: false\n            });\n        }\n        catch (e) {\n            throw new Error(`Error thrown while initializing video stream: ${e.message}`);\n        }\n        if (!this.stream) {\n            throw new Error('Could not obtain audio from microphone.');\n        }\n        const ctxConstructor = \n        // tslint:disable-next-line:no-any\n        window.AudioContext || window.webkitAudioContext;\n        this.audioContext = new ctxConstructor();\n        if (!this.sampleRateHz) {\n            // If sample rate is not provided, use the available sample rate on\n            // device.\n            this.sampleRateHz = this.audioContext.sampleRate;\n        }\n        else if (this.audioContext.sampleRate !== this.sampleRateHz) {\n            throw new Error(`Mismatch in sampling rate: ` +\n                `Expected: ${this.sampleRateHz}; ` +\n                `Actual: ${this.audioContext.sampleRate}`);\n        }\n        const streamSource = this.audioContext.createMediaStreamSource(this.stream);\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = this.fftSize * 2;\n        this.analyser.smoothingTimeConstant = this.smoothingTimeConstant;\n        streamSource.connect(this.analyser);\n        this.freqData = new Float32Array(this.fftSize);\n        this.timeData = new Float32Array(this.fftSize);\n        return;\n    }\n    async next() {\n        if (this.isClosed) {\n            return { value: null, done: true };\n        }\n        let spectrogramTensor;\n        let waveformTensor;\n        const audioDataQueue = await this.getAudioData();\n        if (this.includeSpectrogram) {\n            const freqData = this.flattenQueue(audioDataQueue.freqDataQueue);\n            spectrogramTensor = this.getTensorFromAudioDataArray(freqData, [this.numFrames, this.columnTruncateLength, 1]);\n        }\n        if (this.includeWaveform) {\n            const timeData = this.flattenQueue(audioDataQueue.timeDataQueue);\n            waveformTensor = this.getTensorFromAudioDataArray(timeData, [this.numFrames * this.fftSize, 1]);\n        }\n        return {\n            value: { 'spectrogram': spectrogramTensor, 'waveform': waveformTensor },\n            done: false\n        };\n    }\n    // Capture one result from the audio stream, and extract the value from\n    // iterator.next() result.\n    async capture() {\n        return (await this.next()).value;\n    }\n    async getAudioData() {\n        const freqDataQueue = [];\n        const timeDataQueue = [];\n        let currentFrames = 0;\n        return new Promise(resolve => {\n            const intervalID = setInterval(() => {\n                if (this.includeSpectrogram) {\n                    this.analyser.getFloatFrequencyData(this.freqData);\n                    // If the audio stream is initializing, return empty queue.\n                    if (this.freqData[0] === -Infinity) {\n                        resolve({ freqDataQueue, timeDataQueue });\n                    }\n                    freqDataQueue.push(this.freqData.slice(0, this.columnTruncateLength));\n                }\n                if (this.includeWaveform) {\n                    this.analyser.getFloatTimeDomainData(this.timeData);\n                    timeDataQueue.push(this.timeData.slice());\n                }\n                // Clean interval and return when all frames have been collected\n                if (++currentFrames === this.numFrames) {\n                    clearInterval(intervalID);\n                    resolve({ freqDataQueue, timeDataQueue });\n                }\n            }, this.fftSize / this.sampleRateHz * 1e3);\n        });\n    }\n    // Stop the audio stream and pause the iterator.\n    stop() {\n        if (!this.isClosed) {\n            this.isClosed = true;\n            this.analyser.disconnect();\n            this.audioContext.close();\n            if (this.stream != null && this.stream.getTracks().length > 0) {\n                this.stream.getTracks()[0].stop();\n            }\n        }\n    }\n    // Override toArray() function to prevent collecting.\n    toArray() {\n        throw new Error('Can not convert infinite audio stream to array.');\n    }\n    // Return audio sampling rate in Hz\n    getSampleRate() {\n        return this.sampleRateHz;\n    }\n    flattenQueue(queue) {\n        const frameSize = queue[0].length;\n        const freqData = new Float32Array(queue.length * frameSize);\n        queue.forEach((data, i) => freqData.set(data, i * frameSize));\n        return freqData;\n    }\n    getTensorFromAudioDataArray(freqData, shape) {\n        const vals = new Float32Array(util.sizeFromShape(shape));\n        // If the data is less than the output shape, the rest is padded with zeros.\n        vals.set(freqData, vals.length - freqData.length);\n        return tensor(vals, shape);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { browser, cast, env, expandDims, image, reshape, tensor1d, tensor2d, tidy, util } from '@tensorflow/tfjs-core';\nimport { LazyIterator } from './lazy_iterator';\n/**\n * Provide a stream of image tensors from webcam video stream. Only works in\n * browser environment.\n */\nexport class WebcamIterator extends LazyIterator {\n    constructor(webcamVideoElement, webcamConfig) {\n        super();\n        this.webcamVideoElement = webcamVideoElement;\n        this.webcamConfig = webcamConfig;\n        this.isClosed = true;\n        this.resize = false;\n        if (this.needToResize()) {\n            this.resize = true;\n            this.cropSize =\n                [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth];\n            this.cropBoxInd = tensor1d([0], 'int32');\n            if (this.webcamConfig.centerCrop) {\n                // Calculate the box based on resizing shape.\n                const widthCroppingRatio = this.webcamConfig.resizeWidth * 1.0 / this.webcamVideoElement.width;\n                const heightCroppingRatio = this.webcamConfig.resizeHeight * 1.0 /\n                    this.webcamVideoElement.height;\n                const widthCropStart = (1 - widthCroppingRatio) / 2;\n                const heightCropStart = (1 - heightCroppingRatio) / 2;\n                const widthCropEnd = widthCropStart + widthCroppingRatio;\n                const heightCropEnd = heightCroppingRatio + heightCropStart;\n                this.cropBox = tensor2d([heightCropStart, widthCropStart, heightCropEnd, widthCropEnd], [1, 4]);\n            }\n            else {\n                this.cropBox = tensor2d([0, 0, 1, 1], [1, 4]);\n            }\n        }\n    }\n    summary() {\n        return `webcam`;\n    }\n    // Construct a WebcamIterator and start it's video stream.\n    static async create(webcamVideoElement, webcamConfig = {}) {\n        if (!env().get('IS_BROWSER')) {\n            throw new Error('tf.data.webcam is only supported in browser environment.');\n        }\n        if (!webcamVideoElement) {\n            // If webcam video element is not provided, create a hidden video element\n            // with provided width and height.\n            webcamVideoElement = document.createElement('video');\n            if (!webcamConfig.resizeWidth || !webcamConfig.resizeHeight) {\n                throw new Error('Please provide webcam video element, or resizeWidth and ' +\n                    'resizeHeight to create a hidden video element.');\n            }\n            webcamVideoElement.width = webcamConfig.resizeWidth;\n            webcamVideoElement.height = webcamConfig.resizeHeight;\n        }\n        const webcamIterator = new WebcamIterator(webcamVideoElement, webcamConfig);\n        // Call async function to initialize the video stream.\n        await webcamIterator.start();\n        return webcamIterator;\n    }\n    // Async function to start video stream.\n    async start() {\n        if (this.webcamConfig.facingMode) {\n            util.assert((this.webcamConfig.facingMode === 'user') ||\n                (this.webcamConfig.facingMode === 'environment'), () => `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. ` +\n                `Please provide 'user' or 'environment'`);\n        }\n        try {\n            this.stream = await navigator.mediaDevices.getUserMedia({\n                video: {\n                    deviceId: this.webcamConfig.deviceId,\n                    facingMode: this.webcamConfig.facingMode ?\n                        this.webcamConfig.facingMode :\n                        'user',\n                    width: this.webcamVideoElement.width,\n                    height: this.webcamVideoElement.height\n                }\n            });\n        }\n        catch (e) {\n            // Modify the error message but leave the stack trace intact\n            e.message = `Error thrown while initializing video stream: ${e.message}`;\n            throw e;\n        }\n        if (!this.stream) {\n            throw new Error('Could not obtain video from webcam.');\n        }\n        // Older browsers may not have srcObject\n        try {\n            this.webcamVideoElement.srcObject = this.stream;\n        }\n        catch (error) {\n            console.log(error);\n            this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);\n        }\n        // Start the webcam video stream\n        this.webcamVideoElement.play();\n        this.isClosed = false;\n        return new Promise(resolve => {\n            // Add event listener to make sure the webcam has been fully initialized.\n            this.webcamVideoElement.onloadedmetadata = () => {\n                resolve();\n            };\n        });\n    }\n    async next() {\n        if (this.isClosed) {\n            return { value: null, done: true };\n        }\n        let img;\n        try {\n            img = browser.fromPixels(this.webcamVideoElement);\n        }\n        catch (e) {\n            throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`);\n        }\n        if (this.resize) {\n            try {\n                return { value: this.cropAndResizeFrame(img), done: false };\n            }\n            catch (e) {\n                throw new Error(`Error thrown cropping the video: ${e.message}`);\n            }\n            finally {\n                img.dispose();\n            }\n        }\n        else {\n            return { value: img, done: false };\n        }\n    }\n    needToResize() {\n        // If resizeWidth and resizeHeight are provided, and different from the\n        // width and height of original HTMLVideoElement, then resizing and cropping\n        // is required.\n        if (this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight &&\n            (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth ||\n                this.webcamVideoElement.height !== this.webcamConfig.resizeHeight)) {\n            return true;\n        }\n        return false;\n    }\n    // Cropping and resizing each frame based on config\n    cropAndResizeFrame(img) {\n        return tidy(() => {\n            const expandedImage = expandDims(cast(img, 'float32'), (0));\n            let resizedImage;\n            resizedImage = image.cropAndResize(expandedImage, this.cropBox, this.cropBoxInd, this.cropSize, 'bilinear');\n            // Extract image from batch cropping.\n            const shape = resizedImage.shape;\n            return reshape(resizedImage, shape.slice(1));\n        });\n    }\n    // Capture one frame from the video stream, and extract the value from\n    // iterator.next() result.\n    async capture() {\n        return (await this.next()).value;\n    }\n    // Stop the video stream and pause webcam iterator.\n    stop() {\n        const tracks = this.stream.getTracks();\n        tracks.forEach(track => track.stop());\n        try {\n            this.webcamVideoElement.srcObject = null;\n        }\n        catch (error) {\n            console.log(error);\n            this.webcamVideoElement.src = null;\n        }\n        this.isClosed = true;\n    }\n    // Override toArray() function to prevent collecting.\n    toArray() {\n        throw new Error('Can not convert infinite video stream to array.');\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n/**\n * Represents a data source readable as a stream of binary data chunks.\n *\n * Because `Dataset`s can be read repeatedly (via `Dataset.iterator()`), this\n * provides a means to repeatedly create streams from the underlying data\n * sources.\n */\nexport class DataSource {\n}\n// TODO(soergel): consider convenience factory functions here\n// in combination with chainable source->dataset above, e.g.:\n// tf.data.url(...).asCsvDataset().shuffle().batch()\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtZGF0YS9zcmMvZGF0YXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUlIOzs7Ozs7R0FNRztBQUNILE1BQU0sT0FBZ0IsVUFBVTtDQVUvQjtBQUVELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0Qsb0RBQW9EIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtCeXRlQ2h1bmtJdGVyYXRvcn0gZnJvbSAnLi9pdGVyYXRvcnMvYnl0ZV9jaHVua19pdGVyYXRvcic7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGRhdGEgc291cmNlIHJlYWRhYmxlIGFzIGEgc3RyZWFtIG9mIGJpbmFyeSBkYXRhIGNodW5rcy5cbiAqXG4gKiBCZWNhdXNlIGBEYXRhc2V0YHMgY2FuIGJlIHJlYWQgcmVwZWF0ZWRseSAodmlhIGBEYXRhc2V0Lml0ZXJhdG9yKClgKSwgdGhpc1xuICogcHJvdmlkZXMgYSBtZWFucyB0byByZXBlYXRlZGx5IGNyZWF0ZSBzdHJlYW1zIGZyb20gdGhlIHVuZGVybHlpbmcgZGF0YVxuICogc291cmNlcy5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIERhdGFTb3VyY2Uge1xuICAvKipcbiAgICogT2J0YWluIGEgbmV3IHN0cmVhbSBvZiBiaW5hcnkgZGF0YSBjaHVua3MuXG4gICAqXG4gICAqIFN0YXJ0cyB0aGUgbmV3IHN0cmVhbSBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGRhdGEgc291cmNlLCBldmVuIGlmIG90aGVyXG4gICAqIHN0cmVhbXMgaGF2ZSBiZWVuIG9idGFpbmVkIHByZXZpb3VzbHkuXG4gICAqL1xuICBhYnN0cmFjdCBpdGVyYXRvcigpOiBQcm9taXNlPEJ5dGVDaHVua0l0ZXJhdG9yPjtcblxuICAvLyBUT0RPKHNvZXJnZWwpOiBjb25zaWRlciBjaGFpbmFibGUgRGF0YXNldCBjb25zdHJ1Y3Rpb24gaGVyZVxufVxuXG4vLyBUT0RPKHNvZXJnZWwpOiBjb25zaWRlciBjb252ZW5pZW5jZSBmYWN0b3J5IGZ1bmN0aW9ucyBoZXJlXG4vLyBpbiBjb21iaW5hdGlvbiB3aXRoIGNoYWluYWJsZSBzb3VyY2UtPmRhdGFzZXQgYWJvdmUsIGUuZy46XG4vLyB0Zi5kYXRhLnVybCguLi4pLmFzQ3N2RGF0YXNldCgpLnNodWZmbGUoKS5iYXRjaCgpXG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nexport class StringIterator extends LazyIterator {\n    /**\n     * Splits a string stream on a given separator.\n     *\n     * It is assumed that the incoming chunk boundaries have no semantic meaning,\n     * so conceptually the incoming stream is treated simply as the concatenation\n     * of its elements.\n     *\n     * The outgoing stream provides chunks corresponding to the results of the\n     * standard string split() operation (even if such a chunk spanned incoming\n     * chunks).  The separators are not included.\n     *\n     * A typical usage is to split a text file (represented as a stream with\n     * arbitrary chunk boundaries) into lines.\n     *\n     * @param upstream A readable stream of strings that can be treated as\n     *   concatenated.\n     * @param separator A character to split on.\n     */\n    split(separator) {\n        return new SplitIterator(this, separator);\n    }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass SplitIterator extends StringIterator {\n    constructor(upstream, separator) {\n        super();\n        this.upstream = upstream;\n        this.impl = new SplitIteratorImpl(upstream, separator);\n    }\n    summary() {\n        return this.impl.summary();\n    }\n    async next() {\n        return this.impl.next();\n    }\n}\nclass SplitIteratorImpl extends OneToManyIterator {\n    constructor(upstream, separator) {\n        super();\n        this.upstream = upstream;\n        this.separator = separator;\n        // A partial string at the end of an upstream chunk\n        this.carryover = '';\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Split('${this.separator}')`;\n    }\n    async pump() {\n        const chunkResult = await this.upstream.next();\n        if (chunkResult.done) {\n            if (this.carryover === '') {\n                return false;\n            }\n            // Pretend that the pump succeeded in order to emit the small last batch.\n            // The next pump() call will actually fail.\n            this.outputQueue.push(this.carryover);\n            this.carryover = '';\n            return true;\n        }\n        const lines = chunkResult.value.split(this.separator);\n        // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n        // Thus the carryover may be '' if the separator falls on a chunk\n        // boundary; this produces the correct result.\n        lines[0] = this.carryover + lines[0];\n        for (const line of lines.slice(0, -1)) {\n            this.outputQueue.push(line);\n        }\n        this.carryover = lines[lines.length - 1];\n        return true;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nX2l0ZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1kYXRhL3NyYy9pdGVyYXRvcnMvc3RyaW5nX2l0ZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBRUgsT0FBTyxFQUFDLFlBQVksRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRWhFLE1BQU0sT0FBZ0IsY0FBZSxTQUFRLFlBQW9CO0lBQy9EOzs7Ozs7Ozs7Ozs7Ozs7OztPQWlCRztJQUNILEtBQUssQ0FBQyxTQUFpQjtRQUNyQixPQUFPLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM1QyxDQUFDO0NBQ0Y7QUFFRCwrRUFBK0U7QUFDL0UseUVBQXlFO0FBQ3pFLGdGQUFnRjtBQUNoRiw4Q0FBOEM7QUFDOUMsK0VBQStFO0FBRS9FLHVDQUF1QztBQUN2QyxzRUFBc0U7QUFDdEUsNEVBQTRFO0FBQzVFLG9CQUFvQjtBQUVwQixNQUFNLGFBQWMsU0FBUSxjQUFjO0lBR3hDLFlBQXNCLFFBQThCLEVBQUUsU0FBaUI7UUFDckUsS0FBSyxFQUFFLENBQUM7UUFEWSxhQUFRLEdBQVIsUUFBUSxDQUFzQjtRQUVsRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksaUJBQWlCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSTtRQUNSLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMxQixDQUFDO0NBQ0Y7QUFFRCxNQUFNLGlCQUFrQixTQUFRLGlCQUF5QjtJQUl2RCxZQUNjLFFBQThCLEVBQVksU0FBaUI7UUFDdkUsS0FBSyxFQUFFLENBQUM7UUFESSxhQUFRLEdBQVIsUUFBUSxDQUFzQjtRQUFZLGNBQVMsR0FBVCxTQUFTLENBQVE7UUFKekUsbURBQW1EO1FBQ25ELGNBQVMsR0FBRyxFQUFFLENBQUM7SUFLZixDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxjQUFjLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQztJQUNwRSxDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUk7UUFDUixNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDL0MsSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFO1lBQ3BCLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxFQUFFLEVBQUU7Z0JBQ3pCLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFFRCx5RUFBeUU7WUFDekUsMkNBQTJDO1lBQzNDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztZQUNwQixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBYSxDQUFDO1FBQ2xFLDBEQUEwRDtRQUMxRCxpRUFBaUU7UUFDakUsOENBQThDO1FBRTlDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0I7UUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRXpDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtMYXp5SXRlcmF0b3IsIE9uZVRvTWFueUl0ZXJhdG9yfSBmcm9tICcuL2xhenlfaXRlcmF0b3InO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3RyaW5nSXRlcmF0b3IgZXh0ZW5kcyBMYXp5SXRlcmF0b3I8c3RyaW5nPiB7XG4gIC8qKlxuICAgKiBTcGxpdHMgYSBzdHJpbmcgc3RyZWFtIG9uIGEgZ2l2ZW4gc2VwYXJhdG9yLlxuICAgKlxuICAgKiBJdCBpcyBhc3N1bWVkIHRoYXQgdGhlIGluY29taW5nIGNodW5rIGJvdW5kYXJpZXMgaGF2ZSBubyBzZW1hbnRpYyBtZWFuaW5nLFxuICAgKiBzbyBjb25jZXB0dWFsbHkgdGhlIGluY29taW5nIHN0cmVhbSBpcyB0cmVhdGVkIHNpbXBseSBhcyB0aGUgY29uY2F0ZW5hdGlvblxuICAgKiBvZiBpdHMgZWxlbWVudHMuXG4gICAqXG4gICAqIFRoZSBvdXRnb2luZyBzdHJlYW0gcHJvdmlkZXMgY2h1bmtzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHJlc3VsdHMgb2YgdGhlXG4gICAqIHN0YW5kYXJkIHN0cmluZyBzcGxpdCgpIG9wZXJhdGlvbiAoZXZlbiBpZiBzdWNoIGEgY2h1bmsgc3Bhbm5lZCBpbmNvbWluZ1xuICAgKiBjaHVua3MpLiAgVGhlIHNlcGFyYXRvcnMgYXJlIG5vdCBpbmNsdWRlZC5cbiAgICpcbiAgICogQSB0eXBpY2FsIHVzYWdlIGlzIHRvIHNwbGl0IGEgdGV4dCBmaWxlIChyZXByZXNlbnRlZCBhcyBhIHN0cmVhbSB3aXRoXG4gICAqIGFyYml0cmFyeSBjaHVuayBib3VuZGFyaWVzKSBpbnRvIGxpbmVzLlxuICAgKlxuICAgKiBAcGFyYW0gdXBzdHJlYW0gQSByZWFkYWJsZSBzdHJlYW0gb2Ygc3RyaW5ncyB0aGF0IGNhbiBiZSB0cmVhdGVkIGFzXG4gICAqICAgY29uY2F0ZW5hdGVkLlxuICAgKiBAcGFyYW0gc2VwYXJhdG9yIEEgY2hhcmFjdGVyIHRvIHNwbGl0IG9uLlxuICAgKi9cbiAgc3BsaXQoc2VwYXJhdG9yOiBzdHJpbmcpOiBTdHJpbmdJdGVyYXRvciB7XG4gICAgcmV0dXJuIG5ldyBTcGxpdEl0ZXJhdG9yKHRoaXMsIHNlcGFyYXRvcik7XG4gIH1cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVGhlIGZvbGxvd2luZyBwcml2YXRlIGNsYXNzZXMgc2VydmUgdG8gaW1wbGVtZW50IHRoZSBjaGFpbmFibGUgbWV0aG9kc1xuLy8gb24gU3RyaW5nSXRlcmF0b3IuICBVbmZvcnR1bmF0ZWx5IHRoZXkgY2FuJ3QgYmUgcGxhY2VkIGluIHNlcGFyYXRlIGZpbGVzLCBkdWVcbi8vIHRvIHJlc3VsdGluZyB0cm91YmxlIHdpdGggY2lyY3VsYXIgaW1wb3J0cy5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gV2Ugd2FudGVkIG11bHRpcGxlIGluaGVyaXRhbmNlLCBlLmcuXG4vLyAgIGNsYXNzIFNwbGl0SXRlcmF0b3IgZXh0ZW5kcyBRdWV1ZUl0ZXJhdG9yPHN0cmluZz4sIFN0cmluZ0l0ZXJhdG9yXG4vLyBidXQgdGhlIFR5cGVTY3JpcHQgbWl4aW4gYXBwcm9hY2ggaXMgYSBiaXQgaGFja3ksIHNvIHdlIHRha2UgdGhpcyBhZGFwdGVyXG4vLyBhcHByb2FjaCBpbnN0ZWFkLlxuXG5jbGFzcyBTcGxpdEl0ZXJhdG9yIGV4dGVuZHMgU3RyaW5nSXRlcmF0b3Ige1xuICBwcml2YXRlIGltcGw6IFNwbGl0SXRlcmF0b3JJbXBsO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB1cHN0cmVhbTogTGF6eUl0ZXJhdG9yPHN0cmluZz4sIHNlcGFyYXRvcjogc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmltcGwgPSBuZXcgU3BsaXRJdGVyYXRvckltcGwodXBzdHJlYW0sIHNlcGFyYXRvcik7XG4gIH1cblxuICBzdW1tYXJ5KCkge1xuICAgIHJldHVybiB0aGlzLmltcGwuc3VtbWFyeSgpO1xuICB9XG5cbiAgYXN5bmMgbmV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXBsLm5leHQoKTtcbiAgfVxufVxuXG5jbGFzcyBTcGxpdEl0ZXJhdG9ySW1wbCBleHRlbmRzIE9uZVRvTWFueUl0ZXJhdG9yPHN0cmluZz4ge1xuICAvLyBBIHBhcnRpYWwgc3RyaW5nIGF0IHRoZSBlbmQgb2YgYW4gdXBzdHJlYW0gY2h1bmtcbiAgY2FycnlvdmVyID0gJyc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBwcm90ZWN0ZWQgdXBzdHJlYW06IExhenlJdGVyYXRvcjxzdHJpbmc+LCBwcm90ZWN0ZWQgc2VwYXJhdG9yOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgc3VtbWFyeSgpIHtcbiAgICByZXR1cm4gYCR7dGhpcy51cHN0cmVhbS5zdW1tYXJ5KCl9IC0+IFNwbGl0KCcke3RoaXMuc2VwYXJhdG9yfScpYDtcbiAgfVxuXG4gIGFzeW5jIHB1bXAoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgY2h1bmtSZXN1bHQgPSBhd2FpdCB0aGlzLnVwc3RyZWFtLm5leHQoKTtcbiAgICBpZiAoY2h1bmtSZXN1bHQuZG9uZSkge1xuICAgICAgaWYgKHRoaXMuY2FycnlvdmVyID09PSAnJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXRlbmQgdGhhdCB0aGUgcHVtcCBzdWNjZWVkZWQgaW4gb3JkZXIgdG8gZW1pdCB0aGUgc21hbGwgbGFzdCBiYXRjaC5cbiAgICAgIC8vIFRoZSBuZXh0IHB1bXAoKSBjYWxsIHdpbGwgYWN0dWFsbHkgZmFpbC5cbiAgICAgIHRoaXMub3V0cHV0UXVldWUucHVzaCh0aGlzLmNhcnJ5b3Zlcik7XG4gICAgICB0aGlzLmNhcnJ5b3ZlciA9ICcnO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGxpbmVzID0gY2h1bmtSZXN1bHQudmFsdWUuc3BsaXQodGhpcy5zZXBhcmF0b3IpIGFzIHN0cmluZ1tdO1xuICAgIC8vIE5vdGUgdGhlIGJlaGF2aW9yOiBcIiBhYiBcIi5zcGxpdCgnICcpID09PSBbJycsICdhYicsICcnXVxuICAgIC8vIFRodXMgdGhlIGNhcnJ5b3ZlciBtYXkgYmUgJycgaWYgdGhlIHNlcGFyYXRvciBmYWxscyBvbiBhIGNodW5rXG4gICAgLy8gYm91bmRhcnk7IHRoaXMgcHJvZHVjZXMgdGhlIGNvcnJlY3QgcmVzdWx0LlxuXG4gICAgbGluZXNbMF0gPSB0aGlzLmNhcnJ5b3ZlciArIGxpbmVzWzBdO1xuICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcy5zbGljZSgwLCAtMSkpIHtcbiAgICAgIHRoaXMub3V0cHV0UXVldWUucHVzaChsaW5lKTtcbiAgICB9XG4gICAgdGhpcy5jYXJyeW92ZXIgPSBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nimport { StringIterator } from './string_iterator';\nexport class ByteChunkIterator extends LazyIterator {\n    /**\n     * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n     *\n     * The byte arrays producetd from the ByteChunkIterator on which this is\n     * called will be interpreted as concatenated.  No assumptions are made about\n     * the boundaries of the incoming chunks, so a multi-byte UTF8 encoding of a\n     * character may span the boundary between chunks.  This naturally happens,\n     * for instance, when reading fixed-size byte arrays from a file.\n     */\n    decodeUTF8() {\n        return new Utf8Iterator(this);\n    }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on ByteChunkIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class Utf8Iterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass Utf8Iterator extends StringIterator {\n    constructor(upstream) {\n        super();\n        this.upstream = upstream;\n        this.impl = new Utf8IteratorImpl(upstream);\n    }\n    summary() {\n        return this.impl.summary();\n    }\n    async next() {\n        return this.impl.next();\n    }\n}\n/**\n * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n *\n * This is tricky because the incoming byte array boundaries may disrupt a\n * multi-byte UTF8 character. Thus any incomplete character data at the end of\n * a chunk must be carried over and prepended to the next chunk before\n * decoding. Luckily with native decoder, TextDecoder in browser and\n * string_decoder in node, byte array boundaries are handled automatically.\n *\n * In the context of an input pipeline for machine learning, UTF8 decoding is\n * needed to parse text files containing training examples or prediction\n * requests (e.g., formatted as CSV or JSON). We cannot use the built-in\n * decoding provided by FileReader.readAsText() because here we are in a\n * streaming context, which FileReader does not support.\n *\n * @param upstream A `LazyIterator` of `Uint8Arrays` containing UTF8-encoded\n *   text, which should be interpreted as concatenated.  No assumptions are\n *   made about the boundaries of the incoming chunks, so a multi-byte UTF8\n *   encoding of a character may span the boundary between chunks.  This\n *   naturally happens, for instance, when reading fixed-size byte arrays from a\n *   file.\n */\nclass Utf8IteratorImpl extends OneToManyIterator {\n    constructor(upstream) {\n        super();\n        this.upstream = upstream;\n        if (env().get('IS_BROWSER')) {\n            this.decoder = new TextDecoder('utf-8');\n        }\n        else {\n            // tslint:disable-next-line:no-require-imports\n            const { StringDecoder } = require('string_decoder');\n            this.decoder = new StringDecoder('utf8');\n        }\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Utf8`;\n    }\n    async pump() {\n        const chunkResult = await this.upstream.next();\n        let chunk;\n        if (chunkResult.done) {\n            return false;\n        }\n        else {\n            chunk = chunkResult.value;\n        }\n        let text;\n        if (env().get('IS_BROWSER')) {\n            text = this.decoder.decode(chunk, { stream: true });\n        }\n        else {\n            text = this.decoder.write(Buffer.from(chunk.buffer));\n        }\n        this.outputQueue.push(text);\n        return true;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n// inspired by https://github.com/maxogden/filereader-stream\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { ByteChunkIterator } from './byte_chunk_iterator';\n/**\n * Provide a stream of chunks from a File, Blob, or Uint8Array.\n * @param file The source File, Blob or Uint8Array.\n * @param options Optional settings controlling file reading.\n * @returns a lazy Iterator of Uint8Arrays containing sequential chunks of the\n *   input File, Blob or Uint8Array.\n */\nexport class FileChunkIterator extends ByteChunkIterator {\n    constructor(file, options = {}) {\n        super();\n        this.file = file;\n        this.options = options;\n        util.assert((file instanceof Uint8Array) ||\n            (env().get('IS_BROWSER') ?\n                (file instanceof File || file instanceof Blob) :\n                false), () => 'FileChunkIterator only supports File, Blob and Uint8Array ' +\n            'right now.');\n        this.offset = options.offset || 0;\n        // default 1MB chunk has tolerable perf on large files\n        this.chunkSize = options.chunkSize || 1024 * 1024;\n    }\n    summary() {\n        return `FileChunks ${this.file}`;\n    }\n    async next() {\n        if (this.offset >= ((this.file instanceof Uint8Array) ?\n            this.file.byteLength :\n            this.file.size)) {\n            return { value: null, done: true };\n        }\n        const chunk = new Promise((resolve, reject) => {\n            const end = this.offset + this.chunkSize;\n            if (this.file instanceof Uint8Array) {\n                // Note if end > this.uint8Array.byteLength, we just get a small last\n                // chunk.\n                resolve(new Uint8Array(this.file.slice(this.offset, end)));\n            }\n            else {\n                // This branch assumes that this.file type is File or Blob, which\n                // means it is in the browser environment.\n                // TODO(soergel): is this a performance issue?\n                const fileReader = new FileReader();\n                fileReader.onload = (event) => {\n                    let data = fileReader.result;\n                    // Not sure we can trust the return type of\n                    // FileReader.readAsArrayBuffer See e.g.\n                    // https://github.com/node-file-api/FileReader/issues/2\n                    if (data instanceof ArrayBuffer) {\n                        data = new Uint8Array(data);\n                    }\n                    if (!(data instanceof Uint8Array)) {\n                        return reject(new TypeError('FileReader returned unknown type.'));\n                    }\n                    resolve(data);\n                };\n                fileReader.onabort = (event) => {\n                    return reject(new Error('Aborted'));\n                };\n                fileReader.onerror = (event) => {\n                    return reject(new Error(event.type));\n                };\n                // TODO(soergel): better handle onabort, onerror\n                // Note if end > this.file.size, we just get a small last chunk.\n                const slice = this.file.slice(this.offset, end);\n                // We can't use readAsText here (even if we know the file is text)\n                // because the slice boundary may fall within a multi-byte character.\n                fileReader.readAsArrayBuffer(slice);\n            }\n            this.offset = end;\n        });\n        return { value: (await chunk), done: false };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FileChunkIterator } from './file_chunk_iterator';\n/**\n * Provide a stream of chunks from a URL.\n *\n * Note this class first downloads the entire file into memory before providing\n * the first element from the stream.  This is because the Fetch API does not\n * yet reliably provide a reader stream for the response body.\n */\nexport async function urlChunkIterator(url, options = {}, fetchFunc) {\n    let urlString;\n    let requestInit;\n    if ((typeof url) === 'string') {\n        urlString = url;\n    }\n    else {\n        urlString = url.url;\n        requestInit = getRequestInitFromRequest(url);\n    }\n    const response = await (fetchFunc || util.fetch)(urlString, requestInit);\n    if (response.ok) {\n        const uint8Array = new Uint8Array(await response.arrayBuffer());\n        return new FileChunkIterator(uint8Array, options);\n    }\n    else {\n        throw new Error(response.statusText);\n    }\n}\n// Generate RequestInit from Request to match tf.util.fetch signature.\nconst getRequestInitFromRequest = (request) => {\n    const init = {\n        method: request.method,\n        headers: request.headers,\n        body: request.body,\n        mode: request.mode,\n        credentials: request.credentials,\n        cache: request.cache,\n        redirect: request.redirect,\n        referrer: request.referrer,\n        integrity: request.integrity,\n    };\n    return init;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsX2NodW5rX2l0ZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1kYXRhL3NyYy9pdGVyYXRvcnMvdXJsX2NodW5rX2l0ZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBRUgsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQzNDLE9BQU8sRUFBQyxpQkFBaUIsRUFBMkIsTUFBTSx1QkFBdUIsQ0FBQztBQUVsRjs7Ozs7O0dBTUc7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLGdCQUFnQixDQUNsQyxHQUFnQixFQUFFLFVBQW9DLEVBQUUsRUFDeEQsU0FBb0I7SUFDdEIsSUFBSSxTQUFTLENBQUM7SUFDZCxJQUFJLFdBQVcsQ0FBQztJQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7UUFDN0IsU0FBUyxHQUFHLEdBQWEsQ0FBQztLQUMzQjtTQUFNO1FBQ0wsU0FBUyxHQUFJLEdBQWUsQ0FBQyxHQUFHLENBQUM7UUFDakMsV0FBVyxHQUFHLHlCQUF5QixDQUFDLEdBQWMsQ0FBQyxDQUFDO0tBQ3pEO0lBQ0QsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3pFLElBQUksUUFBUSxDQUFDLEVBQUUsRUFBRTtRQUNmLE1BQU0sVUFBVSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDaEUsT0FBTyxJQUFJLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNuRDtTQUFNO1FBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDdEM7QUFDSCxDQUFDO0FBRUQsc0VBQXNFO0FBQ3RFLE1BQU0seUJBQXlCLEdBQUcsQ0FBQyxPQUFnQixFQUFFLEVBQUU7SUFDckQsTUFBTSxJQUFJLEdBQUc7UUFDWCxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07UUFDdEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO1FBQ3hCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtRQUNsQixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7UUFDbEIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO1FBQ2hDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztRQUNwQixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7UUFDMUIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO1FBQzFCLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUztLQUM3QixDQUFDO0lBQ0YsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge3V0aWx9IGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG5pbXBvcnQge0ZpbGVDaHVua0l0ZXJhdG9yLCBGaWxlQ2h1bmtJdGVyYXRvck9wdGlvbnN9IGZyb20gJy4vZmlsZV9jaHVua19pdGVyYXRvcic7XG5cbi8qKlxuICogUHJvdmlkZSBhIHN0cmVhbSBvZiBjaHVua3MgZnJvbSBhIFVSTC5cbiAqXG4gKiBOb3RlIHRoaXMgY2xhc3MgZmlyc3QgZG93bmxvYWRzIHRoZSBlbnRpcmUgZmlsZSBpbnRvIG1lbW9yeSBiZWZvcmUgcHJvdmlkaW5nXG4gKiB0aGUgZmlyc3QgZWxlbWVudCBmcm9tIHRoZSBzdHJlYW0uICBUaGlzIGlzIGJlY2F1c2UgdGhlIEZldGNoIEFQSSBkb2VzIG5vdFxuICogeWV0IHJlbGlhYmx5IHByb3ZpZGUgYSByZWFkZXIgc3RyZWFtIGZvciB0aGUgcmVzcG9uc2UgYm9keS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVybENodW5rSXRlcmF0b3IoXG4gICAgdXJsOiBSZXF1ZXN0SW5mbywgb3B0aW9uczogRmlsZUNodW5rSXRlcmF0b3JPcHRpb25zID0ge30sXG4gICAgZmV0Y2hGdW5jPzogRnVuY3Rpb24pIHtcbiAgbGV0IHVybFN0cmluZztcbiAgbGV0IHJlcXVlc3RJbml0O1xuICBpZiAoKHR5cGVvZiB1cmwpID09PSAnc3RyaW5nJykge1xuICAgIHVybFN0cmluZyA9IHVybCBhcyBzdHJpbmc7XG4gIH0gZWxzZSB7XG4gICAgdXJsU3RyaW5nID0gKHVybCBhcyBSZXF1ZXN0KS51cmw7XG4gICAgcmVxdWVzdEluaXQgPSBnZXRSZXF1ZXN0SW5pdEZyb21SZXF1ZXN0KHVybCBhcyBSZXF1ZXN0KTtcbiAgfVxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IChmZXRjaEZ1bmMgfHwgdXRpbC5mZXRjaCkodXJsU3RyaW5nLCByZXF1ZXN0SW5pdCk7XG4gIGlmIChyZXNwb25zZS5vaykge1xuICAgIGNvbnN0IHVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpKTtcbiAgICByZXR1cm4gbmV3IEZpbGVDaHVua0l0ZXJhdG9yKHVpbnQ4QXJyYXksIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgfVxufVxuXG4vLyBHZW5lcmF0ZSBSZXF1ZXN0SW5pdCBmcm9tIFJlcXVlc3QgdG8gbWF0Y2ggdGYudXRpbC5mZXRjaCBzaWduYXR1cmUuXG5jb25zdCBnZXRSZXF1ZXN0SW5pdEZyb21SZXF1ZXN0ID0gKHJlcXVlc3Q6IFJlcXVlc3QpID0+IHtcbiAgY29uc3QgaW5pdCA9IHtcbiAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycyxcbiAgICBib2R5OiByZXF1ZXN0LmJvZHksXG4gICAgbW9kZTogcmVxdWVzdC5tb2RlLFxuICAgIGNyZWRlbnRpYWxzOiByZXF1ZXN0LmNyZWRlbnRpYWxzLFxuICAgIGNhY2hlOiByZXF1ZXN0LmNhY2hlLFxuICAgIHJlZGlyZWN0OiByZXF1ZXN0LnJlZGlyZWN0LFxuICAgIHJlZmVycmVyOiByZXF1ZXN0LnJlZmVycmVyLFxuICAgIGludGVncml0eTogcmVxdWVzdC5pbnRlZ3JpdHksXG4gIH07XG4gIHJldHVybiBpbml0O1xufTtcbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n// Skip tslint any type check cause this method is aiming to check type of\n// input.\n// tslint:disable-next-line:no-any\nexport function isLocalPath(source) {\n    return (typeof source === 'string') && source.slice(0, 7) === 'file://';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlX3V0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWRhdGEvc3JjL3V0aWwvc291cmNlX3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFFSCwwRUFBMEU7QUFDMUUsU0FBUztBQUNULGtDQUFrQztBQUNsQyxNQUFNLFVBQVUsV0FBVyxDQUFDLE1BQVc7SUFDckMsT0FBTyxDQUFDLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQztBQUMxRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuLy8gU2tpcCB0c2xpbnQgYW55IHR5cGUgY2hlY2sgY2F1c2UgdGhpcyBtZXRob2QgaXMgYWltaW5nIHRvIGNoZWNrIHR5cGUgb2Zcbi8vIGlucHV0LlxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9jYWxQYXRoKHNvdXJjZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpICYmIHNvdXJjZS5zbGljZSgwLCA3KSA9PT0gJ2ZpbGU6Ly8nO1xufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { DataSource } from '../datasource';\nimport { FileChunkIterator } from '../iterators/file_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\nexport class FileDataSource extends DataSource {\n    /**\n     * Create a `FileDataSource`.\n     *\n     * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n     *     read. Local file only works in node environment.\n     * @param options Options passed to the underlying `FileChunkIterator`s,\n     *   such as {chunksize: 1024}.\n     */\n    constructor(input, options = {}) {\n        super();\n        this.input = input;\n        this.options = options;\n    }\n    async iterator() {\n        if (isLocalPath(this.input) && env().get('IS_NODE')) {\n            // tslint:disable-next-line:no-require-imports\n            const fs = require('fs');\n            this.input = fs.readFileSync(this.input.slice(7));\n        }\n        // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n        // with file in browser.\n        return new FileChunkIterator(this.input, this.options);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZV9kYXRhX3NvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtZGF0YS9zcmMvc291cmNlcy9maWxlX2RhdGFfc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBRUgsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQzFDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFDLGlCQUFpQixFQUEyQixNQUFNLGtDQUFrQyxDQUFDO0FBRTdGLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUVoRDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sY0FBZSxTQUFRLFVBQVU7SUFDNUM7Ozs7Ozs7T0FPRztJQUNILFlBQ2MsS0FBeUIsRUFDaEIsVUFBb0MsRUFBRTtRQUMzRCxLQUFLLEVBQUUsQ0FBQztRQUZJLFVBQUssR0FBTCxLQUFLLENBQW9CO1FBQ2hCLFlBQU8sR0FBUCxPQUFPLENBQStCO0lBRTdELENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUTtRQUNaLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDbkQsOENBQThDO1lBQzlDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUUsSUFBSSxDQUFDLEtBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDL0Q7UUFDRCx5RUFBeUU7UUFDekUsd0JBQXdCO1FBQ3hCLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBb0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEUsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtlbnZ9IGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG5pbXBvcnQge0RhdGFTb3VyY2V9IGZyb20gJy4uL2RhdGFzb3VyY2UnO1xuaW1wb3J0IHtCeXRlQ2h1bmtJdGVyYXRvcn0gZnJvbSAnLi4vaXRlcmF0b3JzL2J5dGVfY2h1bmtfaXRlcmF0b3InO1xuaW1wb3J0IHtGaWxlQ2h1bmtJdGVyYXRvciwgRmlsZUNodW5rSXRlcmF0b3JPcHRpb25zfSBmcm9tICcuLi9pdGVyYXRvcnMvZmlsZV9jaHVua19pdGVyYXRvcic7XG5pbXBvcnQge0ZpbGVFbGVtZW50fSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge2lzTG9jYWxQYXRofSBmcm9tICcuLi91dGlsL3NvdXJjZV91dGlsJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgZmlsZSwgYmxvYiwgb3IgVWludDhBcnJheSByZWFkYWJsZSBhcyBhIHN0cmVhbSBvZiBiaW5hcnkgZGF0YVxuICogY2h1bmtzLlxuICovXG5leHBvcnQgY2xhc3MgRmlsZURhdGFTb3VyY2UgZXh0ZW5kcyBEYXRhU291cmNlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIGBGaWxlRGF0YVNvdXJjZWAuXG4gICAqXG4gICAqIEBwYXJhbSBpbnB1dCBMb2NhbCBmaWxlIHBhdGgsIG9yIGBGaWxlYC9gQmxvYmAvYFVpbnQ4QXJyYXlgIG9iamVjdCB0b1xuICAgKiAgICAgcmVhZC4gTG9jYWwgZmlsZSBvbmx5IHdvcmtzIGluIG5vZGUgZW52aXJvbm1lbnQuXG4gICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgcGFzc2VkIHRvIHRoZSB1bmRlcmx5aW5nIGBGaWxlQ2h1bmtJdGVyYXRvcmBzLFxuICAgKiAgIHN1Y2ggYXMge2NodW5rc2l6ZTogMTAyNH0uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHByb3RlY3RlZCBpbnB1dDogRmlsZUVsZW1lbnR8c3RyaW5nLFxuICAgICAgcHJvdGVjdGVkIHJlYWRvbmx5IG9wdGlvbnM6IEZpbGVDaHVua0l0ZXJhdG9yT3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGFzeW5jIGl0ZXJhdG9yKCk6IFByb21pc2U8Qnl0ZUNodW5rSXRlcmF0b3I+IHtcbiAgICBpZiAoaXNMb2NhbFBhdGgodGhpcy5pbnB1dCkgJiYgZW52KCkuZ2V0KCdJU19OT0RFJykpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1yZXF1aXJlLWltcG9ydHNcbiAgICAgIGNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbiAgICAgIHRoaXMuaW5wdXQgPSBmcy5yZWFkRmlsZVN5bmMoKHRoaXMuaW5wdXQgYXMgc3RyaW5nKS5zbGljZSg3KSk7XG4gICAgfVxuICAgIC8vIFRPRE8oa2FuZ3lpemhhbmcpOiBBZGQgTG9jYWxGaWxlQ2h1bmtJdGVyYXRvciB0byBzcGxpdCBsb2NhbCBzdHJlYW1pbmdcbiAgICAvLyB3aXRoIGZpbGUgaW4gYnJvd3Nlci5cbiAgICByZXR1cm4gbmV3IEZpbGVDaHVua0l0ZXJhdG9yKHRoaXMuaW5wdXQgYXMgRmlsZUVsZW1lbnQsIHRoaXMub3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { DataSource } from '../datasource';\nimport { urlChunkIterator } from '../iterators/url_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\nimport { FileDataSource } from './file_data_source';\n/*\n * Represents a URL readable as a stream of binary data chunks.\n */\nexport class URLDataSource extends DataSource {\n    /**\n     * Create a `URLDataSource`.\n     *\n     * @param url A source URL string, or a `Request` object.\n     * @param options Options passed to the underlying `FileChunkIterator`s,\n     *   such as {chunksize: 1024}.\n     */\n    constructor(url, fileOptions = {}) {\n        super();\n        this.url = url;\n        this.fileOptions = fileOptions;\n    }\n    // TODO(soergel): provide appropriate caching options.  Currently this\n    // will download the URL anew for each call to iterator().  Since we have\n    // to treat the downloaded file as a blob/buffer anyway, we may as well retain\n    // it-- but that raises GC issues.  Also we may want a persistent disk cache.\n    async iterator() {\n        if (isLocalPath(this.url)) {\n            return (new FileDataSource(this.url, this.fileOptions))\n                .iterator();\n        }\n        else {\n            return urlChunkIterator(this.url, this.fileOptions);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsX2RhdGFfc291cmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1kYXRhL3NyYy9zb3VyY2VzL3VybF9kYXRhX3NvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUVILE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHekMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDakUsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVsRDs7R0FFRztBQUNILE1BQU0sT0FBTyxhQUFjLFNBQVEsVUFBVTtJQUMzQzs7Ozs7O09BTUc7SUFDSCxZQUN1QixHQUFnQixFQUNoQixjQUF3QyxFQUFFO1FBQy9ELEtBQUssRUFBRSxDQUFDO1FBRmEsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQUNoQixnQkFBVyxHQUFYLFdBQVcsQ0FBK0I7SUFFakUsQ0FBQztJQUVELHNFQUFzRTtJQUN0RSx5RUFBeUU7SUFDekUsOEVBQThFO0lBQzlFLDZFQUE2RTtJQUM3RSxLQUFLLENBQUMsUUFBUTtRQUNaLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN6QixPQUFPLENBQUMsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQWEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7aUJBQzVELFFBQVEsRUFBRSxDQUFDO1NBQ2pCO2FBQU07WUFDTCxPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3JEO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtEYXRhU291cmNlfSBmcm9tICcuLi9kYXRhc291cmNlJztcbmltcG9ydCB7Qnl0ZUNodW5rSXRlcmF0b3J9IGZyb20gJy4uL2l0ZXJhdG9ycy9ieXRlX2NodW5rX2l0ZXJhdG9yJztcbmltcG9ydCB7RmlsZUNodW5rSXRlcmF0b3JPcHRpb25zfSBmcm9tICcuLi9pdGVyYXRvcnMvZmlsZV9jaHVua19pdGVyYXRvcic7XG5pbXBvcnQge3VybENodW5rSXRlcmF0b3J9IGZyb20gJy4uL2l0ZXJhdG9ycy91cmxfY2h1bmtfaXRlcmF0b3InO1xuaW1wb3J0IHtpc0xvY2FsUGF0aH0gZnJvbSAnLi4vdXRpbC9zb3VyY2VfdXRpbCc7XG5pbXBvcnQge0ZpbGVEYXRhU291cmNlfSBmcm9tICcuL2ZpbGVfZGF0YV9zb3VyY2UnO1xuXG4vKlxuICogUmVwcmVzZW50cyBhIFVSTCByZWFkYWJsZSBhcyBhIHN0cmVhbSBvZiBiaW5hcnkgZGF0YSBjaHVua3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBVUkxEYXRhU291cmNlIGV4dGVuZHMgRGF0YVNvdXJjZSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBgVVJMRGF0YVNvdXJjZWAuXG4gICAqXG4gICAqIEBwYXJhbSB1cmwgQSBzb3VyY2UgVVJMIHN0cmluZywgb3IgYSBgUmVxdWVzdGAgb2JqZWN0LlxuICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHBhc3NlZCB0byB0aGUgdW5kZXJseWluZyBgRmlsZUNodW5rSXRlcmF0b3JgcyxcbiAgICogICBzdWNoIGFzIHtjaHVua3NpemU6IDEwMjR9LlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgdXJsOiBSZXF1ZXN0SW5mbyxcbiAgICAgIHByb3RlY3RlZCByZWFkb25seSBmaWxlT3B0aW9uczogRmlsZUNodW5rSXRlcmF0b3JPcHRpb25zID0ge30pIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLy8gVE9ETyhzb2VyZ2VsKTogcHJvdmlkZSBhcHByb3ByaWF0ZSBjYWNoaW5nIG9wdGlvbnMuICBDdXJyZW50bHkgdGhpc1xuICAvLyB3aWxsIGRvd25sb2FkIHRoZSBVUkwgYW5ldyBmb3IgZWFjaCBjYWxsIHRvIGl0ZXJhdG9yKCkuICBTaW5jZSB3ZSBoYXZlXG4gIC8vIHRvIHRyZWF0IHRoZSBkb3dubG9hZGVkIGZpbGUgYXMgYSBibG9iL2J1ZmZlciBhbnl3YXksIHdlIG1heSBhcyB3ZWxsIHJldGFpblxuICAvLyBpdC0tIGJ1dCB0aGF0IHJhaXNlcyBHQyBpc3N1ZXMuICBBbHNvIHdlIG1heSB3YW50IGEgcGVyc2lzdGVudCBkaXNrIGNhY2hlLlxuICBhc3luYyBpdGVyYXRvcigpOiBQcm9taXNlPEJ5dGVDaHVua0l0ZXJhdG9yPiB7XG4gICAgaWYgKGlzTG9jYWxQYXRoKHRoaXMudXJsKSkge1xuICAgICAgcmV0dXJuIChuZXcgRmlsZURhdGFTb3VyY2UodGhpcy51cmwgYXMgc3RyaW5nLCB0aGlzLmZpbGVPcHRpb25zKSlcbiAgICAgICAgICAuaXRlcmF0b3IoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVybENodW5rSXRlcmF0b3IodGhpcy51cmwsIHRoaXMuZmlsZU9wdGlvbnMpO1xuICAgIH1cbiAgfVxufVxuIl19","/** @license See the LICENSE file. */\n// This code is auto-generated, do not modify this file!\nconst version = '4.22.0';\nexport { version };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtZGF0YS9zcmMvdmVyc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxQ0FBcUM7QUFFckMsd0RBQXdEO0FBQ3hELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQztBQUN6QixPQUFPLEVBQUMsT0FBTyxFQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgU2VlIHRoZSBMSUNFTlNFIGZpbGUuICovXG5cbi8vIFRoaXMgY29kZSBpcyBhdXRvLWdlbmVyYXRlZCwgZG8gbm90IG1vZGlmeSB0aGlzIGZpbGUhXG5jb25zdCB2ZXJzaW9uID0gJzQuMjIuMCc7XG5leHBvcnQge3ZlcnNpb259O1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { datasetFromIteratorFn } from './dataset';\nimport { CSVDataset } from './datasets/csv_dataset';\nimport { iteratorFromFunction } from './iterators/lazy_iterator';\nimport { MicrophoneIterator } from './iterators/microphone_iterator';\nimport { WebcamIterator } from './iterators/webcam_iterator';\nimport { URLDataSource } from './sources/url_data_source';\n/**\n * Create a `CSVDataset` by reading and decoding CSV file(s) from provided URL\n * or local path if it's in Node environment.\n *\n * Note: If isLabel in columnConfigs is `true` for at least one column, the\n * element in returned `CSVDataset` will be an object of\n * `{xs:features, ys:labels}`: xs is a dict of features key/value pairs, ys\n * is a dict of labels key/value pairs. If no column is marked as label,\n * returns a dict of features only.\n *\n * ```js\n * const csvUrl =\n * 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';\n *\n * async function run() {\n *   // We want to predict the column \"medv\", which represents a median value of\n *   // a home (in $1000s), so we mark it as a label.\n *   const csvDataset = tf.data.csv(\n *     csvUrl, {\n *       columnConfigs: {\n *         medv: {\n *           isLabel: true\n *         }\n *       }\n *     });\n *\n *   // Number of features is the number of column names minus one for the label\n *   // column.\n *   const numOfFeatures = (await csvDataset.columnNames()).length - 1;\n *\n *   // Prepare the Dataset for training.\n *   const flattenedDataset =\n *     csvDataset\n *     .map(({xs, ys}) =>\n *       {\n *         // Convert xs(features) and ys(labels) from object form (keyed by\n *         // column name) to array form.\n *         return {xs:Object.values(xs), ys:Object.values(ys)};\n *       })\n *     .batch(10);\n *\n *   // Define the model.\n *   const model = tf.sequential();\n *   model.add(tf.layers.dense({\n *     inputShape: [numOfFeatures],\n *     units: 1\n *   }));\n *   model.compile({\n *     optimizer: tf.train.sgd(0.000001),\n *     loss: 'meanSquaredError'\n *   });\n *\n *   // Fit the model using the prepared Dataset\n *   return model.fitDataset(flattenedDataset, {\n *     epochs: 10,\n *     callbacks: {\n *       onEpochEnd: async (epoch, logs) => {\n *         console.log(epoch + ':' + logs.loss);\n *       }\n *     }\n *   });\n * }\n *\n * await run();\n * ```\n *\n * @param source URL or local path to get CSV file. If it's a local path, it\n * must have prefix `file://` and it only works in node environment.\n * @param csvConfig (Optional) A CSVConfig object that contains configurations\n *     of reading and decoding from CSV file(s).\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nexport function csv(source, csvConfig = {}) {\n    return new CSVDataset(new URLDataSource(source), csvConfig);\n}\n/**\n * Create a `Dataset` that produces each element by calling a provided function.\n *\n * Note that repeated iterations over this `Dataset` may produce different\n * results, because the function will be called anew for each element of each\n * iteration.\n *\n * Also, beware that the sequence of calls to this function may be out of order\n * in time with respect to the logical order of the Dataset. This is due to the\n * asynchronous lazy nature of stream processing, and depends on downstream\n * transformations (e.g. .shuffle()). If the provided function is pure, this is\n * no problem, but if it is a closure over a mutable state (e.g., a traversal\n * pointer), then the order of the produced elements may be scrambled.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const ds = tf.data.func(func);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param f A function that produces one data element on each call.\n */\nexport function func(f) {\n    const iter = iteratorFromFunction(f);\n    return datasetFromIteratorFn(async () => iter);\n}\n/**\n * Create a `Dataset` that produces each element from provided JavaScript\n * generator, which is a function that returns a (potentially async) iterator.\n *\n * For more information on iterators and generators, see\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators .\n * For the iterator protocol, see\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols .\n *\n * Example of creating a dataset from an iterator factory:\n * ```js\n * function makeIterator() {\n *   const numElements = 10;\n *   let index = 0;\n *\n *   const iterator = {\n *     next: () => {\n *       let result;\n *       if (index < numElements) {\n *         result = {value: index, done: false};\n *         index++;\n *         return result;\n *       }\n *       return {value: index, done: true};\n *     }\n *   };\n *   return iterator;\n * }\n * const ds = tf.data.generator(makeIterator);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * Example of creating a dataset from a generator:\n * ```js\n * function* dataGenerator() {\n *   const numElements = 10;\n *   let index = 0;\n *   while (index < numElements) {\n *     const x = index;\n *     index++;\n *     yield x;\n *   }\n * }\n *\n * const ds = tf.data.generator(dataGenerator);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param generator A JavaScript function that returns\n *     a (potentially async) JavaScript iterator.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nexport function generator(generator) {\n    return datasetFromIteratorFn(async () => {\n        const gen = await generator();\n        return iteratorFromFunction(() => gen.next());\n    });\n}\n/**\n * Create an iterator that generates `Tensor`s from webcam video stream. This\n * API only works in Browser environment when the device has webcam.\n *\n * Note: this code snippet only works when the device has a webcam. It will\n * request permission to open the webcam when running.\n * ```js\n * const videoElement = document.createElement('video');\n * videoElement.width = 100;\n * videoElement.height = 100;\n * const cam = await tf.data.webcam(videoElement);\n * const img = await cam.capture();\n * img.print();\n * cam.stop();\n * ```\n *\n * @param webcamVideoElement A `HTMLVideoElement` used to play video from\n *     webcam. If this element is not provided, a hidden `HTMLVideoElement` will\n *     be created. In that case, `resizeWidth` and `resizeHeight` must be\n *     provided to set the generated tensor shape.\n * @param webcamConfig A `WebcamConfig` object that contains configurations of\n *     reading and manipulating data from webcam video stream.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\nexport async function webcam(webcamVideoElement, webcamConfig) {\n    return WebcamIterator.create(webcamVideoElement, webcamConfig);\n}\n/**\n * Create an iterator that generates frequency-domain spectrogram `Tensor`s from\n * microphone audio stream with browser's native FFT. This API only works in\n * browser environment when the device has microphone.\n *\n * Note: this code snippet only works when the device has a microphone. It will\n * request permission to open the microphone when running.\n * ```js\n * const mic = await tf.data.microphone({\n *   fftSize: 1024,\n *   columnTruncateLength: 232,\n *   numFramesPerSpectrogram: 43,\n *   sampleRateHz:44100,\n *   includeSpectrogram: true,\n *   includeWaveform: true\n * });\n * const audioData = await mic.capture();\n * const spectrogramTensor = audioData.spectrogram;\n * spectrogramTensor.print();\n * const waveformTensor = audioData.waveform;\n * waveformTensor.print();\n * mic.stop();\n * ```\n *\n * @param microphoneConfig A `MicrophoneConfig` object that contains\n *     configurations of reading audio data from microphone.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\nexport async function microphone(microphoneConfig) {\n    return MicrophoneIterator.create(microphoneConfig);\n}\n//# sourceMappingURL=data:application/json;base64,","/** @license See the LICENSE file. */\n// This code is auto-generated, do not modify this file!\nconst version = '4.22.0';\nexport { version };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtYmFja2VuZC1jcHUvc3JjL3ZlcnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscUNBQXFDO0FBRXJDLHdEQUF3RDtBQUN4RCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUM7QUFDekIsT0FBTyxFQUFDLE9BQU8sRUFBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBsaWNlbnNlIFNlZSB0aGUgTElDRU5TRSBmaWxlLiAqL1xuXG4vLyBUaGlzIGNvZGUgaXMgYXV0by1nZW5lcmF0ZWQsIGRvIG5vdCBtb2RpZnkgdGhpcyBmaWxlIVxuY29uc3QgdmVyc2lvbiA9ICc0LjIyLjAnO1xuZXhwb3J0IHt2ZXJzaW9ufTtcbiJdfQ==","/** @license See the LICENSE file. */\n// This code is auto-generated, do not modify this file!\nconst version = '4.22.0';\nexport { version };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtYmFja2VuZC13ZWJnbC9zcmMvdmVyc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxQ0FBcUM7QUFFckMsd0RBQXdEO0FBQ3hELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQztBQUN6QixPQUFPLEVBQUMsT0FBTyxFQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgU2VlIHRoZSBMSUNFTlNFIGZpbGUuICovXG5cbi8vIFRoaXMgY29kZSBpcyBhdXRvLWdlbmVyYXRlZCwgZG8gbm90IG1vZGlmeSB0aGlzIGZpbGUhXG5jb25zdCB2ZXJzaW9uID0gJzQuMjIuMCc7XG5leHBvcnQge3ZlcnNpb259O1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport '@tensorflow/tfjs-core/dist/register_all_gradients';\n// tslint:disable-next-line: no-imports-from-dist\nimport '@tensorflow/tfjs-core/dist/public/chained_ops/register_all_chained_ops';\nexport * from '@tensorflow/tfjs-core';\nexport * from '@tensorflow/tfjs-layers';\nexport * from '@tensorflow/tfjs-converter';\n// Export data api as tf.data\nimport * as data from '@tensorflow/tfjs-data';\nexport { data };\n// Import and register backends.\nexport * from '@tensorflow/tfjs-backend-cpu';\nexport * from '@tensorflow/tfjs-backend-webgl';\n// Import versions of all sub-packages.\nimport { version_core } from '@tensorflow/tfjs-core';\nimport { version_cpu } from '@tensorflow/tfjs-backend-cpu';\nimport { version_webgl } from '@tensorflow/tfjs-backend-webgl';\nimport { version_data } from '@tensorflow/tfjs-data';\nimport { version_layers } from '@tensorflow/tfjs-layers';\nimport { version_converter } from '@tensorflow/tfjs-converter';\nimport { version as version_union } from './version';\nexport const version = {\n    'tfjs-core': version_core,\n    'tfjs-backend-cpu': version_cpu,\n    'tfjs-backend-webgl': version_webgl,\n    'tfjs-data': version_data,\n    'tfjs-layers': version_layers,\n    'tfjs-converter': version_converter,\n    'tfjs': version_union\n};\n//# sourceMappingURL=index.js.map","/** @license See the LICENSE file. */\n// This code is auto-generated, do not modify this file!\nconst version = '4.22.0';\nexport { version };\n//# sourceMappingURL=version.js.map"],"names":["addN","op","addN_","tensors","util.assert","Array","isArray","length","$tensors","map","t","i","convertToTensor","firstTensor","forEach","dtype","Error","util.arraysEqual","shape","inputs","ENGINE","runKernel","AddN","basicLSTMCell","basicLSTMCell_","forgetBias","lstmKernel","lstmBias","data","c","h","$forgetBias","$lstmKernel","$lstmBias","$data","$c","$h","combined","concat","weighted","matMul","res","add","batchSize","sliceCols","sliceSize","slice","j","f","o","newC","mul","sigmoid","tanh","bitwiseAnd","bitwiseAnd_","x","y","$x","$y","arraysEqual","a","b","BitwiseAnd","broadcastArgs","broadcastArgs_","s0","s1","shape1Input","shape2Input","rank","BroadcastArgs","diag","diag_","Diag","ensureShape","ensureShape_","arraysEqualWithNull","linspace","start","stop","num","attrs","LinSpace","INT32_MAX","searchSorted","searchSorted_","sortedSequence","values","side","$sortedSequence","$values","sequenceSize","valuesSize","$sortedSequence2D","reshape","$values2D","sizeFromShape","SearchSorted","lowerBound","maxPoolWithArgmax","maxPoolWithArgmax_","filterSize","strides","pad","includeBatchInIndex","result","MaxPoolWithArgmax","indexes","meshgrid","indexing","TypeError","Tensor","w","ones","multiRNNCell","multiRNNCell_","lstmCells","convertToTensorArray","input","newStates","output","push","newH","multinomial","multinomial_","logits","numSamples","seed","normalized","$logits","numOutcomes","size","origRank","Math","random","Multinomial","outerProduct","outerProduct_","v1","v2","$v1","$v2","v12D","v22D","pad1d","pad1d_","paddings","constantValue","assert","pad2d","pad2d_","pad3d","pad3d_","pad4d","pad4d_","raggedGather","raggedGather_","paramsNestedSplits","paramsDenseValues","indices","outputRaggedRank","RaggedGather","outputNestedSplits","outputDenseValues","raggedRange","raggedRange_","starts","limits","deltas","$starts","RaggedRange","rtNestedSplits","rtDenseValues","raggedTensorToTensor","raggedTensorToTensor_","defaultValue","rowPartitionTensors","rowPartitionTypes","$shape","RaggedTensorToTensor","rand","rand_","randFunction","assertNonNegativeIntegerDimensions","Float32Array","Int32Array","Uint8Array","makeTensor","testEpsilon","backend","floatPrecision","expectArraysPredicate","actual","expected","predicate","checkClassType","isTypedArray","aType","constructor","name","bType","actualShape","inferShape","expectedShape","actualFlat","flatten","expectedFlat","e","expect","nothing","areClose","epsilon","isFinite","isNaN","abs","source","video","document","createElement","playsInline","muted","loop","style","position","left","top","preload","appendChild","Promise","resolve","addEventListener","_","load","encodeStrings","val","encodeString","actualArray","expectedArray","exp","isString","fn","done","then","fail","low","high","__async","this","play","requestVideoFrameCallback","randomGamma","randomGamma_","alpha","beta","rgamma","RandGamma","buffer","nextValue","toTensor","randomStandardNormal","randomStandardNormal_","randomNormal","randomUniformInt","randomUniformInt_","minval","maxval","randomUniform","reverse1d","reverse1d_","reverse","reverse2d","reverse2d_","axis","reverse3d","reverse3d_","reverse4d","reverse4d_","setdiff1dAsync","xVals","yVals","ySet","Set","outputSize","has","TensorBuffer","p","tensor3d","assertNonNull","inferredShape","tensor4d","tensor5d","tensor6d","tensorScatterUpdate","tensorScatterUpdate_","tensor","updates","$tensor","$indices","$updates","validateInput$1","TensorScatterUpdate","upperBound","whereAsync","condition","$condition","vals","whereImpl","dispose","booleanMaskAsync","mask","$mask","axisFrom","maskDim","tensorShape","assertShapesMatch","leadingSize","targetTensorShape","reshapedTensor","reshapedMask","positivePositions","squeeze","gather","movingAverage","movingAverage_","v","decay","step","zeroDebias","$v","$decay","assertTypesMatch","one","scalar","oneMinusDecay","sub","update","$step","div","pow","scatterND","scatterND_","ScatterNd","sparseToDense","sparseToDense_","sparseIndices","sparseValues","outputShape","$sparseIndices","$sparseValues","$defaultValue","defaultValues","numElems","numDims","numValues","validateInput","SparseToDense","gatherND","gatherND_","params","GatherNd","inTopKAsync","predictions","targets","k","$predictions","$targets","lastDim","predictionsVals","targetsVals","batch","precision","getTypedArrayFromDType","offset","subarray","valAndInd","value","index","sort","depthwiseConv2d","fusedDepthwiseConv2d_","filter","dataFormat","dilations","dimRoundingMode","bias","activation","preluActivationWeights","leakyreluAlpha","shouldFuse","state","gradientDepth","unfusedDepthwiseConv2d","applyActivation","$filter","x4D","reshapedTo4D","conv_util.eitherStridesOrDilationsAreOne","checkPadOnDimRoundingMode","convInfo","conv_util.computeConv2DInfo","$bias","$preluActivationWeights","makeTypesMatch","assertAndGetBroadcastShape","outShape","grad","dy","saved","conv_util.tupleValuesAreOne","dyActivation","getFusedDyActivation","xDer","depthwiseConv2dNativeBackpropInput","filterDer","depthwiseConv2dNativeBackpropFilter","getFusedBiasGradient","customGrad","save","FusedDepthwiseConv2D","gradFunc","customOp","customOpWithBias","defer","setTimeout","BrowserDownloads","fileNamePrefix","env","getBool","startsWith","URL_SCHEME","modelJsonFileName","weightDataFileName","modelArtifacts","weightBuffer","CompositeArrayBuffer","join","weightData","weightsURL","window","URL","createObjectURL","Blob","type","modelTopology","ArrayBuffer","weightsManifest","paths","weights","weightSpecs","modelJSON","getModelJSONForModelArtifacts","modelJsonURL","JSON","stringify","jsonAnchor","modelJsonAnchor","download","href","dispatchEvent","MouseEvent","weightDataAnchor","modelArtifactsInfo","getModelArtifactsInfoForJSON","BrowserFiles","files","jsonFile","weightsFiles","reject","jsonReader","FileReader","onload","event","parse","target","modelArtifactsPromise","getModelArtifactsForJSON","loadWeights","onerror","error","readAsText","entry","pathToFile","checkManifestAndWeightFiles","promises","path","loadWeightsFile","all","buffers","file","weightFileReader","readAsArrayBuffer","manifest","basenames","fileNames","basename","group","pathBasename","indexOf","IORouterRegistry","registerSaveRouter","url","browserDownloads","PassthroughLoader","PassthroughSaver","saveHandler","PassthroughAsync","handler","fromMemorySync","trainingConfig","arguments","console","warn","confusionMatrix","confusionMatrix_","labels","numClasses","$labels","Number","isInteger","oneHotLabels","oneHot","cast","oneHotPredictions","oneHotLabelsT","transpose","product","fromPixels2DContext","hasToPixelsWarned","fromPixels_","pixels","numChannels","isPixelData","isImageData","isVideo","isImage","isCanvasLike","isImageBitmap","ImageData","HTMLVideoElement","HTMLImageElement","getContext","ImageBitmap","getKernel","FromPixels","backendName","width","height","videoWidth","videoHeight","getImageData","OffscreenCanvas","OffscreenCanvasRenderingContext2D","willReadFrequently","canvas","drawImage","numPixels","channel","canWrapPixelsToImageBitmap","hasOwnProperty","isNonEmptyPixels","validateImgTensor","img","depth","fromPixels","image","options","$img","originalImgTensor","imageOptions","validateImageOptions","Draw","imageBitmap","createImageBitmap","premultiplyAlpha","multiplier","bytes","Uint8ClampedArray","rgba","d","round","ctx","imageData","putImageData","version","args","MaxNorm","config","MinMaxNorm","NonNeg","UnitNorm","Constant","GlorotNormal","GlorotUniform","HeNormal","HeUniform","Identity","LeCunNormal","LeCunUniform","Ones","Orthogonal","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Zeros","model","LayersModel","sequential","Sequential","Input","registerCallbackConstructor","verbosityLevel","callbackConstructor","CallbackConstructorRegistry","averagePooling1d","AveragePooling1D","averagePooling2d","AveragePooling2D","averagePooling3d","AveragePooling3D","globalMaxPooling1d","GlobalMaxPooling1D","globalMaxPooling2d","GlobalMaxPooling2D","maxPooling1d","MaxPooling1D","maxPooling2d","MaxPooling2D","globalMaxPool1d","globalMaxPool2d","maxPool1d","maxPool2d","Activation","Add","AlphaDropout","Average","BatchNormalization","Bidirectional","CategoryEncoding","CenterCrop","Concatenate","Conv1D","Conv2D","Conv2DTranspose","Conv3D","Conv3DTranspose","ConvLSTM2D","ConvLSTM2DCell","Cropping2D","Dense","DepthwiseConv2D","Dot","Dropout","ELU","Embedding","Flatten","GaussianDropout","GaussianNoise","GlobalAveragePooling1D","GlobalAveragePooling2D","GRU","GRUCell","InputLayer","LayerNormalization","LeakyReLU","LSTM","LSTMCell","Masking","MaxPooling3D","Maximum","Minimum","Multiply","Permute","PReLU","RandomWidth","ReLU","RepeatVector","Rescaling","Reshape","Resizing","RNN","SeparableConv2D","SimpleRNN","SimpleRNNCell","Softmax","SpatialDropout1D","StackedRNNCells","ThresholdedReLU","TimeDistributed","UpSampling2D","ZeroPadding2D","yTrue","yPred","losses.meanAbsolutePercentageError","losses.meanSquaredError","metrics.binaryAccuracy","metrics.binaryCrossentropy","metrics.categoricalAccuracy","metrics.categoricalCrossentropy","losses.cosineProximity","losses.meanAbsoluteError","metrics.precision","metrics.r2Score","metrics.recall","metrics.sparseCategoricalAccuracy","regularizers.l1","L1L2","regularizers.l2","Callback","BaseCallback","super","setModel","less","currVal","prevVal","greater","EarlyStopping","restoreBestWeights","NotImplementedError","monitor","minDelta","patience","verbose","mode","baseline","monitorFunc","onTrainBegin","logs","wait","stoppedEpoch","best","Infinity","onEpochEnd","epoch","resolveScalarsInLogs","current","getMonitorValue","stopTraining","onTrainEnd","log","monitorValue","Object","keys","callbacks","earlyStopping","CUSTOM_OPS","registerOp","opFunc","opMapper","tfOpName","category","customExecutor","getRegisteredOp","deregisterOp","getParamValue","paramName","node","tensorMap","context","resourceManager","inputParam","inputParams","inputIndexStart","end","inputIndexEnd","shiftedStart","inputNames","getTensor","_name","_a","dataSync","util.toNestedArray","attrParam","attrParams","tensorsMap","nodeName","parseNodeName","getHashTableHandleByName","contextId","currentContextIds","find","getNodeNameWithContextId","getTensorsForCurrentContext","currentContextId","getNodeNameAndIndex","inputName","outputName","isCacheEnabled","parseNodeNameCache","cachedResult","get","parts","split","set","getPadding","explicitPadding","cloneTensor","kept","clone","tfName","notSupported","outputs","tfDeprecatedName","OperationMapper","Instance","_instance","mappersJson","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","graph","hashTable","logical","matrices","normalization","reduction","sliceJoin","sparse","spectral","string","transformation","json","opMappers","reduce","mapper","transformGraph","signature","tfNodes","placeholders","initNodes","nodes","mapNode","inputNodeNameToKey","outputNodeNameToKey","mapSignatureEntries","allNodes","key","inputNode","outputIndex","children","signatureKey","functions","library","function","func","mapFunction","entries","prev","curr","attr","newNode","rawAttrs","param","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","getFuncParam","functionDef","nodeDef","inputArg","arg","parseDtypeParam","returnNodeMap","ret","outputArg","defaultOutput","mapArgsToSignature","methodName","mapArgToTensorInfo","nameMap","parseStringParam","s","keepCase","String","fromCharCode","apply","text","global","atob","Buffer","toString","decodeBase64","toLowerCase","def","parseInt","tensorflow.DataType","DT_FLOAT","DT_HALF","DT_INT32","DT_INT64","DT_INT8","DT_UINT8","DT_BOOL","DT_DOUBLE","DT_STRING","DT_COMPLEX64","DT_COMPLEX128","list","parseTensorShapeParam","unknownRank","dim","NodeValueImpl","getInput","getAttr","assertShapesMatchAllowUndefinedSize","shapeA","shapeB","errorMessagePrefix","dim0","dim1","fullDefinedShape","elementShape","some","inferElementShape","listElementShape","partialShape","mergeElementShape","notfullDefinedShape","elementShapeA","elementShapeB","TensorArray","maxSize","identicalElementShapes","dynamicSize","clearAfterRead","closed_","idTensor","keep","id","closed","clearAndClose","keepIds","read","tensorWithState","cleared","readMany","write","written","writeMany","stack","scatter","maxIndex","max","unstack","totalLength","cumulativeLengths","len","elementPerRow","tidy","sizes","TensorList","elementDtype","maxNumElements","copy","numElements","outputElementShape","reshapedTensors","popBack","pop","pushBack","resize","destTensorList","min","getItem","elementIndex","setItem","executeOp","thenFunc","elseFunc","cond","functionMap","executeFunctionAsync","tensorArrayMap","tensorListMap","bodyFunc","condFunc","condResult","argIds","condValue","origResult","resultIds","pred","frameId","enterFrame","exitFrame","nextIteration","tensorArray","addTensorArray","writeTensor","writeTensorArray","getTensorArray","readId","readIndex","gatherId","gatherIndices","gatherDtype","scatterId","scatterIndices","scatterTensor","scatterTensorArray","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","splitTensorArray","sizeId","sizeTensorArray","closeId","closeTensorArray","tensorList","getTensorList","elementDType","addTensorList","numElementsParam","reserve","fromTensor","fusedConvAndDepthWiseParams","extraOp","activationFunc","isBiasAdd","noBiasAdd","isPrelu","isBatchNorm","numArgs","stride","toUpperCase","biasArg","preluArg","nmsParams","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","HashTable","handle","keyDType","valueDType","Map","clear","tensorSize","tfOps.scalar","import","checkKeyAndValueTensor","$keys","keysLength","valuesLength","findWithDefault","tfc.tidy","ops","tfOps","mod","divNoNan","floorDiv","minimum","maximum","squaredDifference","arithmetic.executeOp","acos","acosh","asin","asinh","atan","atan2","atanh","ceil","complex","cos","cosh","elu","erf","expm1","floor","log1p","imag","neg","reciprocal","real","relu","selu","sin","sign","sinh","softplus","sqrt","square","tan","clipByValue","relu6","rsqrt","leakyRelu","prelu","isInf","basicMath.executeOp","control.executeOp","dilation","conv1d","conv2d","fused","conv2dTranspose","conv3d","kernelSize","avgPool","maxPool","avgPool3d","maxPool3d","strideHeight","strideWidth","dilationHeight","dilationWidth","dilation2d","convolution.executeOp","fill","onValue","offValue","onesLike","range","mean","stdDev","truncatedNormal","zeros","zerosLike","creation.executeOp","dynamic.executeOp","_0","_1","_2","_3","_4","nonMaxSuppressionWithScoreAsync","selectedIndices","selectedScores","padToMaxOutputSize","nonMaxSuppressionPaddedAsync","validOutputs","nonMaxSuppressionAsync","sorted","topk","unique","evaluation.executeOp","images","alignCorners","halfPixelCenters","resizeBilinear","resizeNearestNeighbor","boxInd","cropSize","method","extrapolationValue","cropAndResize","transforms","fillValue","interpolation","fillMode","transform","image.executeOp","tensor1d","message","summarize","prototype","call","graph.executeOp","equal","notEqual","greaterEqual","lessEqual","logicalAnd","logicalNot","logicalOr","where","logical.executeOp","einsum","transposeA","transposeB","linalg","bandPart","matrices.executeOp","euclideanNorm","batchNorm","localResponseNormalization","softmax","logSoftmax","normalization.executeOp","ragged.executeOp","keepDims","sum","any","argMax","argMin","prod","exclusive","cumprod","cumsum","bincount","binaryOutput","denseBincount","reduction.executeOp","n","batchDims","dims","begin","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","stridedSlice","squeezedShape","mapped","sameShape","reps","tile","numOrSizeSplits","sliceJoin.executeOp","outputIndices","outputValues","emptyRowIndicator","reverseIndexMap","sparseFillEmptyRows","sparseReshape","sparseSegmentMean","sparseSegmentSum","sparse.executeOp","fft","ifft","rfft","irfft","spectral.executeOp","staticRegexReplace","nGrams","nGramsSplits","stringNGrams","stringSplit","stringToHashBucketFast","string.executeOp","expandDims","mirrorPad","blockShape","spaceToBatchND","crops","batchToSpaceND","blockSize","depthToSpace","broadcastTo","transformation.executeOp","existingTableHandle","addHashTable","getHashTableById","hashTable.executeOp","tfc.util.isPromise","ExecutionContext","weightMap","rootContext","frameName","iterationId","contexts","lastId","generateCurrentContextIds","newFrame","currentContext","_currentContextIds","names","contextIdforContexts","unshift","splice","shift","assign","getWeight","getExecutionSubgraph","usedNodes","missingInputs","dynamicNode","syncInputs","seen","inputNodeNames","initNodeNames","frontier","isControlFlow","isDynamicShape","isHashTable","child","getNodesInTopologicalOrder","executionInfo","inputNodes","isUsed","predefinedNodes","nameToNode","inCounts","POSITIVE_INFINITY","inCount","orderedNodeNames","filteredOrderedNodes","orderedNodes","predefinedReachableNodeNames","filterPredefinedReachableNodes","nodeNameToOrder","order","predefinedNodeNames","isPredefined","willBeExecutedNodeNames","willBeExecuted","NodesExecutionOrderError","validateNodesExecutionOrder","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","HASH_TABLE_OPS","GraphExecutor","weightIds","parent","_weightIds","functionExecutorMap","_functionExecutorMap","_weightMap","_resourceManager","_inputs","_outputs","outputNodes","_functions","compiledMap","SEPARATOR","keepIntermediateTensors","_initNodes","_signature","getCompilationKey","sortedInputs","sortedOutputs","compile","outNames","inNames","nodeLiveUntilMap","INF_LIFE","MAX_SAFE_INTEGER","selfLifespans","nodeOrder","getSelfLifeSpan","selfLife","liveUntilOrders","liveUntilMap","liveUntilOrder","liveUntilNode","getNodeLiveUntilMap","cloneAndKeepTensor","cloneTensorList","cloneTensorMap","fromEntries","tensorsList","execute","disposeIntermediateTensors","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","outputNodeNames","outputNodeNameSet","compilationKey","compilation","clonedTensorsMap","tensorsToKeep","getFrozenTensorIds","util.isPromise","checkTensorForDisposalWithNodeLiveUntilInfo","ids","checkTensorForDisposal","intermediateTensorConsumerCount","count","liveUntilNodes","isNonDisposableNode","nodeToDispose","executeAsync","_executeAsync","isDisposed","getIntermediateTensors","isFunctionExecution","executeWithControlFlow","results","outputIds","inputIds","mappedInputs","outputNames","added","processStack","missingOutputs","alternativeMsg","item","processChildNodes","childNode","every","match","_b","notInGraph","normalizedName","ResourceManager","hashTableNameToHandle","hashTableMap","TFHUB_SEARCH_PARAM","DEFAULT_MODEL_NAME","GraphModel","modelVersion","executor","metadata","artifacts","userDefinedMetadata","modelSignature","modelStructuredOutputKeys","structuredOutputKeys","modelUrl","loadOptions","tfio","io","findIOHandler","requestInit","browserHTTPRequest","handlers","getLoadHandlers","loadResult","getWeightStream","loadSync","loadStreaming","decodeWeights","loadWithWeightMap","decodeWeightsStream","versions","producer","minConsumer","convertTensorMapToTensorsMap","modelInitializer","initializer","initializerSignature","handlerOrURL","getSaveHandlers","addStructuredOutputNames","outputTensors","outputTensorMap","outputTensor","predict","predictAsync","normalizeInputs","signatureInputs","resourceId","resourceIdToCapturedInput","numCapturedInputs","inputIndex","_c","normalizeOutputs","executeInitializerGraph","executeInitializerGraphAsync","setResourceIdToCapturedInput","signatureOutputs","tensorInfo","newMap","loadGraphModel","fromTFHub","endsWith","getTFHubUrl","loadGraphModelSync","modelSource","ioHandler","io.getWeightSpecs","io.fromMemorySync","io.getModelArtifactsForJSONSync","TextLineDataset","Dataset","iterator","decodeUTF8","line","CODE_QUOTE","STATE_OUT","Symbol","STATE_FIELD","STATE_QUOTE","STATE_QUOTE_AFTER_QUOTE","STATE_WITHIN_QUOTE_IN_QUOTE","CSVDataset","columnNames","columnNamesValidated","setColumnNames","configuredColumnsOnly","columnConfigs","fullColumnNames","columnNamesFromFile","maybeReadHeaderLine","counts","countAcc","duplicateNames","hasHeader","iter","base","firstElement","next","firstLine","parseRow","csvConfig","delimiter","delimWhitespace","lines","skip","makeDataElement","features","parsedValue","default","required","isLabel","valueAsNum","getBoolean","xs","ys","validateElementCount","readOffset","readLength","currentState","charAt","substring","MicrophoneIterator","LazyIterator","microphoneConfig","isClosed","fftSize","fftSizeLog2","log2","numFrames","numFramesPerSpectrogram","sampleRateHz","columnTruncateLength","audioTrackConstraints","smoothingTimeConstant","includeSpectrogram","includeWaveform","summary","create","microphoneIterator","stream","navigator","mediaDevices","getUserMedia","audio","ctxConstructor","AudioContext","webkitAudioContext","audioContext","sampleRate","streamSource","createMediaStreamSource","analyser","createAnalyser","connect","freqData","timeData","spectrogramTensor","waveformTensor","audioDataQueue","getAudioData","flattenQueue","freqDataQueue","getTensorFromAudioDataArray","timeDataQueue","spectrogram","waveform","capture","currentFrames","intervalID","setInterval","getFloatFrequencyData","getFloatTimeDomainData","clearInterval","disconnect","close","getTracks","toArray","getSampleRate","queue","frameSize","util.sizeFromShape","WebcamIterator","webcamVideoElement","webcamConfig","needToResize","resizeHeight","resizeWidth","cropBoxInd","centerCrop","widthCroppingRatio","heightCroppingRatio","widthCropStart","heightCropStart","widthCropEnd","heightCropEnd","cropBox","tensor2d","webcamIterator","facingMode","deviceId","srcObject","src","onloadedmetadata","browser.fromPixels","cropAndResizeFrame","expandedImage","resizedImage","track","DataSource","StringIterator","separator","SplitIterator","upstream","impl","SplitIteratorImpl","OneToManyIterator","carryover","pump","chunkResult","outputQueue","ByteChunkIterator","Utf8Iterator","Utf8IteratorImpl","decoder","TextDecoder","StringDecoder","require","chunk","decode","from","FileChunkIterator","File","chunkSize","byteLength","fileReader","onabort","getRequestInitFromRequest","request","headers","body","credentials","cache","redirect","referrer","integrity","isLocalPath","FileDataSource","fs","readFileSync","URLDataSource","fileOptions","fetchFunc","urlString","response","util.fetch","ok","uint8Array","arrayBuffer","statusText","urlChunkIterator","iteratorFromFunction","datasetFromIteratorFn","generator","gen","version_core","version_cpu","version_webgl","version_data","version_layers","version_converter","tfjs"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129]}