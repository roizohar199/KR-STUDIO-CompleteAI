{"version":3,"file":"AdvancedCodeManager-ae3073c2.js","sources":["../../src/lib/codeAnalyzer.js","../../src/lib/smartOptimizer.js","../../src/lib/autoTester.js","../../src/lib/performanceMonitor.js","../../src/components/AdvancedCodeManager.jsx"],"sourcesContent":["/**\r\n * מערכת ניתוח קוד מתקדמת\r\n * Code Analysis System - Advanced\r\n */\r\n\r\nexport class AdvancedCodeAnalyzer {\r\n  constructor() {\r\n    this.issues = [];\r\n    this.metrics = {};\r\n    this.recommendations = [];\r\n    this.analysisHistory = [];\r\n  }\r\n\r\n  /**\r\n   * ניתוח קוד מתקדם\r\n   */\r\n  async analyzeCode(code, filePath) {\r\n    console.log('🔍 מתחיל ניתוח קוד מתקדם...');\r\n    \r\n    const analysis = {\r\n      filePath,\r\n      timestamp: new Date().toISOString(),\r\n      issues: [],\r\n      metrics: {},\r\n      recommendations: [],\r\n      complexity: 0,\r\n      maintainability: 0,\r\n      performance: 0,\r\n      security: 0\r\n    };\r\n\r\n    try {\r\n      // ניתוח מורכבות\r\n      analysis.complexity = this.analyzeComplexity(code);\r\n      \r\n      // ניתוח ביצועים\r\n      analysis.performance = this.analyzePerformance(code);\r\n      \r\n      // ניתוח אבטחה\r\n      analysis.security = this.analyzeSecurity(code);\r\n      \r\n      // ניתוח תחזוקתיות\r\n      analysis.maintainability = this.analyzeMaintainability(code);\r\n      \r\n      // זיהוי בעיות\r\n      analysis.issues = this.identifyIssues(code);\r\n      \r\n      // המלצות שיפור\r\n      analysis.recommendations = this.generateRecommendations(analysis);\r\n      \r\n      // חישוב ציון כללי\r\n      analysis.overallScore = this.calculateOverallScore(analysis);\r\n      \r\n      this.analysisHistory.push(analysis);\r\n      \r\n      console.log('✅ ניתוח קוד הושלם בהצלחה');\r\n      return analysis;\r\n      \r\n    } catch (error) {\r\n      console.error('❌ שגיאה בניתוח קוד:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ניתוח מורכבות קוד\r\n   */\r\n  analyzeComplexity(code) {\r\n    const metrics = {\r\n      cyclomaticComplexity: 0,\r\n      nestingDepth: 0,\r\n      functionLength: 0,\r\n      parameterCount: 0,\r\n      returnStatements: 0\r\n    };\r\n\r\n    try {\r\n      // חישוב מורכבות ציקלומטית\r\n      metrics.cyclomaticComplexity = this.calculateCyclomaticComplexity(code);\r\n      \r\n      // חישוב עומק קינון\r\n      metrics.nestingDepth = this.calculateNestingDepth(code);\r\n      \r\n      // חישוב אורך פונקציות\r\n      metrics.functionLength = this.calculateFunctionLength(code);\r\n      \r\n      // חישוב מספר פרמטרים\r\n      metrics.parameterCount = this.calculateParameterCount(code);\r\n      \r\n      // חישוב מספר return statements\r\n      metrics.returnStatements = this.calculateReturnStatements(code);\r\n      \r\n    } catch (error) {\r\n      console.warn('אזהרה בניתוח מורכבות:', error);\r\n    }\r\n\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * ניתוח ביצועים\r\n   */\r\n  analyzePerformance(code) {\r\n    const metrics = {\r\n      memoryUsage: 0,\r\n      timeComplexity: 0,\r\n      inefficientPatterns: 0,\r\n      optimizationOpportunities: 0\r\n    };\r\n\r\n    try {\r\n      // זיהוי דפוסים לא יעילים\r\n      metrics.inefficientPatterns = this.identifyInefficientPatterns(code);\r\n      \r\n      // זיהוי הזדמנויות אופטימיזציה\r\n      metrics.optimizationOpportunities = this.identifyOptimizationOpportunities(code);\r\n      \r\n      // הערכת מורכבות זמן\r\n      metrics.timeComplexity = this.estimateTimeComplexity(code);\r\n      \r\n      // הערכת שימוש בזיכרון\r\n      metrics.memoryUsage = this.estimateMemoryUsage(code);\r\n      \r\n    } catch (error) {\r\n      console.warn('אזהרה בניתוח ביצועים:', error);\r\n    }\r\n\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * ניתוח אבטחה\r\n   */\r\n  analyzeSecurity(code) {\r\n    const metrics = {\r\n      vulnerabilities: 0,\r\n      securityScore: 0,\r\n      riskLevel: 'LOW',\r\n      recommendations: []\r\n    };\r\n\r\n    try {\r\n      // זיהוי פגיעויות אבטחה\r\n      metrics.vulnerabilities = this.identifySecurityVulnerabilities(code);\r\n      \r\n      // חישוב ציון אבטחה\r\n      metrics.securityScore = this.calculateSecurityScore(code);\r\n      \r\n      // הערכת רמת סיכון\r\n      metrics.riskLevel = this.assessRiskLevel(metrics.securityScore);\r\n      \r\n      // המלצות אבטחה\r\n      metrics.recommendations = this.generateSecurityRecommendations(code);\r\n      \r\n    } catch (error) {\r\n      console.warn('אזהרה בניתוח אבטחה:', error);\r\n    }\r\n\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * ניתוח תחזוקתיות\r\n   */\r\n  analyzeMaintainability(code) {\r\n    const metrics = {\r\n      readability: 0,\r\n      modularity: 0,\r\n      documentation: 0,\r\n      testCoverage: 0,\r\n      technicalDebt: 0\r\n    };\r\n\r\n    try {\r\n      // הערכת קריאות\r\n      metrics.readability = this.assessReadability(code);\r\n      \r\n      // הערכת מודולריות\r\n      metrics.modularity = this.assessModularity(code);\r\n      \r\n      // הערכת תיעוד\r\n      metrics.documentation = this.assessDocumentation(code);\r\n      \r\n      // הערכת כיסוי בדיקות\r\n      metrics.testCoverage = this.assessTestCoverage(code);\r\n      \r\n      // חישוב חוב טכני\r\n      metrics.technicalDebt = this.calculateTechnicalDebt(code);\r\n      \r\n    } catch (error) {\r\n      console.warn('אזהרה בניתוח תחזוקתיות:', error);\r\n    }\r\n\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * זיהוי בעיות בקוד\r\n   */\r\n  identifyIssues(code) {\r\n    const issues = [];\r\n    \r\n    try {\r\n      // זיהוי שגיאות נפוצות\r\n      const commonIssues = this.identifyCommonIssues(code);\r\n      issues.push(...commonIssues);\r\n      \r\n      // זיהוי anti-patterns\r\n      const antiPatterns = this.identifyAntiPatterns(code);\r\n      issues.push(...antiPatterns);\r\n      \r\n      // זיהוי בעיות ביצועים\r\n      const performanceIssues = this.identifyPerformanceIssues(code);\r\n      issues.push(...performanceIssues);\r\n      \r\n      // זיהוי בעיות אבטחה\r\n      const securityIssues = this.identifySecurityIssues(code);\r\n      issues.push(...securityIssues);\r\n      \r\n    } catch (error) {\r\n      console.warn('אזהרה בזיהוי בעיות:', error);\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  /**\r\n   * יצירת המלצות שיפור\r\n   */\r\n  generateRecommendations(analysis) {\r\n    const recommendations = [];\r\n    \r\n    try {\r\n      // המלצות למורכבות\r\n      if (analysis.complexity.cyclomaticComplexity > 10) {\r\n        recommendations.push({\r\n          type: 'COMPLEXITY',\r\n          priority: 'HIGH',\r\n          message: 'המורכבות הציקלומטית גבוהה מדי. שקול לפצל את הפונקציה',\r\n          suggestion: 'פיצול פונקציה לפונקציות קטנות יותר'\r\n        });\r\n      }\r\n      \r\n      // המלצות לביצועים\r\n      if (analysis.performance.inefficientPatterns > 5) {\r\n        recommendations.push({\r\n          type: 'PERFORMANCE',\r\n          priority: 'MEDIUM',\r\n          message: 'זוהו דפוסים לא יעילים בקוד',\r\n          suggestion: 'שימוש באלגוריתמים יעילים יותר'\r\n        });\r\n      }\r\n      \r\n      // המלצות לאבטחה\r\n      if (analysis.security.vulnerabilities > 0) {\r\n        recommendations.push({\r\n          type: 'SECURITY',\r\n          priority: 'CRITICAL',\r\n          message: 'זוהו פגיעויות אבטחה בקוד',\r\n          suggestion: 'טיפול מיידי בפגיעויות האבטחה'\r\n        });\r\n      }\r\n      \r\n      // המלצות לתחזוקתיות\r\n      if (analysis.maintainability.technicalDebt > 50) {\r\n        recommendations.push({\r\n          type: 'MAINTAINABILITY',\r\n          priority: 'MEDIUM',\r\n          message: 'רמת החוב הטכני גבוהה',\r\n          suggestion: 'השקעה בשיפור הקוד הקיים'\r\n        });\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.warn('אזהרה ביצירת המלצות:', error);\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * חישוב ציון כללי\r\n   */\r\n  calculateOverallScore(analysis) {\r\n    try {\r\n      const weights = {\r\n        complexity: 0.25,\r\n        performance: 0.25,\r\n        security: 0.25,\r\n        maintainability: 0.25\r\n      };\r\n      \r\n      const scores = {\r\n        complexity: Math.max(0, 100 - analysis.complexity.cyclomaticComplexity * 5),\r\n        performance: Math.max(0, 100 - analysis.performance.inefficientPatterns * 10),\r\n        security: Math.max(0, 100 - analysis.security.vulnerabilities * 20),\r\n        maintainability: Math.max(0, 100 - analysis.maintainability.technicalDebt * 0.5)\r\n      };\r\n      \r\n      const overallScore = Object.keys(weights).reduce((total, key) => {\r\n        return total + (scores[key] * weights[key]);\r\n      }, 0);\r\n      \r\n      return Math.round(overallScore);\r\n      \r\n    } catch (error) {\r\n      console.warn('אזהרה בחישוב ציון כללי:', error);\r\n      return 50; // ציון ברירת מחדל\r\n    }\r\n  }\r\n\r\n  // פונקציות עזר לניתוח\r\n  calculateCyclomaticComplexity(code) {\r\n    // לוגיקה פשוטה לחישוב מורכבות\r\n    const complexity = (code.match(/if|else|for|while|case|catch|&&|\\|\\|/g) || []).length + 1;\r\n    return complexity;\r\n  }\r\n\r\n  calculateNestingDepth(code) {\r\n    const lines = code.split('\\n');\r\n    let maxDepth = 0;\r\n    let currentDepth = 0;\r\n    \r\n    for (const line of lines) {\r\n      if (line.includes('{')) currentDepth++;\r\n      if (line.includes('}')) currentDepth--;\r\n      maxDepth = Math.max(maxDepth, currentDepth);\r\n    }\r\n    \r\n    return maxDepth;\r\n  }\r\n\r\n  calculateFunctionLength(code) {\r\n    const functions = code.match(/function\\s+\\w+\\s*\\([^)]*\\)\\s*\\{[^}]*\\}/g) || [];\r\n    if (functions.length === 0) return 0;\r\n    \r\n    const totalLines = functions.reduce((total, func) => {\r\n      return total + func.split('\\n').length;\r\n    }, 0);\r\n    \r\n    return Math.round(totalLines / functions.length);\r\n  }\r\n\r\n  calculateParameterCount(code) {\r\n    const functions = code.match(/function\\s+\\w+\\s*\\([^)]*\\)/g) || [];\r\n    if (functions.length === 0) return 0;\r\n    \r\n    const totalParams = functions.reduce((total, func) => {\r\n      const params = func.match(/\\(([^)]*)\\)/);\r\n      if (params && params[1].trim()) {\r\n        return total + params[1].split(',').length;\r\n      }\r\n      return total;\r\n    }, 0);\r\n    \r\n    return Math.round(totalParams / functions.length);\r\n  }\r\n\r\n  calculateReturnStatements(code) {\r\n    return (code.match(/return\\s+/g) || []).length;\r\n  }\r\n\r\n  identifyInefficientPatterns(code) {\r\n    let count = 0;\r\n    \r\n    // זיהוי לולאות לא יעילות\r\n    if (code.includes('for (let i = 0; i < array.length; i++)')) count++;\r\n    \r\n    // זיהוי יצירת אובייקטים מיותרת\r\n    if (code.includes('new Object()')) count++;\r\n    \r\n    // זיהוי שרשור מחרוזות לא יעיל\r\n    if (code.includes('str += \"text\"')) count++;\r\n    \r\n    return count;\r\n  }\r\n\r\n  identifyOptimizationOpportunities(code) {\r\n    let count = 0;\r\n    \r\n    // זיהוי הזדמנויות caching\r\n    if (code.includes('document.getElementById') && code.includes('document.getElementById')) count++;\r\n    \r\n    // זיהוי הזדמנויות lazy loading\r\n    if (code.includes('import(') && code.includes('import(')) count++;\r\n    \r\n    return count;\r\n  }\r\n\r\n  estimateTimeComplexity(code) {\r\n    if (code.includes('nested for loops')) return 'O(n²)';\r\n    if (code.includes('for loop')) return 'O(n)';\r\n    if (code.includes('recursion')) return 'O(2^n)';\r\n    return 'O(1)';\r\n  }\r\n\r\n  estimateMemoryUsage(code) {\r\n    let usage = 0;\r\n    \r\n    // הערכת שימוש בזיכרון לפי סוגי נתונים\r\n    if (code.includes('Array')) usage += 10;\r\n    if (code.includes('Object')) usage += 5;\r\n    if (code.includes('Map')) usage += 8;\r\n    if (code.includes('Set')) usage += 8;\r\n    \r\n    return usage;\r\n  }\r\n\r\n  identifySecurityVulnerabilities(code) {\r\n    let count = 0;\r\n    \r\n    // זיהוי SQL Injection\r\n    if (code.includes('innerHTML') || code.includes('eval(')) count++;\r\n    \r\n    // זיהוי XSS\r\n    if (code.includes('document.write') || code.includes('innerHTML')) count++;\r\n    \r\n    // זיהוי CSRF\r\n    if (code.includes('XMLHttpRequest') && !code.includes('CSRF')) count++;\r\n    \r\n    return count;\r\n  }\r\n\r\n  calculateSecurityScore(code) {\r\n    const vulnerabilities = this.identifySecurityVulnerabilities(code);\r\n    return Math.max(0, 100 - vulnerabilities * 25);\r\n  }\r\n\r\n  assessRiskLevel(securityScore) {\r\n    if (securityScore >= 80) return 'LOW';\r\n    if (securityScore >= 60) return 'MEDIUM';\r\n    if (securityScore >= 40) return 'HIGH';\r\n    return 'CRITICAL';\r\n  }\r\n\r\n  generateSecurityRecommendations(code) {\r\n    const recommendations = [];\r\n    \r\n    if (code.includes('innerHTML')) {\r\n      recommendations.push('החלף innerHTML ב-textContent למניעת XSS');\r\n    }\r\n    \r\n    if (code.includes('eval(')) {\r\n      recommendations.push('החלף eval() בפונקציות בטוחות יותר');\r\n    }\r\n    \r\n    return recommendations;\r\n  }\r\n\r\n  assessReadability(code) {\r\n    let score = 100;\r\n    \r\n    // הפחתת נקודות על קוד לא קריא\r\n    if (code.includes('var x = 1; var y = 2; var z = 3;')) score -= 20;\r\n    if (code.includes('function a(){if(b){if(c){if(d){return e;}}}}')) score -= 30;\r\n    \r\n    return Math.max(0, score);\r\n  }\r\n\r\n  assessModularity(code) {\r\n    let score = 100;\r\n    \r\n    // בדיקת מודולריות\r\n    const functions = code.match(/function\\s+\\w+/g) || [];\r\n    if (functions.length < 2) score -= 20;\r\n    if (functions.length > 10) score -= 10;\r\n    \r\n    return Math.max(0, score);\r\n  }\r\n\r\n  assessDocumentation(code) {\r\n    let score = 100;\r\n    \r\n    // בדיקת תיעוד\r\n    if (!code.includes('/**') && !code.includes('//')) score -= 40;\r\n    if (!code.includes('@param') && !code.includes('@return')) score -= 20;\r\n    \r\n    return Math.max(0, score);\r\n  }\r\n\r\n  assessTestCoverage(code) {\r\n    // הערכת כיסוי בדיקות (פשוטה)\r\n    return 50; // ברירת מחדל\r\n  }\r\n\r\n  calculateTechnicalDebt(code) {\r\n    let debt = 0;\r\n    \r\n    // חישוב חוב טכני\r\n    if (code.includes('TODO')) debt += 10;\r\n    if (code.includes('FIXME')) debt += 20;\r\n    if (code.includes('HACK')) debt += 30;\r\n    if (code.includes('// temporary')) debt += 15;\r\n    \r\n    return debt;\r\n  }\r\n\r\n  identifyCommonIssues(code) {\r\n    const issues = [];\r\n    \r\n    // זיהוי בעיות נפוצות\r\n    if (code.includes('console.log(')) {\r\n      issues.push({\r\n        type: 'COMMON',\r\n        severity: 'LOW',\r\n        message: 'console.log נשאר בקוד ייצור',\r\n        line: this.findLineNumber(code, 'console.log(')\r\n      });\r\n    }\r\n    \r\n    if (code.includes('debugger;')) {\r\n      issues.push({\r\n        type: 'COMMON',\r\n        severity: 'MEDIUM',\r\n        message: 'debugger statement נשאר בקוד',\r\n        line: this.findLineNumber(code, 'debugger;')\r\n      });\r\n    }\r\n    \r\n    return issues;\r\n  }\r\n\r\n  identifyAntiPatterns(code) {\r\n    const issues = [];\r\n    \r\n    // זיהוי anti-patterns\r\n    if (code.includes('new Array()')) {\r\n      issues.push({\r\n        type: 'ANTI_PATTERN',\r\n        severity: 'MEDIUM',\r\n        message: 'שימוש ב-new Array() במקום []',\r\n        line: this.findLineNumber(code, 'new Array()')\r\n      });\r\n    }\r\n    \r\n    return issues;\r\n  }\r\n\r\n  identifyPerformanceIssues(code) {\r\n    const issues = [];\r\n    \r\n    // זיהוי בעיות ביצועים\r\n    if (code.includes('innerHTML') && code.includes('for')) {\r\n      issues.push({\r\n        type: 'PERFORMANCE',\r\n        severity: 'HIGH',\r\n        message: 'שימוש ב-innerHTML בלולאה עלול לגרום לבעיות ביצועים',\r\n        line: this.findLineNumber(code, 'innerHTML')\r\n      });\r\n    }\r\n    \r\n    return issues;\r\n  }\r\n\r\n  identifySecurityIssues(code) {\r\n    const issues = [];\r\n    \r\n    // זיהוי בעיות אבטחה\r\n    if (code.includes('eval(')) {\r\n      issues.push({\r\n        type: 'SECURITY',\r\n        severity: 'CRITICAL',\r\n        message: 'שימוש ב-eval() עלול לגרום לפגיעויות אבטחה',\r\n        line: this.findLineNumber(code, 'eval(')\r\n      });\r\n    }\r\n    \r\n    return issues;\r\n  }\r\n\r\n  findLineNumber(code, searchTerm) {\r\n    const lines = code.split('\\n');\r\n    for (let i = 0; i < lines.length; i++) {\r\n      if (lines[i].includes(searchTerm)) {\r\n        return i + 1;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * קבלת סטטיסטיקות ניתוח\r\n   */\r\n  getAnalysisStats() {\r\n    return {\r\n      totalAnalyses: this.analysisHistory.length,\r\n      averageScore: this.calculateAverageScore(),\r\n      issuesByType: this.groupIssuesByType(),\r\n      recommendationsByPriority: this.groupRecommendationsByPriority()\r\n    };\r\n  }\r\n\r\n  calculateAverageScore() {\r\n    if (this.analysisHistory.length === 0) return 0;\r\n    \r\n    const totalScore = this.analysisHistory.reduce((sum, analysis) => {\r\n      return sum + (analysis.overallScore || 0);\r\n    }, 0);\r\n    \r\n    return Math.round(totalScore / this.analysisHistory.length);\r\n  }\r\n\r\n  groupIssuesByType() {\r\n    const grouped = {};\r\n    \r\n    this.analysisHistory.forEach(analysis => {\r\n      analysis.issues.forEach(issue => {\r\n        if (!grouped[issue.type]) {\r\n          grouped[issue.type] = 0;\r\n        }\r\n        grouped[issue.type]++;\r\n      });\r\n    });\r\n    \r\n    return grouped;\r\n  }\r\n\r\n  groupRecommendationsByPriority() {\r\n    const grouped = {\r\n      CRITICAL: 0,\r\n      HIGH: 0,\r\n      MEDIUM: 0,\r\n      LOW: 0\r\n    };\r\n    \r\n    this.analysisHistory.forEach(analysis => {\r\n      analysis.recommendations.forEach(rec => {\r\n        if (grouped[rec.priority]) {\r\n          grouped[rec.priority]++;\r\n        }\r\n      });\r\n    });\r\n    \r\n    return grouped;\r\n  }\r\n\r\n  /**\r\n   * ניקוי היסטוריית ניתוח\r\n   */\r\n  clearHistory() {\r\n    this.analysisHistory = [];\r\n    console.log('🧹 היסטוריית ניתוח נוקתה');\r\n  }\r\n\r\n  /**\r\n   * ייצוא נתוני ניתוח\r\n   */\r\n  exportAnalysis() {\r\n    return {\r\n      stats: this.getAnalysisStats(),\r\n      history: this.analysisHistory,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  }\r\n}\r\n\r\n// יצירת מופע גלובלי\r\nexport const codeAnalyzer = new AdvancedCodeAnalyzer();\r\n\r\n// פונקציות עזר מהירות\r\nexport const quickAnalyze = (code, filePath) => {\r\n  return codeAnalyzer.analyzeCode(code, filePath);\r\n};\r\n\r\nexport const getCodeScore = (code) => {\r\n  return codeAnalyzer.analyzeCode(code, 'quick-analysis').then(analysis => analysis.overallScore);\r\n};\r\n","/**\r\n * מערכת אופטימיזציה חכמה\r\n * Smart Optimization System\r\n */\r\n\r\nexport class SmartOptimizer {\r\n  constructor() {\r\n    this.optimizations = new Map();\r\n    this.performanceMetrics = new Map();\r\n    this.optimizationHistory = [];\r\n    this.isEnabled = true;\r\n  }\r\n\r\n  /**\r\n   * הפעלת אופטימיזציה חכמה\r\n   */\r\n  async optimizeCode(code, context = {}) {\r\n    if (!this.isEnabled) return code;\r\n\r\n    console.log('🚀 מתחיל אופטימיזציה חכמה...');\r\n    \r\n    const originalCode = code;\r\n    const optimizations = [];\r\n    \r\n    try {\r\n      // אופטימיזציה של לולאות\r\n      if (this.shouldOptimizeLoops(code)) {\r\n        code = this.optimizeLoops(code);\r\n        optimizations.push('LOOP_OPTIMIZATION');\r\n      }\r\n      \r\n      // אופטימיזציה של זיכרון\r\n      if (this.shouldOptimizeMemory(code)) {\r\n        code = this.optimizeMemory(code);\r\n        optimizations.push('MEMORY_OPTIMIZATION');\r\n      }\r\n      \r\n      // אופטימיזציה של DOM\r\n      if (this.shouldOptimizeDOM(code)) {\r\n        code = this.optimizeDOM(code);\r\n        optimizations.push('DOM_OPTIMIZATION');\r\n      }\r\n      \r\n      // אופטימיזציה של אלגוריתמים\r\n      if (this.shouldOptimizeAlgorithms(code)) {\r\n        code = this.optimizeAlgorithms(code);\r\n        optimizations.push('ALGORITHM_OPTIMIZATION');\r\n      }\r\n      \r\n      // אופטימיזציה של אסינכרוניות\r\n      if (this.shouldOptimizeAsync(code)) {\r\n        code = this.optimizeAsync(code);\r\n        optimizations.push('ASYNC_OPTIMIZATION');\r\n      }\r\n      \r\n      // שמירת היסטוריית אופטימיזציה\r\n      this.saveOptimizationHistory(originalCode, code, optimizations, context);\r\n      \r\n      console.log('✅ אופטימיזציה חכמה הושלמה בהצלחה');\r\n      return code;\r\n      \r\n    } catch (error) {\r\n      console.error('❌ שגיאה באופטימיזציה:', error);\r\n      return originalCode; // החזרת הקוד המקורי במקרה של שגיאה\r\n    }\r\n  }\r\n\r\n  /**\r\n   * בדיקה אם צריך לאופטמז לולאות\r\n   */\r\n  shouldOptimizeLoops(code) {\r\n    return code.includes('for (') || code.includes('while (') || code.includes('forEach(');\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של לולאות\r\n   */\r\n  optimizeLoops(code) {\r\n    let optimizedCode = code;\r\n    \r\n    // אופטימיזציה של לולאות for\r\n    optimizedCode = this.optimizeForLoops(optimizedCode);\r\n    \r\n    // אופטימיזציה של לולאות while\r\n    optimizedCode = this.optimizeWhileLoops(optimizedCode);\r\n    \r\n    // אופטימיזציה של forEach\r\n    optimizedCode = this.optimizeForEach(optimizedCode);\r\n    \r\n    return optimizedCode;\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של לולאות for\r\n   */\r\n  optimizeForLoops(code) {\r\n    // אופטימיזציה: שמירת אורך מערך\r\n    code = code.replace(\r\n      /for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*(\\w+)\\.length\\s*;\\s*i\\+\\+\\)/g,\r\n      'for (let i = 0, len = $1.length; i < len; i++)'\r\n    );\r\n    \r\n    // אופטימיזציה: שימוש ב-cached length\r\n    code = code.replace(\r\n      /for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*(\\w+)\\.length\\s*;\\s*i\\+\\+\\)/g,\r\n      'const len = $1.length;\\nfor (let i = 0; i < len; i++)'\r\n    );\r\n    \r\n    return code;\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של לולאות while\r\n   */\r\n  optimizeWhileLoops(code) {\r\n    // אופטימיזציה: הימנעות מלולאות אינסופיות\r\n    code = code.replace(\r\n      /while\\s*\\(\\s*true\\s*\\)/g,\r\n      'let maxIterations = 1000;\\nlet iterationCount = 0;\\nwhile (iterationCount < maxIterations)'\r\n    );\r\n    \r\n    return code;\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של forEach\r\n   */\r\n  optimizeForEach(code) {\r\n    // אופטימיזציה: החלפת forEach בלולאת for מהירה יותר\r\n    code = code.replace(\r\n      /(\\w+)\\.forEach\\s*\\(\\s*\\([^)]*\\)\\s*=>\\s*\\{([^}]*)\\}\\s*\\)/g,\r\n      'for (let i = 0, len = $1.length; i < len; i++) {\\n  const item = $1[i];\\n  $2\\n}'\r\n    );\r\n    \r\n    return code;\r\n  }\r\n\r\n  /**\r\n   * בדיקה אם צריך לאופטמז זיכרון\r\n   */\r\n  shouldOptimizeMemory(code) {\r\n    return code.includes('new Array(') || code.includes('new Object(') || code.includes('+= ');\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של זיכרון\r\n   */\r\n  optimizeMemory(code) {\r\n    let optimizedCode = code;\r\n    \r\n    // אופטימיזציה: שימוש ב-array literals\r\n    optimizedCode = optimizedCode.replace(/new Array\\(\\)/g, '[]');\r\n    optimizedCode = optimizedCode.replace(/new Object\\(\\)/g, '{}');\r\n    \r\n    // אופטימיזציה: שרשור מחרוזות יעיל\r\n    optimizedCode = this.optimizeStringConcatenation(optimizedCode);\r\n    \r\n    // אופטימיזציה: שימוש ב-weak references\r\n    optimizedCode = this.optimizeWeakReferences(optimizedCode);\r\n    \r\n    return optimizedCode;\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של שרשור מחרוזות\r\n   */\r\n  optimizeStringConcatenation(code) {\r\n    // זיהוי שרשור מחרוזות לא יעיל\r\n    const stringConcatPattern = /(\\w+)\\s*\\+=\\s*[\"'][^\"']*[\"']/g;\r\n    let match;\r\n    let optimizedCode = code;\r\n    \r\n    while ((match = stringConcatPattern.exec(code)) !== null) {\r\n      const variable = match[1];\r\n      const optimized = `// אופטימיזציה: שימוש ב-array.join במקום +=\r\nconst ${variable}Parts = [${variable}];\r\n// הוסף מחרוזות ל-array במקום +=\r\n// ${variable}Parts.push(\"text\");\r\n${variable} = ${variable}Parts.join('');`;\r\n      \r\n      optimizedCode = optimizedCode.replace(match[0], optimized);\r\n    }\r\n    \r\n    return optimizedCode;\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של weak references\r\n   */\r\n  optimizeWeakReferences(code) {\r\n    // החלפת Map ב-WeakMap כאשר מתאים\r\n    if (code.includes('new Map()') && code.includes('set(') && code.includes('delete(')) {\r\n      code = code.replace(/new Map\\(\\)/g, 'new WeakMap()');\r\n      code = code.replace(/Map/g, 'WeakMap');\r\n    }\r\n    \r\n    // החלפת Set ב-WeakSet כאשר מתאים\r\n    if (code.includes('new Set()') && code.includes('add(') && code.includes('delete(')) {\r\n      code = code.replace(/new Set\\(\\)/g, 'new WeakSet()');\r\n      code = code.replace(/Set/g, 'WeakSet');\r\n    }\r\n    \r\n    return code;\r\n  }\r\n\r\n  /**\r\n   * בדיקה אם צריך לאופטמז DOM\r\n   */\r\n  shouldOptimizeDOM(code) {\r\n    return code.includes('document.') || code.includes('getElementById') || code.includes('querySelector');\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של DOM\r\n   */\r\n  optimizeDOM(code) {\r\n    let optimizedCode = code;\r\n    \r\n    // אופטימיזציה: caching של DOM elements\r\n    optimizedCode = this.optimizeDOMCaching(optimizedCode);\r\n    \r\n    // אופטימיזציה: batch DOM updates\r\n    optimizedCode = this.optimizeBatchUpdates(optimizedCode);\r\n    \r\n    // אופטימיזציה: שימוש ב-fragment\r\n    optimizedCode = this.optimizeDocumentFragment(optimizedCode);\r\n    \r\n    return optimizedCode;\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של caching DOM\r\n   */\r\n  optimizeDOMCaching(code) {\r\n    // זיהוי קריאות חוזרות ל-DOM\r\n    const domCalls = code.match(/document\\.(getElementById|querySelector|querySelectorAll)\\([^)]+\\)/g) || [];\r\n    const uniqueSelectors = [...new Set(domCalls)];\r\n    \r\n    if (uniqueSelectors.length > 0) {\r\n      const cacheCode = `// אופטימיזציה: caching של DOM elements\r\nconst domCache = {\r\n${uniqueSelectors.map(selector => `  ${selector.replace(/[^a-zA-Z0-9]/g, '_')}: ${selector},`).join('\\n')}\r\n};`;\r\n      \r\n      code = cacheCode + '\\n' + code;\r\n      \r\n      // החלפת קריאות ב-cache\r\n      uniqueSelectors.forEach(selector => {\r\n        const cacheKey = selector.replace(/[^a-zA-Z0-9]/g, '_');\r\n        code = code.replace(new RegExp(selector.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'g'), `domCache.${cacheKey}`);\r\n      });\r\n    }\r\n    \r\n    return code;\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של batch updates\r\n   */\r\n  optimizeBatchUpdates(code) {\r\n    // זיהוי עדכונים מרובים של DOM\r\n    if (code.includes('style.') && code.includes('textContent')) {\r\n      const batchCode = `// אופטימיזציה: batch DOM updates\r\nconst batchUpdate = (element, updates) => {\r\n  const originalDisplay = element.style.display;\r\n  element.style.display = 'none';\r\n  \r\n  Object.entries(updates).forEach(([property, value]) => {\r\n    if (property === 'textContent') {\r\n      element.textContent = value;\r\n    } else if (property.startsWith('style.')) {\r\n      const styleProp = property.replace('style.', '');\r\n      element.style[styleProp] = value;\r\n    }\r\n  });\r\n  \r\n  element.style.display = originalDisplay;\r\n};`;\r\n      \r\n      code = batchCode + '\\n' + code;\r\n    }\r\n    \r\n    return code;\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של DocumentFragment\r\n   */\r\n  optimizeDocumentFragment(code) {\r\n    // זיהוי יצירת אלמנטים מרובים\r\n    if (code.includes('createElement') && code.includes('appendChild')) {\r\n      const fragmentCode = `// אופטימיזציה: שימוש ב-DocumentFragment\r\nconst createElementsBatch = (elementsData) => {\r\n  const fragment = document.createDocumentFragment();\r\n  \r\n  elementsData.forEach(data => {\r\n    const element = document.createElement(data.tag);\r\n    Object.assign(element, data.attributes);\r\n    if (data.textContent) element.textContent = data.textContent;\r\n    fragment.appendChild(element);\r\n  });\r\n  \r\n  return fragment;\r\n};`;\r\n      \r\n      code = fragmentCode + '\\n' + code;\r\n    }\r\n    \r\n    return code;\r\n  }\r\n\r\n  /**\r\n   * בדיקה אם צריך לאופטמז אלגוריתמים\r\n   */\r\n  shouldOptimizeAlgorithms(code) {\r\n    return code.includes('sort(') || code.includes('filter(') || code.includes('map(');\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של אלגוריתמים\r\n   */\r\n  optimizeAlgorithms(code) {\r\n    let optimizedCode = code;\r\n    \r\n    // אופטימיזציה: שימוש ב-indexOf במקום includes\r\n    optimizedCode = optimizedCode.replace(/\\.includes\\(/g, '.indexOf(');\r\n    \r\n    // אופטימיזציה: שימוש ב-Set במקום array.includes\r\n    optimizedCode = this.optimizeArrayIncludes(optimizedCode);\r\n    \r\n    // אופטימיזציה: שימוש ב-Map במקום object lookup\r\n    optimizedCode = this.optimizeObjectLookup(optimizedCode);\r\n    \r\n    return optimizedCode;\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של array.includes\r\n   */\r\n  optimizeArrayIncludes(code) {\r\n    // זיהוי שימוש ב-array.includes בלולאה\r\n    const includesPattern = /for\\s*\\([^)]*\\)\\s*\\{\\s*if\\s*\\(\\s*(\\w+)\\.includes\\([^)]+\\)/g;\r\n    \r\n    if (includesPattern.test(code)) {\r\n      const setCode = `// אופטימיזציה: שימוש ב-Set במקום array.includes\r\nconst ${code.match(/(\\w+)\\.includes/)[1]}Set = new Set(${code.match(/(\\w+)\\.includes/)[1]});`;\r\n      \r\n      code = setCode + '\\n' + code;\r\n      code = code.replace(/\\.includes\\(/g, 'Set.has(');\r\n    }\r\n    \r\n    return code;\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של object lookup\r\n   */\r\n  optimizeObjectLookup(code) {\r\n    // זיהוי שימוש ב-object lookup בלולאה\r\n    const lookupPattern = /for\\s*\\([^)]*\\)\\s*\\{\\s*if\\s*\\(\\s*(\\w+)\\s*\\[\\s*[^]]+\\s*\\]/g;\r\n    \r\n    if (lookupPattern.test(code)) {\r\n      const mapCode = `// אופטימיזציה: שימוש ב-Map במקום object lookup\r\nconst ${code.match(/(\\w+)\\s*\\[/)[1]}Map = new Map(Object.entries(${code.match(/(\\w+)\\s*\\[/)[1]}));`;\r\n      \r\n      code = mapCode + '\\n' + code;\r\n      code = code.replace(/(\\w+)\\s*\\[/g, '$1Map.get(');\r\n    }\r\n    \r\n    return code;\r\n  }\r\n\r\n  /**\r\n   * בדיקה אם צריך לאופטמז אסינכרוניות\r\n   */\r\n  shouldOptimizeAsync(code) {\r\n    return code.includes('async') || code.includes('await') || code.includes('Promise');\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של אסינכרוניות\r\n   */\r\n  optimizeAsync(code) {\r\n    let optimizedCode = code;\r\n    \r\n    // אופטימיזציה: שימוש ב-Promise.all\r\n    optimizedCode = this.optimizePromiseAll(optimizedCode);\r\n    \r\n    // אופטימיזציה: שימוש ב-race conditions\r\n    optimizedCode = this.optimizePromiseRace(optimizedCode);\r\n    \r\n    // אופטימיזציה: שימוש ב-caching promises\r\n    optimizedCode = this.optimizePromiseCaching(optimizedCode);\r\n    \r\n    return optimizedCode;\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של Promise.all\r\n   */\r\n  optimizePromiseAll(code) {\r\n    // זיהוי promises מרובים שניתן להריץ במקביל\r\n    const awaitPattern = /await\\s+(\\w+)\\([^)]*\\)\\s*;\\s*await\\s+(\\w+)\\([^)]*\\)/g;\r\n    \r\n    if (awaitPattern.test(code)) {\r\n      const awaitMatches = code.match(/await\\s+(\\w+)\\([^)]*\\)/g) || [];\r\n      const promiseFunctions = awaitMatches.map(awaitMatch => awaitMatch.replace('await ', ''));\r\n      \r\n      // בניית הקוד ללא שימוש ב-template literal עם await\r\n      const parallelCode = '// אופטימיזציה: הרצה במקביל עם Promise.all\\n' +\r\n        'const [result1, result2] = ' + 'await' + ' Promise.all([\\n  ' +\r\n        promiseFunctions.join(',\\n  ') + '\\n]);';\r\n      \r\n      code = code.replace(awaitPattern, parallelCode);\r\n    }\r\n    \r\n    return code;\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של Promise.race\r\n   */\r\n  optimizePromiseRace(code) {\r\n    // זיהוי promises שניתן להריץ ב-race\r\n    const racePattern = /const\\s+(\\w+)\\s*=\\s*await\\s+(\\w+)\\([^)]*\\)\\s*;\\s*if\\s*\\(\\s*\\1\\s*\\)/g;\r\n    \r\n    if (racePattern.test(code)) {\r\n      const awaitMatches = code.match(/await\\s+(\\w+)\\([^)]*\\)/g) || [];\r\n      const promiseFunctions = awaitMatches.map(awaitText => awaitText.replace('await ', ''));\r\n      const raceCode = `// אופטימיזציה: שימוש ב-Promise.race\r\nconst result = await Promise.race([\r\n  ${promiseFunctions.join(',\\n  ')}\r\n]);`;\r\n      \r\n      code = code.replace(racePattern, raceCode);\r\n    }\r\n    \r\n    return code;\r\n  }\r\n\r\n  /**\r\n   * אופטימיזציה של caching promises\r\n   */\r\n  optimizePromiseCaching(code) {\r\n    // זיהוי promises שחוזרים על עצמם\r\n    const cachePattern = /const\\s+(\\w+)\\s*=\\s*await\\s+(\\w+)\\([^)]*\\)/g;\r\n    const promises = code.match(cachePattern) || [];\r\n    const uniquePromises = [...new Set(promises)];\r\n    \r\n    if (uniquePromises.length > 1) {\r\n      const cacheCode = `// אופטימיזציה: caching של promises\r\nconst promiseCache = new Map();\r\nconst getCachedPromise = async (key, promiseFn) => {\r\n  if (!promiseCache.has(key)) {\r\n    promiseCache.set(key, promiseFn());\r\n  }\r\n  return promiseCache.get(key);\r\n};`;\r\n      \r\n      code = cacheCode + '\\n' + code;\r\n    }\r\n    \r\n    return code;\r\n  }\r\n\r\n  /**\r\n   * שמירת היסטוריית אופטימיזציה\r\n   */\r\n  saveOptimizationHistory(originalCode, optimizedCode, optimizations, context) {\r\n    const historyEntry = {\r\n      timestamp: new Date().toISOString(),\r\n      originalSize: originalCode.length,\r\n      optimizedSize: optimizedCode.length,\r\n      sizeReduction: originalCode.length - optimizedCode.length,\r\n      sizeReductionPercent: Math.round(((originalCode.length - optimizedCode.length) / originalCode.length) * 100),\r\n      optimizations,\r\n      context,\r\n      performanceGain: this.calculatePerformanceGain(originalCode, optimizedCode)\r\n    };\r\n    \r\n    this.optimizationHistory.push(historyEntry);\r\n    \r\n    // שמירה ב-localStorage\r\n    try {\r\n      localStorage.setItem('smartOptimizerHistory', JSON.stringify(this.optimizationHistory));\r\n    } catch (error) {\r\n      console.warn('לא ניתן לשמור היסטוריית אופטימיזציה:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * חישוב שיפור ביצועים\r\n   */\r\n  calculatePerformanceGain(originalCode, optimizedCode) {\r\n    let gain = 0;\r\n    \r\n    // חישוב שיפור לפי סוגי אופטימיזציה\r\n    if (originalCode.includes('for (') && optimizedCode.includes('len =')) {\r\n      gain += 15; // שיפור לולאות\r\n    }\r\n    \r\n    if (originalCode.includes('new Array(') && optimizedCode.includes('[]')) {\r\n      gain += 10; // שיפור יצירת מערכים\r\n    }\r\n    \r\n    if (originalCode.includes('document.') && optimizedCode.includes('domCache')) {\r\n      gain += 25; // שיפור DOM\r\n    }\r\n    \r\n    if (originalCode.includes('await') && optimizedCode.includes('Promise.all')) {\r\n      gain += 30; // שיפור אסינכרוניות\r\n    }\r\n    \r\n    return Math.min(gain, 100); // מקסימום 100%\r\n  }\r\n\r\n  /**\r\n   * קבלת סטטיסטיקות אופטימיזציה\r\n   */\r\n  getOptimizationStats() {\r\n    if (this.optimizationHistory.length === 0) {\r\n      return {\r\n        totalOptimizations: 0,\r\n        averageSizeReduction: 0,\r\n        averagePerformanceGain: 0,\r\n        totalCodeSizeSaved: 0\r\n      };\r\n    }\r\n    \r\n    const totalSizeReduction = this.optimizationHistory.reduce((sum, entry) => {\r\n      return sum + entry.sizeReduction;\r\n    }, 0);\r\n    \r\n    const totalPerformanceGain = this.optimizationHistory.reduce((sum, entry) => {\r\n      return sum + entry.performanceGain;\r\n    }, 0);\r\n    \r\n    return {\r\n      totalOptimizations: this.optimizationHistory.length,\r\n      averageSizeReduction: Math.round(totalSizeReduction / this.optimizationHistory.length),\r\n      averagePerformanceGain: Math.round(totalPerformanceGain / this.optimizationHistory.length),\r\n      totalCodeSizeSaved: totalSizeReduction\r\n    };\r\n  }\r\n\r\n  /**\r\n   * ניקוי היסטוריית אופטימיזציה\r\n   */\r\n  clearHistory() {\r\n    this.optimizationHistory = [];\r\n    try {\r\n      localStorage.removeItem('smartOptimizerHistory');\r\n    } catch (error) {\r\n      console.warn('לא ניתן לנקות היסטוריית אופטימיזציה:', error);\r\n    }\r\n    console.log('🧹 היסטוריית אופטימיזציה נוקתה');\r\n  }\r\n\r\n  /**\r\n   * טעינת היסטוריית אופטימיזציה מ-localStorage\r\n   */\r\n  loadHistory() {\r\n    try {\r\n      const savedHistory = localStorage.getItem('smartOptimizerHistory');\r\n      if (savedHistory) {\r\n        this.optimizationHistory = JSON.parse(savedHistory);\r\n        console.log('📚 היסטוריית אופטימיזציה נטענה:', this.optimizationHistory.length, 'רשומות');\r\n      }\r\n    } catch (error) {\r\n      console.warn('לא ניתן לטעון היסטוריית אופטימיזציה:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * הפעלה/כיבוי מערכת האופטימיזציה\r\n   */\r\n  toggleOptimization() {\r\n    this.isEnabled = !this.isEnabled;\r\n    console.log(`🔄 מערכת אופטימיזציה ${this.isEnabled ? 'הופעלה' : 'כובתה'}`);\r\n    return this.isEnabled;\r\n  }\r\n\r\n  /**\r\n   * קבלת המלצות אופטימיזציה\r\n   */\r\n  getOptimizationRecommendations() {\r\n    const recommendations = [];\r\n    \r\n    if (this.optimizationHistory.length > 0) {\r\n      const stats = this.getOptimizationStats();\r\n      \r\n      if (stats.averageSizeReduction < 10) {\r\n        recommendations.push({\r\n          type: 'SIZE',\r\n          priority: 'MEDIUM',\r\n          message: 'שיפור קטן בגודל הקוד. שקול אופטימיזציות נוספות',\r\n          suggestion: 'בדוק הזדמנויות לאופטימיזציה נוספת'\r\n        });\r\n      }\r\n      \r\n      if (stats.averagePerformanceGain < 20) {\r\n        recommendations.push({\r\n          type: 'PERFORMANCE',\r\n          priority: 'HIGH',\r\n          message: 'שיפור נמוך בביצועים. נדרשות אופטימיזציות מתקדמות',\r\n          suggestion: 'השתמש באופטימיזציות מתקדמות יותר'\r\n        });\r\n      }\r\n    }\r\n    \r\n    return recommendations;\r\n  }\r\n}\r\n\r\n// יצירת מופע גלובלי\r\nexport const smartOptimizer = new SmartOptimizer();\r\n\r\n// טעינת היסטוריה בטעינה\r\nsmartOptimizer.loadHistory();\r\n\r\n// פונקציות עזר מהירות\r\nexport const quickOptimize = (code) => {\r\n  return smartOptimizer.optimizeCode(code);\r\n};\r\n\r\nexport const getOptimizationStats = () => {\r\n  return smartOptimizer.getOptimizationStats();\r\n};\r\n","/**\r\n * מערכת בדיקות אוטומטיות מתקדמת\r\n * Advanced Auto-Testing System\r\n */\r\n\r\nexport class AutoTester {\r\n  constructor() {\r\n    this.testCases = new Map();\r\n    this.testResults = [];\r\n    this.coverage = {};\r\n  }\r\n\r\n  /**\r\n   * יצירת בדיקות אוטומטיות\r\n   */\r\n  async generateTests(code, filePath) {\r\n    console.log('🧪 יוצר בדיקות אוטומטיות...');\r\n    \r\n    const tests = {\r\n      unitTests: this.generateUnitTests(code),\r\n      integrationTests: this.generateIntegrationTests(code),\r\n      performanceTests: this.generatePerformanceTests(code),\r\n      securityTests: this.generateSecurityTests(code)\r\n    };\r\n    \r\n    this.saveTestResults(filePath, tests);\r\n    return tests;\r\n  }\r\n\r\n  /**\r\n   * יצירת בדיקות יחידה\r\n   */\r\n  generateUnitTests(code) {\r\n    const tests = [];\r\n    \r\n    // זיהוי פונקציות\r\n    const functions = code.match(/function\\s+(\\w+)\\s*\\([^)]*\\)/g) || [];\r\n    \r\n    functions.forEach(func => {\r\n      const funcName = func.match(/function\\s+(\\w+)/)[1];\r\n      tests.push(this.createFunctionTest(funcName, code));\r\n    });\r\n    \r\n    return tests;\r\n  }\r\n\r\n  /**\r\n   * יצירת בדיקת פונקציה\r\n   */\r\n  createFunctionTest(funcName, code) {\r\n    return `describe('${funcName}', () => {\r\n  it('should work correctly', () => {\r\n    // בדיקה בסיסית\r\n    expect(typeof ${funcName}).toBe('function');\r\n  });\r\n  \r\n  it('should handle edge cases', () => {\r\n    // בדיקת מקרי קצה\r\n    // TODO: הוסף בדיקות ספציפיות\r\n  });\r\n});`;\r\n  }\r\n\r\n  /**\r\n   * יצירת בדיקות אינטגרציה\r\n   */\r\n  generateIntegrationTests(code) {\r\n    return `describe('Integration Tests', () => {\r\n  it('should work with other components', () => {\r\n    // בדיקת אינטגרציה\r\n    // TODO: הוסף בדיקות אינטגרציה\r\n  });\r\n});`;\r\n  }\r\n\r\n  /**\r\n   * יצירת בדיקות ביצועים\r\n   */\r\n  generatePerformanceTests(code) {\r\n    return `describe('Performance Tests', () => {\r\n  it('should complete within reasonable time', () => {\r\n    const startTime = performance.now();\r\n    // TODO: הוסף קוד לבדיקה\r\n    const endTime = performance.now();\r\n    expect(endTime - startTime).toBeLessThan(1000);\r\n  });\r\n});`;\r\n  }\r\n\r\n  /**\r\n   * יצירת בדיקות אבטחה\r\n   */\r\n  generateSecurityTests(code) {\r\n    return `describe('Security Tests', () => {\r\n  it('should not have XSS vulnerabilities', () => {\r\n    // בדיקת אבטחה\r\n    // TODO: הוסף בדיקות אבטחה\r\n  });\r\n});`;\r\n  }\r\n\r\n  /**\r\n   * שמירת תוצאות בדיקות\r\n   */\r\n  saveTestResults(filePath, tests) {\r\n    this.testResults.push({\r\n      filePath,\r\n      timestamp: new Date().toISOString(),\r\n      tests\r\n    });\r\n  }\r\n\r\n  /**\r\n   * קבלת סטטיסטיקות בדיקות\r\n   */\r\n  getTestStats() {\r\n    return {\r\n      totalFiles: this.testResults.length,\r\n      totalTests: this.testResults.reduce((sum, result) => {\r\n        return sum + Object.keys(result.tests).length;\r\n      }, 0)\r\n    };\r\n  }\r\n}\r\n\r\nexport const autoTester = new AutoTester();\r\n","/**\r\n * מערכת ניטור ביצועים מתקדמת\r\n * Advanced Performance Monitoring System\r\n */\r\n\r\nexport class PerformanceMonitor {\r\n  constructor() {\r\n    this.metrics = new Map();\r\n    this.thresholds = new Map();\r\n    this.alerts = [];\r\n    this.isMonitoring = false;\r\n  }\r\n\r\n  /**\r\n   * התחלת ניטור\r\n   */\r\n  startMonitoring() {\r\n    if (this.isMonitoring) return;\r\n    \r\n    this.isMonitoring = true;\r\n    this.monitorMemory();\r\n    this.monitorCPU();\r\n    this.monitorNetwork();\r\n    \r\n    console.log('📊 ניטור ביצועים הופעל');\r\n  }\r\n\r\n  /**\r\n   * ניטור זיכרון\r\n   */\r\n  monitorMemory() {\r\n    if (!this.isMonitoring) return;\r\n    \r\n    setInterval(() => {\r\n      if ('memory' in performance) {\r\n        const memory = performance.memory;\r\n        this.metrics.set('memory', {\r\n          used: memory.usedJSHeapSize,\r\n          total: memory.totalJSHeapSize,\r\n          limit: memory.jsHeapSizeLimit,\r\n          timestamp: Date.now()\r\n        });\r\n        \r\n        this.checkMemoryThresholds(memory);\r\n      }\r\n    }, 5000);\r\n  }\r\n\r\n  /**\r\n   * ניטור CPU\r\n   */\r\n  monitorCPU() {\r\n    if (!this.isMonitoring) return;\r\n    \r\n    setInterval(() => {\r\n      const startTime = performance.now();\r\n      \r\n      // מדידת עומס CPU פשוטה\r\n      setTimeout(() => {\r\n        const endTime = performance.now();\r\n        const cpuLoad = endTime - startTime;\r\n        \r\n        this.metrics.set('cpu', {\r\n          load: cpuLoad,\r\n          timestamp: Date.now()\r\n        });\r\n        \r\n        this.checkCPUThresholds(cpuLoad);\r\n      }, 100);\r\n    }, 2000);\r\n  }\r\n\r\n  /**\r\n   * ניטור רשת\r\n   */\r\n  monitorNetwork() {\r\n    if (!this.isMonitoring) return;\r\n    \r\n    if ('connection' in navigator) {\r\n      const connection = navigator.connection;\r\n      \r\n      this.metrics.set('network', {\r\n        effectiveType: connection.effectiveType,\r\n        downlink: connection.downlink,\r\n        rtt: connection.rtt,\r\n        timestamp: Date.now()\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * בדיקת ספי זיכרון\r\n   */\r\n  checkMemoryThresholds(memory) {\r\n    const usagePercent = (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100;\r\n    \r\n    if (usagePercent > 80) {\r\n      this.createAlert('MEMORY', 'CRITICAL', `שימוש בזיכרון גבוה: ${usagePercent.toFixed(1)}%`);\r\n    } else if (usagePercent > 60) {\r\n      this.createAlert('MEMORY', 'WARNING', `שימוש בזיכרון גבוה: ${usagePercent.toFixed(1)}%`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * בדיקת ספי CPU\r\n   */\r\n  checkCPUThresholds(cpuLoad) {\r\n    if (cpuLoad > 100) {\r\n      this.createAlert('CPU', 'CRITICAL', `עומס CPU גבוה: ${cpuLoad.toFixed(1)}ms`);\r\n    } else if (cpuLoad > 50) {\r\n      this.createAlert('CPU', 'WARNING', `עומס CPU גבוה: ${cpuLoad.toFixed(1)}ms`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * יצירת התראה\r\n   */\r\n  createAlert(type, severity, message) {\r\n    const alert = {\r\n      type,\r\n      severity,\r\n      message,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    this.alerts.push(alert);\r\n    console.warn(`🚨 ${type} ${severity}: ${message}`);\r\n  }\r\n\r\n  /**\r\n   * קבלת סטטיסטיקות ביצועים\r\n   */\r\n  getPerformanceStats() {\r\n    const stats = {};\r\n    \r\n    this.metrics.forEach((value, key) => {\r\n      stats[key] = value;\r\n    });\r\n    \r\n    return {\r\n      metrics: stats,\r\n      alerts: this.alerts,\r\n      isMonitoring: this.isMonitoring\r\n    };\r\n  }\r\n\r\n  /**\r\n   * עצירת ניטור\r\n   */\r\n  stopMonitoring() {\r\n    this.isMonitoring = false;\r\n    console.log('⏹️ ניטור ביצועים הופסק');\r\n  }\r\n}\r\n\r\nexport const performanceMonitor = new PerformanceMonitor();\r\n","import React, { useState, useEffect } from 'react';\r\nimport { codeAnalyzer } from '../lib/codeAnalyzer';\r\nimport { smartOptimizer } from '../lib/smartOptimizer';\r\nimport { autoTester } from '../lib/autoTester';\r\nimport { performanceMonitor } from '../lib/performanceMonitor';\r\n\r\nconst AdvancedCodeManager = () => {\r\n  const [currentFile, setCurrentFile] = useState('');\r\n  const [fileContent, setFileContent] = useState('');\r\n  const [analysis, setAnalysis] = useState(null);\r\n  const [optimization, setOptimization] = useState(null);\r\n  const [tests, setTests] = useState(null);\r\n  const [performance, setPerformance] = useState(null);\r\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\r\n  const [isOptimizing, setIsOptimizing] = useState(false);\r\n  const [isGeneratingTests, setIsGeneratingTests] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // התחלת ניטור ביצועים\r\n    performanceMonitor.startMonitoring();\r\n    \r\n    return () => {\r\n      performanceMonitor.stopMonitoring();\r\n    };\r\n  }, []);\r\n\r\n  /**\r\n   * ניתוח קוד מתקדם\r\n   */\r\n  const handleCodeAnalysis = async () => {\r\n    if (!fileContent.trim()) {\r\n      alert('אנא הכנס קוד לניתוח');\r\n      return;\r\n    }\r\n\r\n    setIsAnalyzing(true);\r\n    try {\r\n      const result = await codeAnalyzer.analyzeCode(fileContent, currentFile || 'unknown-file');\r\n      setAnalysis(result);\r\n      console.log('✅ ניתוח קוד הושלם:', result);\r\n    } catch (error) {\r\n      console.error('❌ שגיאה בניתוח קוד:', error);\r\n      alert('שגיאה בניתוח הקוד');\r\n    } finally {\r\n      setIsAnalyzing(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * אופטימיזציה חכמה\r\n   */\r\n  const handleCodeOptimization = async () => {\r\n    if (!fileContent.trim()) {\r\n      alert('אנא הכנס קוד לאופטימיזציה');\r\n      return;\r\n    }\r\n\r\n    setIsOptimizing(true);\r\n    try {\r\n      const result = await smartOptimizer.optimizeCode(fileContent, { file: currentFile });\r\n      setOptimization(result);\r\n      console.log('✅ אופטימיזציה הושלמה:', result);\r\n    } catch (error) {\r\n      console.error('❌ שגיאה באופטימיזציה:', error);\r\n      alert('שגיאה באופטימיזציה');\r\n    } finally {\r\n      setIsOptimizing(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * יצירת בדיקות אוטומטיות\r\n   */\r\n  const handleTestGeneration = async () => {\r\n    if (!fileContent.trim()) {\r\n      alert('אנא הכנס קוד ליצירת בדיקות');\r\n      return;\r\n    }\r\n\r\n    setIsGeneratingTests(true);\r\n    try {\r\n      const result = await autoTester.generateTests(fileContent, currentFile || 'unknown-file');\r\n      setTests(result);\r\n      console.log('✅ בדיקות נוצרו:', result);\r\n    } catch (error) {\r\n      console.error('❌ שגיאה ביצירת בדיקות:', error);\r\n      alert('שגיאה ביצירת בדיקות');\r\n    } finally {\r\n      setIsGeneratingTests(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * קבלת סטטיסטיקות ביצועים\r\n   */\r\n  const handlePerformanceCheck = () => {\r\n    const stats = performanceMonitor.getPerformanceStats();\r\n    setPerformance(stats);\r\n    console.log('📊 סטטיסטיקות ביצועים:', stats);\r\n  };\r\n\r\n  /**\r\n   * ניקוי כל הנתונים\r\n   */\r\n  const handleClearAll = () => {\r\n    setAnalysis(null);\r\n    setOptimization(null);\r\n    setTests(null);\r\n    setPerformance(null);\r\n    setFileContent('');\r\n    setCurrentFile('');\r\n    \r\n    // ניקוי היסטוריות\r\n    codeAnalyzer.clearHistory();\r\n    smartOptimizer.clearHistory();\r\n    \r\n    console.log('🧹 כל הנתונים נוקו');\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white p-6\">\r\n      <div className=\"max-w-7xl mx-auto\">\r\n        <h1 className=\"text-4xl font-bold text-center mb-8 bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent\">\r\n          🚀 מנהל קוד מתקדם - Advanced Code Manager\r\n        </h1>\r\n\r\n        {/* אזור קלט */}\r\n        <div className=\"bg-white/10 backdrop-blur-lg rounded-xl p-6 mb-8 border border-white/20\">\r\n          <h2 className=\"text-2xl font-semibold mb-4\">📝 הזנת קוד</h2>\r\n          \r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"שם קובץ (אופציונלי)\"\r\n              value={currentFile}\r\n              onChange={(e) => setCurrentFile(e.target.value)}\r\n              className=\"px-4 py-2 bg-white/20 rounded-lg border border-white/30 text-white placeholder-white/60\"\r\n            />\r\n            \r\n            <div className=\"flex gap-2\">\r\n              <button\r\n                onClick={handleCodeAnalysis}\r\n                disabled={isAnalyzing || !fileContent.trim()}\r\n                className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 rounded-lg transition-colors\"\r\n              >\r\n                {isAnalyzing ? '🔍 מנתח...' : '🔍 ניתוח קוד'}\r\n              </button>\r\n              \r\n              <button\r\n                onClick={handleCodeOptimization}\r\n                disabled={isOptimizing || !fileContent.trim()}\r\n                className=\"px-4 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 rounded-lg transition-colors\"\r\n              >\r\n                {isOptimizing ? '🚀 מאפשר...' : '🚀 אופטימיזציה'}\r\n              </button>\r\n              \r\n              <button\r\n                onClick={handleTestGeneration}\r\n                disabled={isGeneratingTests || !fileContent.trim()}\r\n                className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 rounded-lg transition-colors\"\r\n              >\r\n                {isGeneratingTests ? '🧪 יוצר...' : '🧪 יצירת בדיקות'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          <textarea\r\n            value={fileContent}\r\n            onChange={(e) => setFileContent(e.target.value)}\r\n            placeholder=\"הכנס את הקוד שלך כאן...\"\r\n            rows={10}\r\n            className=\"w-full px-4 py-3 bg-white/20 rounded-lg border border-white/30 text-white placeholder-white/60 font-mono text-sm\"\r\n          />\r\n        </div>\r\n\r\n        {/* כפתורי פעולה מהירים */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\r\n          <button\r\n            onClick={handlePerformanceCheck}\r\n            className=\"px-6 py-3 bg-yellow-600 hover:bg-yellow-700 rounded-lg transition-colors\"\r\n          >\r\n            📊 בדיקת ביצועים\r\n          </button>\r\n          \r\n          <button\r\n            onClick={() => codeAnalyzer.clearHistory()}\r\n            className=\"px-6 py-3 bg-red-600 hover:bg-red-700 rounded-lg transition-colors\"\r\n          >\r\n            🧹 ניקוי ניתוח\r\n          </button>\r\n          \r\n          <button\r\n            onClick={() => smartOptimizer.clearHistory()}\r\n            className=\"px-6 py-3 bg-orange-600 hover:bg-orange-700 rounded-lg transition-colors\"\r\n          >\r\n            🧹 ניקוי אופטימיזציה\r\n          </button>\r\n          \r\n          <button\r\n            onClick={handleClearAll}\r\n            className=\"px-6 py-3 bg-gray-600 hover:bg-gray-700 rounded-lg transition-colors\"\r\n          >\r\n            🗑️ ניקוי הכל\r\n          </button>\r\n        </div>\r\n\r\n        {/* תוצאות ניתוח קוד */}\r\n        {analysis && (\r\n          <div className=\"bg-white/10 backdrop-blur-lg rounded-xl p-6 mb-8 border border-white/20\">\r\n            <h2 className=\"text-2xl font-semibold mb-4\">🔍 תוצאות ניתוח קוד</h2>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n              <div className=\"bg-white/20 rounded-lg p-4 text-center\">\r\n                <div className=\"text-3xl font-bold text-blue-400\">{analysis.overallScore}</div>\r\n                <div className=\"text-sm text-white/80\">ציון כללי</div>\r\n              </div>\r\n              \r\n              <div className=\"bg-white/20 rounded-lg p-4 text-center\">\r\n                <div className=\"text-3xl font-bold text-green-400\">{analysis.complexity.cyclomaticComplexity}</div>\r\n                <div className=\"text-sm text-white/80\">מורכבות ציקלומטית</div>\r\n              </div>\r\n              \r\n              <div className=\"bg-white/20 rounded-lg p-4 text-center\">\r\n                <div className=\"text-3xl font-bold text-yellow-400\">{analysis.issues.length}</div>\r\n                <div className=\"text-sm text-white/80\">בעיות שזוהו</div>\r\n              </div>\r\n              \r\n              <div className=\"bg-white/20 rounded-lg p-4 text-center\">\r\n                <div className=\"text-3xl font-bold text-purple-400\">{analysis.recommendations.length}</div>\r\n                <div className=\"text-sm text-white/80\">המלצות</div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* המלצות */}\r\n            {analysis.recommendations.length > 0 && (\r\n              <div className=\"mb-6\">\r\n                <h3 className=\"text-xl font-semibold mb-3\">💡 המלצות שיפור</h3>\r\n                <div className=\"space-y-2\">\r\n                  {analysis.recommendations.map((rec, index) => (\r\n                    <div key={index} className={`p-3 rounded-lg ${\r\n                      rec.priority === 'CRITICAL' ? 'bg-red-500/20 border border-red-500/50' :\r\n                      rec.priority === 'HIGH' ? 'bg-orange-500/20 border border-orange-500/50' :\r\n                      rec.priority === 'MEDIUM' ? 'bg-yellow-500/20 border border-yellow-500/50' :\r\n                      'bg-blue-500/20 border border-blue-500/50'\r\n                    }`}>\r\n                      <div className=\"font-semibold\">{rec.message}</div>\r\n                      <div className=\"text-sm text-white/80\">{rec.suggestion}</div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* תוצאות אופטימיזציה */}\r\n        {optimization && (\r\n          <div className=\"bg-white/10 backdrop-blur-lg rounded-xl p-6 mb-8 border border-white/20\">\r\n            <h2 className=\"text-2xl font-semibold mb-4\">🚀 תוצאות אופטימיזציה</h2>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold mb-3\">📊 סטטיסטיקות אופטימיזציה</h3>\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex justify-between\">\r\n                    <span>אופטימיזציות שבוצעו:</span>\r\n                    <span className=\"font-semibold\">{optimization.optimizations?.length || 0}</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span>שיפור ביצועים:</span>\r\n                    <span className=\"font-semibold text-green-400\">\r\n                      {optimization.performanceGain || 0}%\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div>\r\n                <h3 className=\"text-lg font-semibold mb-3\">📝 קוד מותאם</h3>\r\n                <pre className=\"bg-black/30 p-4 rounded-lg text-sm overflow-x-auto\">\r\n                  {optimization.substring(0, 500)}...\r\n                </pre>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* בדיקות שנוצרו */}\r\n        {tests && (\r\n          <div className=\"bg-white/10 backdrop-blur-lg rounded-xl p-6 mb-8 border border-white/20\">\r\n            <h2 className=\"text-2xl font-semibold mb-4\">🧪 בדיקות שנוצרו</h2>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n              {Object.entries(tests).map(([testType, testContent]) => (\r\n                <div key={testType} className=\"bg-white/20 rounded-lg p-4\">\r\n                  <h3 className=\"text-lg font-semibold mb-3 capitalize\">\r\n                    {testType.replace(/([A-Z])/g, ' $1').trim()}\r\n                  </h3>\r\n                  <pre className=\"bg-black/30 p-3 rounded-lg text-sm overflow-x-auto max-h-40\">\r\n                    {Array.isArray(testContent) ? testContent.join('\\n\\n') : testContent}\r\n                  </pre>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* סטטיסטיקות ביצועים */}\r\n        {performance && (\r\n          <div className=\"bg-white/10 backdrop-blur-lg rounded-xl p-6 mb-8 border border-white/20\">\r\n            <h2 className=\"text-2xl font-semibold mb-4\">📊 סטטיסטיקות ביצועים</h2>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n              {performance.metrics.memory && (\r\n                <div className=\"bg-white/20 rounded-lg p-4\">\r\n                  <h3 className=\"text-lg font-semibold mb-3\">💾 זיכרון</h3>\r\n                  <div className=\"space-y-2 text-sm\">\r\n                    <div>שימוש: {(performance.metrics.memory.used / 1024 / 1024).toFixed(2)} MB</div>\r\n                    <div>סה\"כ: {(performance.metrics.memory.total / 1024 / 1024).toFixed(2)} MB</div>\r\n                    <div>מגבלה: {(performance.metrics.memory.limit / 1024 / 1024).toFixed(2)} MB</div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {performance.metrics.cpu && (\r\n                <div className=\"bg-white/20 rounded-lg p-4\">\r\n                  <h3 className=\"text-lg font-semibold mb-3\">⚡ CPU</h3>\r\n                  <div className=\"text-2xl font-bold text-blue-400\">\r\n                    {performance.metrics.cpu.load.toFixed(1)}ms\r\n                  </div>\r\n                  <div className=\"text-sm text-white/80\">עומס CPU</div>\r\n                </div>\r\n              )}\r\n              \r\n              {performance.metrics.network && (\r\n                <div className=\"bg-white/20 rounded-lg p-4\">\r\n                  <h3 className=\"text-lg font-semibold mb-3\">🌐 רשת</h3>\r\n                  <div className=\"space-y-2 text-sm\">\r\n                    <div>סוג: {performance.metrics.network.effectiveType}</div>\r\n                    <div>מהירות: {performance.metrics.network.downlink} Mbps</div>\r\n                    <div>RTT: {performance.metrics.network.rtt}ms</div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* התראות */}\r\n            {performance.alerts.length > 0 && (\r\n              <div className=\"mt-6\">\r\n                <h3 className=\"text-lg font-semibold mb-3\">🚨 התראות</h3>\r\n                <div className=\"space-y-2\">\r\n                  {performance.alerts.map((alert, index) => (\r\n                    <div key={index} className={`p-3 rounded-lg ${\r\n                      alert.severity === 'CRITICAL' ? 'bg-red-500/20 border border-red-500/50' :\r\n                      'bg-yellow-500/20 border border-yellow-500/50'\r\n                    }`}>\r\n                      <div className=\"font-semibold\">{alert.type}</div>\r\n                      <div className=\"text-sm\">{alert.message}</div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* סטטיסטיקות כללית */}\r\n        <div className=\"bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20\">\r\n          <h2 className=\"text-2xl font-semibold mb-4\">📈 סטטיסטיקות כללית</h2>\r\n          \r\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n            <div className=\"bg-white/20 rounded-lg p-4 text-center\">\r\n              <div className=\"text-2xl font-bold text-blue-400\">\r\n                {codeAnalyzer.getAnalysisStats().totalAnalyses}\r\n              </div>\r\n              <div className=\"text-sm text-white/80\">ניתוחים שבוצעו</div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white/20 rounded-lg p-4 text-center\">\r\n              <div className=\"text-2xl font-bold text-green-400\">\r\n                {smartOptimizer.getOptimizationStats().totalOptimizations}\r\n              </div>\r\n              <div className=\"text-sm text-white/80\">אופטימיזציות שבוצעו</div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white/20 rounded-lg p-4 text-center\">\r\n              <div className=\"text-2xl font-bold text-purple-400\">\r\n                {autoTester.getTestStats().totalFiles}\r\n              </div>\r\n              <div className=\"text-sm text-white/80\">קבצים נבדקו</div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white/20 rounded-lg p-4 text-center\">\r\n              <div className=\"text-2xl font-bold text-yellow-400\">\r\n                {performance.isMonitoring ? 'פעיל' : 'לא פעיל'}\r\n              </div>\r\n              <div className=\"text-sm text-white/80\">ניטור ביצועים</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdvancedCodeManager;\r\n"],"names":["codeAnalyzer","constructor","this","issues","metrics","recommendations","analysisHistory","analyzeCode","code","filePath","__async","console","log","analysis","timestamp","Date","toISOString","complexity","maintainability","performance","security","analyzeComplexity","analyzePerformance","analyzeSecurity","analyzeMaintainability","identifyIssues","generateRecommendations","overallScore","calculateOverallScore","push","error","cyclomaticComplexity","nestingDepth","functionLength","parameterCount","returnStatements","calculateCyclomaticComplexity","calculateNestingDepth","calculateFunctionLength","calculateParameterCount","calculateReturnStatements","warn","memoryUsage","timeComplexity","inefficientPatterns","optimizationOpportunities","identifyInefficientPatterns","identifyOptimizationOpportunities","estimateTimeComplexity","estimateMemoryUsage","vulnerabilities","securityScore","riskLevel","identifySecurityVulnerabilities","calculateSecurityScore","assessRiskLevel","generateSecurityRecommendations","readability","modularity","documentation","testCoverage","technicalDebt","assessReadability","assessModularity","assessDocumentation","assessTestCoverage","calculateTechnicalDebt","commonIssues","identifyCommonIssues","antiPatterns","identifyAntiPatterns","performanceIssues","identifyPerformanceIssues","securityIssues","identifySecurityIssues","type","priority","message","suggestion","weights","scores","Math","max","Object","keys","reduce","total","key","round","match","length","lines","split","maxDepth","currentDepth","line","includes","functions","totalLines","func","totalParams","params","trim","count","usage","score","debt","severity","findLineNumber","searchTerm","i","getAnalysisStats","totalAnalyses","averageScore","calculateAverageScore","issuesByType","groupIssuesByType","recommendationsByPriority","groupRecommendationsByPriority","totalScore","sum","grouped","forEach","issue","CRITICAL","HIGH","MEDIUM","LOW","rec","clearHistory","exportAnalysis","stats","history","smartOptimizer","optimizations","Map","performanceMetrics","optimizationHistory","isEnabled","optimizeCode","_0","arguments","context","originalCode","shouldOptimizeLoops","optimizeLoops","shouldOptimizeMemory","optimizeMemory","shouldOptimizeDOM","optimizeDOM","shouldOptimizeAlgorithms","optimizeAlgorithms","shouldOptimizeAsync","optimizeAsync","saveOptimizationHistory","optimizedCode","optimizeForLoops","optimizeWhileLoops","optimizeForEach","replace","optimizeStringConcatenation","optimizeWeakReferences","stringConcatPattern","exec","variable","optimized","optimizeDOMCaching","optimizeBatchUpdates","optimizeDocumentFragment","domCalls","uniqueSelectors","Set","cacheCode","map","selector","join","cacheKey","RegExp","optimizeArrayIncludes","optimizeObjectLookup","test","setCode","mapCode","optimizePromiseAll","optimizePromiseRace","optimizePromiseCaching","awaitPattern","parallelCode","awaitMatch","racePattern","raceCode","awaitText","promises","historyEntry","originalSize","optimizedSize","sizeReduction","sizeReductionPercent","performanceGain","calculatePerformanceGain","localStorage","setItem","JSON","stringify","gain","min","getOptimizationStats","totalOptimizations","averageSizeReduction","averagePerformanceGain","totalCodeSizeSaved","totalSizeReduction","entry","totalPerformanceGain","removeItem","loadHistory","savedHistory","getItem","parse","toggleOptimization","getOptimizationRecommendations","autoTester","testCases","testResults","coverage","generateTests","tests","unitTests","generateUnitTests","integrationTests","generateIntegrationTests","performanceTests","generatePerformanceTests","securityTests","generateSecurityTests","saveTestResults","funcName","createFunctionTest","getTestStats","totalFiles","totalTests","result","performanceMonitor","thresholds","alerts","isMonitoring","startMonitoring","monitorMemory","monitorCPU","monitorNetwork","setInterval","memory","set","used","usedJSHeapSize","totalJSHeapSize","limit","jsHeapSizeLimit","now","checkMemoryThresholds","startTime","setTimeout","cpuLoad","load","checkCPUThresholds","navigator","connection","effectiveType","downlink","rtt","usagePercent","createAlert","toFixed","alert","getPerformanceStats","value","stopMonitoring","AdvancedCodeManager","currentFile","setCurrentFile","useState","fileContent","setFileContent","setAnalysis","optimization","setOptimization","setTests","setPerformance","isAnalyzing","setIsAnalyzing","isOptimizing","setIsOptimizing","isGeneratingTests","setIsGeneratingTests","useEffect","className","children","jsxs","jsx","jsxRuntimeExports","placeholder","onChange","e","target","onClick","disabled","file","rows","index","_a","substring","entries","testType","testContent","Array","isArray","cpu","network"],"mappings":"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"}